{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"shuyan ¶ 那些将要去的地方，都是素未谋面的故乡。 欢迎来到 shuyan 。 shuyan （chancezyw's blog）是较为全面的前端技术整理。 shuyan 涉及较多领域。我试图整理一个系统的手册，判断自己缺失的技术栈，并且专注核心概念，主要在于理解而不是成为 api 调用师。 目前， shuyan 主要包含 JavaScript 的基础知识，并正在着力完善以下内容 JavaScript 中的函数式编程 算法相关 关于上述部分待完善内容，请参见 shuyan 的 Projects ，详细列出了正在做的事项以及待做事项。 当然， shuyan 不会局限于 JavaScript ，在未来， shuyan 将会 深入 TypeScript 深入 Css 此外，鉴于以下两点 我不仅仅想写 blog，我试图梳理我的经历和看到的风景，可能会经常回顾，也会一往无前。 技术总是保持不断更新，旧的技术在面对新的技术时随时可能失效。 因此， shuyan 永远保持更新。 How to build？ ¶ blog 目前采用 mkdocs 部署在 https://chancezyw.github.io/shuyan/ 。 mkdocs gh-deploy 可以将其直接提交到 gh-pages 分支 如何安装 mkdocs 待整理 How to practice？ ¶ 首先，可以通过浏览网上资料来学习一些基本的语法。 其次，可以通过刷题巩固自己的学识。 What can you read? ¶ 我的旅行见闻 一些建议： 阅读 提问的智慧 善用 Google 搜索可以帮助你更好地提升自己 掌握至少一门编程语言，比如 JavaScript 实践比什么都要管用 保持对技术的好奇与渴望并坚持下去 Material color palette 更换颜色主题 ¶ Primary colors 主色 ¶ 默认 white 点击色块可更换主题的主色 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) Accent colors 辅助色 ¶ 默认 red 点击色块更换主题的辅助色 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","text_tokens":["未来","不仅仅","梳理","编程语言","掌握","var","待",",","localstorage","全面","一门","并","颜色","（","函数","旧","与","成为","data","搜索","较","至少","setitem","栈","）","知识","调用","也","how","较为",".","概念","下去","我","永远","试图","此外","md","。","整理","专注","随时",";","帮助","主要","typescript","刷题","采用","button","要","array","主色","经常","编程","read","通过","失效","来","领域","参见","无前","mdcoloraccent","师","首先","是","javascript","chancezyw","'","事项","直接","局限","更好","/","默认","？","浏览","-","语法","见闻","其","点击","将要","基本","blue","mdcolorprimary","mkdocs","更新","局限于","因此","to","以及","css","s","red","包含","去","学习","提问","更换","function","you","总是","primary","colors","不仅","yellow","地","queryselectorall","详细","核心","call","资料","前端","风景","限于","不断更新","可","基础","[","地方","lime","一个","https","不断","light","cyan","谋面","white","了","好奇","做"," ","新","}","中","和","什么","主题","一些","列出","目前","着力","amber","相关","部分","shuyan","grey","brown","到","那些","，","正在","关于","写","判断","dataset","：","你","build","而","缺失","善用","practice","addeventlistener","上述","实践","坚持","素未谋面","阅读","式","{","body","]","prototype","可以","material","indigo","orange","what","经历","仅仅","api","color","\"","学识","如何","this","¶","io","理解","?","网上","一往","会","故乡","保持","巩固","旅行","多","当然","色","在于","深入",":","提升","算法","pages","分支","色块","辅助","鉴于","欢迎","=","的","完善","涉及","内容","以下内容","请","将会","palette","buttons","gh","比如","click","accent","不会","都","不是","安装","手册","回顾","github","渴望","面对","来到","时","google","一往无前",")","purple","pink","document","其次","自己","(","两点","想","将","管用","系统","可能","对","green","projects","在","建议","can","并且","看到","blog","智慧","坚持下去","deep","基础知识","以下","teal","比","语言","部署","foreach","提交","技术","deploy"],"title":"Getting Started","title_tokens":[" ","started","getting"]},{"location":"#shuyan","text":"那些将要去的地方，都是素未谋面的故乡。 欢迎来到 shuyan 。 shuyan （chancezyw's blog）是较为全面的前端技术整理。 shuyan 涉及较多领域。我试图整理一个系统的手册，判断自己缺失的技术栈，并且专注核心概念，主要在于理解而不是成为 api 调用师。 目前， shuyan 主要包含 JavaScript 的基础知识，并正在着力完善以下内容 JavaScript 中的函数式编程 算法相关 关于上述部分待完善内容，请参见 shuyan 的 Projects ，详细列出了正在做的事项以及待做事项。 当然， shuyan 不会局限于 JavaScript ，在未来， shuyan 将会 深入 TypeScript 深入 Css 此外，鉴于以下两点 我不仅仅想写 blog，我试图梳理我的经历和看到的风景，可能会经常回顾，也会一往无前。 技术总是保持不断更新，旧的技术在面对新的技术时随时可能失效。 因此， shuyan 永远保持更新。","text_tokens":["未来","不仅仅","梳理","待","全面","并","（","函数","旧","成为","较","栈","）","知识","调用","也","较为","概念","我","永远","试图","此外","。","整理","专注","随时","主要","typescript","经常","编程","失效","领域","参见","无前","师","是","javascript","chancezyw","'","事项","局限","将要","更新","局限于","因此","以及","css","s","包含","去","总是","不仅","详细","核心","前端","风景","限于","不断更新","基础","地方","一个","不断","谋面","了","做"," ","新","中","和","列出","目前","着力","相关","部分","shuyan","那些","，","正在","关于","写","判断","而","缺失","上述","素未谋面","式","经历","仅仅","api","理解","一往","会","故乡","保持","多","当然","在于","深入","算法","鉴于","欢迎","的","完善","涉及","内容","以下内容","请","将会","不会","都","不是","手册","回顾","面对","来到","时","一往无前","自己","两点","想","系统","可能","projects","在","并且","看到","blog","基础知识","以下","技术"],"title":"shuyan","title_tokens":["shuyan"]},{"location":"#how-to-build","text":"blog 目前采用 mkdocs 部署在 https://chancezyw.github.io/shuyan/ 。 mkdocs gh-deploy 可以将其直接提交到 gh-pages 分支 如何安装 mkdocs 待整理","text_tokens":["目前","待","直接","chancezyw","shuyan","gh","到","/","-","其","安装","github","mkdocs","部署","可以",".","pages","如何","io","。","将","整理","https","在","采用","blog"," ",":","提交","分支","deploy"],"title":"How to build？","title_tokens":["？"," ","how","to","build"]},{"location":"#how-to-practice","text":"首先，可以通过浏览网上资料来学习一些基本的语法。 其次，可以通过刷题巩固自己的学识。","text_tokens":["一些","的","首先","，","语法","浏览","基本","可以","学习","学识","其次","自己","资料","。","网上","刷题","巩固"," ","通过","来"],"title":"How to practice？","title_tokens":["？","practice"," ","how","to"]},{"location":"#what-can-you-read","text":"我的旅行见闻 一些建议： 阅读 提问的智慧 善用 Google 搜索可以帮助你更好地提升自己 掌握至少一门编程语言，比如 JavaScript 实践比什么都要管用 保持对技术的好奇与渴望并坚持下去","text_tokens":["一些","编程语言","掌握","的","javascript","比如","一门","并","，","更好","你","：","与","见闻","搜索","都","善用","至少","实践","渴望","坚持","阅读","可以","google","提问","下去","地","我","自己","管用","对","帮助","建议","保持","智慧","要","好奇","坚持下去"," ","旅行","编程","比","语言","提升","技术","什么"],"title":"What can you read?","title_tokens":["you","can"," ","read","?","what"]},{"location":"#material-color-palette","text":"","text_tokens":[],"title":"Material color palette 更换颜色主题","title_tokens":["color","主题","palette"," ","material","颜色","更换"]},{"location":"#primary-colors","text":"默认 white 点击色块可更换主题的主色 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","text_tokens":["var","=","的","amber",",","grey","buttons","localstorage","brown","click","dataset","默认","data","-","点击","setitem","blue","addeventlistener","mdcolorprimary","{","body","]","prototype","red","orange","indigo","更换",")","function",".","color","primary","\"","purple","yellow","pink","queryselectorall","document","md","call","(","this","[","可",";","lime","green","button","light","cyan","white","array","deep"," ","主色","}","teal","色块","foreach","主题"],"title":"Primary colors 主色","title_tokens":[" ","colors","主色","primary"]},{"location":"#accent-colors","text":"默认 red 点击色块更换主题的辅助色 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","text_tokens":["辅助","var","=","的","amber","mdcoloraccent",",","buttons","localstorage","click","accent","dataset","默认","data","-","点击","setitem","blue","addeventlistener","{","body","]","prototype","red","orange","indigo","更换",")","function",".","color","\"","purple","yellow","pink","queryselectorall","document","md","call","(","this","[",";","lime","green","button","light","cyan","array","deep"," ","}","teal","色","色块","foreach","主题"],"title":"Accent colors 辅助色","title_tokens":["辅助","colors"," ","色","accent"]},{"location":"algorithm/introduction/","text":"Become stronger ¶ 想起加入小打卡的时候，阿赖问我一个简单的大堆找中值不用排序，我想了半天才想出来 我的心里只有一点感受：我要变强！ 变强的方法 ¶ 参考某位刷了三千多题大佬的 推荐顺序","text_tokens":["排序","的","时候","加入","阿赖","大佬","，","千多","变强","出来","：","顺序","推荐","某位","become","感受","心里","三千多","刷","我要","半天","想起","找","小","！","我","方法","打卡","想","¶","简单","题","不用","一个","一点","中值","了","问","三千"," ","只有","才","大堆","参考","stronger"],"title":"Getting Started","title_tokens":[" ","started","getting"]},{"location":"algorithm/introduction/#become-stronger","text":"想起加入小打卡的时候，阿赖问我一个简单的大堆找中值不用排序，我想了半天才想出来 我的心里只有一点感受：我要变强！","text_tokens":["排序","的","时候","加入","阿赖","，","变强","出来","：","感受","心里","我要","半天","想起","找","小","！","我","打卡","想","简单","不用","一个","一点","中值","了","问"," ","只有","才","大堆"],"title":"Become stronger","title_tokens":[" ","become","stronger"]},{"location":"algorithm/introduction/#_1","text":"参考某位刷了三千多题大佬的 推荐顺序","text_tokens":["推荐","某位","的","了","三千"," ","三千多","刷","大佬","千多","题","顺序","参考"],"title":"变强的方法","title_tokens":["变强","的","方法"]},{"location":"introduction/markdown-norm/","text":"Markdown 编写规范 ¶ 采用 CTF Wiki Team 的 Markdown 编写规范。 文档格式 ¶ 使用 .md 后缀 文件夹、文件名使用小写，单词之间使用连字符 - 分隔 建议使用连字符而非下划线的原因是，搜索引擎会将连字符处理为两个单词，而将下划线看做一个单词。参考 Google SEO 指南 。 文档编码使用 UTF-8 标题 ¶ 根据 MkDocs 的要求，文档中至多有一个一级标题 # ，当没有一级标题时采用目录配置中的标题作为当前页面的一级标题 章节标题从 ## 开始 章节标题在 ## 后添加空格，且之后没有 ## // bad ##章节1 // bad ## 章节1 ## // good ## 章节1 章节标题与正文间有且仅有一个空行 段落 ¶ 使用空行换行，尽量不适用两空格换行 部分 IDE 会在提交时自动清理行末的空格 一个段落只表达一个主题 使用主动语态 陈述句中使用肯定说法 删除不必要的词 避免啰嗦、口语化的语句 需要强调的内容酌情使用 Admonition 插件 ，有 note 、 abstract 、 info 、 tip 、 success 、 question 、 warning 、 failure 、 danger 、 bug 、 example 、 quote 多种样式 列表 ¶ 有序列表无需编码 ¶ 1. Foo. 1. Bar. 1. Foofoo. 1. Barbar. 1. Baz. 嵌套列表 ¶ 在有序和无需嵌套列表时使用 4 空格缩进。 1. 2 spaces after a numbered list. 4 space indent for wrapped text. 2. 2 spaces again. * 3 spaces after a bullet. 4 space indent for wrapped text. 1. 2 spaces after a numbered list. 8 space indent for the wrapped text of a nested list. 2. Looks nice, don't it? * 3 spaces after a bullet. 当没有嵌套时，也尽量使用 4 空格缩进。 * Foo, wrapped. 1. 2 spaces and 4 space indenting. 2. 2 spaces again. 当列表结构很简单时，可以在标识符后使用 1 个空格作为标记。 * Foo * Bar * Baz. 1. Foo. 2. Bar. 代码 ¶ 代码块 ¶ 代码块使用 Fenced Block ​```js console.log(\"\"); ​``` 代码块注明语言，以便代码高亮，参见 Pygments 文档 行内代码 ¶ 行内代码使用反引号，且当引用文件时使用行内代码 Be sure to update your `README.md`! 表格 ¶ 以 GitHub Flavored Markdown 格式为准。 | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | | Left-aligned | Center-aligned | Right-aligned | | :--- | :---: | ---: | | git status | git status | git status | | git diff | git diff | git diff | 排版 ¶ 空格 ¶ 中英文之间需要增加空格（包括行内代码） 中文与数字之间需要增加空格 数字与单位之间需要增加空格 全角标点与其他字符之间不加空格 标点符号 ¶ 不重复使用标点符号 用直角引号 「」 代替双引号 “” 使用规范的省略号 …… 全角与半角 ¶ 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 ¶ 专有名词使用正确的大小写 公式 ¶ 合理使用行内公式和行间公式，前后无文字的尽量使用行间公式，可以居中显示，提升阅读体验。 行内公式 $ a + b = c $ 行间公式 $$ a + b = c $$ 其他 ¶ 更多排版相关内容和例子请参考 中文排版指南 。","text_tokens":["log","直角","为准","nested","尽量","代码","2","utf","bar","酌情","居中","处理","啰嗦","md","两个","t","」","下划","info","不必","「","只","正文","特殊","barbar","完整","don","配置","引用","专有","content","update","主题","加","必要","nice","根据","success","console","after","索引","可以","引号","\"","适用","indent","diff","体验","status","说法",":","例子","question","…","标识","文件","git","时","页面","|","numbered","$","(","其他","更","重复","行内","语言","肯定","陈述句","提交","分隔","bullet","与","标题","中文标点","空行","）","个","也","+","js","文档","be",";","删除","结构","表达","center","前后","参见","字符","格式","'","插件","引擎","/","代替","-","后缀","之间","mkdocs","行间","to","##","failure","大小","清理","一个","文件名","其內容","ide","中","嵌套","left","高亮","aligned","全角","口语","搜索引擎","阅读","for","1","flavored","again","指南","text","#","b","增加","sure","多","双引号","your","pygments","内容","单词","请","cell","quote","标记","spaces","!","google",")","连","章节","省略","语态","建议","header","列表","参考","以","无需",",","避免","（","it","名词","显示","划线","中英","添加","seo","从","使用","采用","规范","indenting","wiki","danger","序列","要求","没有","文字","非","公式","标点","tip","不","标点符号","行末","baz","c","部分","foofoo","符号","a","下划线","一级","而","作为","wrapped","段落","、","开始","编码","且","¶","会","省略号","多种","“","数字","ctf","仅","缩进","无","提升","and","right","至多","当前","以便","有名","4","编写","team","原因","note","小写","序列表","目录","后","之后","搜索","readme","中文","半角","abstract",".","first","the","looks","包括","。","需要","有","大小写","块","表格","block","合理","是","of","遇到","语句","space","词","文件夹","整句","用","warning","*","”","单位","正确","second","3"," ","换行","两","和","专有名词","很","相关","强调","，","标识符","fenced","有序","example","陈述","`","自动","看做","为","简单","?","markdown","主动","=","中英文","的","重复使用","当","bug","不必要","bad","空格","github","反","间","样式","口语化","good","​","件夹","8","将","英文","在","注明","admonition","foo","list","排版"],"title":"Markdown Norm","title_tokens":["markdown","norm"," "]},{"location":"introduction/markdown-norm/#markdown","text":"采用 CTF Wiki Team 的 Markdown 编写规范。","text_tokens":["team","采用","wiki","的","markdown"," ","规范","ctf","。","编写"],"title":"Markdown 编写规范","title_tokens":["markdown","规范","编写"," "]},{"location":"introduction/markdown-norm/#_1","text":"使用 .md 后缀 文件夹、文件名使用小写，单词之间使用连字符 - 分隔 建议使用连字符而非下划线的原因是，搜索引擎会将连字符处理为两个单词，而将下划线看做一个单词。参考 Google SEO 指南 。 文档编码使用 UTF-8","text_tokens":["分隔","的","下划","单词","字符","是","引擎","下划线","，","参考","文件","搜索","-","而","搜索引擎","utf","后缀","之间","索引","文件夹","google","件夹","文档","划线",".","连","处理","、","seo","编码","8","md","看做","为","将","非","。","两个","指南","会","一个","使用","原因","文件名","建议"," ","小写"],"title":"文档格式","title_tokens":["格式","文档"]},{"location":"introduction/markdown-norm/#_2","text":"根据 MkDocs 的要求，文档中至多有一个一级标题 # ，当没有一级标题时采用目录配置中的标题作为当前页面的一级标题 章节标题从 ## 开始 章节标题在 ## 后添加空格，且之后没有 ## // bad ##章节1 // bad ## 章节1 ## // good ## 章节1 章节标题与正文间有且仅有一个空行","text_tokens":["目录","的","当","后","，","之后","一级","/","标题","与","根据","空行","至多","bad","空格","当前","时","mkdocs","页面","间","作为","good","1","正文","文档","##","添加","开始","从","要求","且","章节","没有","有","一个","#","在","采用","配置"," ","仅","中"],"title":"标题","title_tokens":["标题"]},{"location":"introduction/markdown-norm/#_3","text":"使用空行换行，尽量不适用两空格换行 部分 IDE 会在提交时自动清理行末的空格 一个段落只表达一个主题 使用主动语态 陈述句中使用肯定说法 删除不必要的词 避免啰嗦、口语化的语句 需要强调的内容酌情使用 Admonition 插件 ，有 note 、 abstract 、 info 、 tip 、 success 、 question 、 warning 、 failure 、 danger 、 bug 、 example 、 quote 多种样式","text_tokens":["表达","question","的","内容","行末","强调","info","部分","不必","必要","插件","，","bug","尽量","避免","quote","口语","空行","不必要","success","空格","主动","danger","陈述句","肯定","时","语句","酌情","样式","口语化","只","词","abstract","example","陈述","段落","主题","、","failure","warning","适用","啰嗦","自动","tip","清理","需要","有","会","一个","使用","语态","在","note","多种","admonition","说法"," ","删除","换行","两","ide","中","提交","不"],"title":"段落","title_tokens":["段落"]},{"location":"introduction/markdown-norm/#_4","text":"","text_tokens":[],"title":"列表","title_tokens":["列表"]},{"location":"introduction/markdown-norm/#_5","text":"1. Foo. 1. Bar. 1. Foofoo. 1. Barbar. 1. Baz.","text_tokens":[".","baz","bar","barbar"," ","foofoo","foo","1"],"title":"有序列表无需编码","title_tokens":["序列表","无需","编码","列表","序列","有"]},{"location":"introduction/markdown-norm/#_6","text":"在有序和无需嵌套列表时使用 4 空格缩进。 1. 2 spaces after a numbered list. 4 space indent for wrapped text. 2. 2 spaces again. * 3 spaces after a bullet. 4 space indent for wrapped text. 1. 2 spaces after a numbered list. 8 space indent for the wrapped text of a nested list. 2. Looks nice, don't it? * 3 spaces after a bullet. 当没有嵌套时，也尽量使用 4 空格缩进。 * Foo, wrapped. 1. 2 spaces and 4 space indenting. 2. 2 spaces again. 当列表结构很简单时，可以在标识符后使用 1 个空格作为标记。 * Foo * Bar * Baz. 1. Foo. 2. Bar.","text_tokens":["indenting","无需",",","很","baz","当","'","后","and","bullet","a","nested","，","标识","of","尽量","it","标记","nice","标识符","2","spaces","空格","有序","after","个","bar","时","space","也","作为","for","1","可以","numbered",".","wrapped","4","*","8","the","looks","没有","again","简单","。","?","indent","don","text","使用","在","t","3"," ","列表","list","foo","结构","缩进","和","嵌套"],"title":"嵌套列表","title_tokens":["列表","嵌套"]},{"location":"introduction/markdown-norm/#_7","text":"","text_tokens":[],"title":"代码","title_tokens":["代码"]},{"location":"introduction/markdown-norm/#_8","text":"代码块使用 Fenced Block ​```js console.log(\"\"); ​``` 代码块注明语言，以便代码高亮，参见 Pygments 文档","text_tokens":["pygments","log","参见","高亮","，","代码","fenced","console","以便","​","js","文档",")",".","\"","`","(",";","使用","注明","块"," ","语言","block"],"title":"代码块","title_tokens":["代码","块"]},{"location":"introduction/markdown-norm/#_9","text":"行内代码使用反引号，且当引用文件时使用行内代码 Be sure to update your `README.md`!","text_tokens":["your","当","，","代码","文件","readme","反","时","!","to","引号","be",".","`","且","md","使用","引用","sure","行内"," ","update"],"title":"行内代码","title_tokens":["代码","行内"]},{"location":"introduction/markdown-norm/#_10","text":"以 GitHub Flavored Markdown 格式为准。 | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | | Left-aligned | Center-aligned | Right-aligned | | :--- | :---: | ---: | | git status | git status | git status | | git diff | git diff | git diff |","text_tokens":["以","格式","left","为准","aligned","cell","right","-","git","github","|","flavored","first","。","diff","second","header","status","markdown"," ","content",":","center"],"title":"表格","title_tokens":["表格"]},{"location":"introduction/markdown-norm/#_11","text":"","text_tokens":[],"title":"排版","title_tokens":["排版"]},{"location":"introduction/markdown-norm/#_12","text":"中英文之间需要增加空格（包括行内代码） 中文与数字之间需要增加空格 数字与单位之间需要增加空格 全角标点与其他字符之间不加空格","text_tokens":["中英文","字符","加","全角","代码","（","与","中文","空格","）","之间","中英","包括","单位","其他","需要","英文","增加","数字","标点","行内"," ","不"],"title":"空格","title_tokens":["空格"]},{"location":"introduction/markdown-norm/#_13","text":"不重复使用标点符号 用直角引号 「」 代替双引号 “” 使用规范的省略号 ……","text_tokens":["标点符号","」","的","直角","重复使用","符号","…","「","代替","用","引号","”","省略","使用","省略号","“","重复","标点"," ","规范","双引号","不"],"title":"标点符号","title_tokens":["符号","标点","标点符号"]},{"location":"introduction/markdown-norm/#_14","text":"使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点","text_tokens":["的","字符","，","全角","遇到","名词","中文标点","中文","半角","特殊","整句","、","完整","英文","使用","其內容","数字","标点"," "],"title":"全角与半角","title_tokens":["全角","半角","与"]},{"location":"introduction/markdown-norm/#_15","text":"专有名词使用正确的大小写","text_tokens":["使用","大小写","专有","的","小写","专有名词","大小","有名","名词","正确"],"title":"名词","title_tokens":["名词"]},{"location":"introduction/markdown-norm/#_16","text":"合理使用行内公式和行间公式，前后无文字的尽量使用行间公式，可以居中显示，提升阅读体验。 行内公式 $ a + b = c $ 行间公式 $$ a + b = c $$","text_tokens":["前后","=","的","c","a","，","尽量","阅读","行间","居中","+","可以","显示","$","提升","合理","文字","。","体验","使用","公式","b","行内"," ","无","和"],"title":"公式","title_tokens":["公式"]},{"location":"introduction/markdown-norm/#_17","text":"更多排版相关内容和例子请参考 中文排版指南 。","text_tokens":["中文","内容","相关","请"," ","多","。","更","例子","指南","和","排版","参考"],"title":"其他","title_tokens":["其他"]},{"location":"introduction/resources/","text":"学习资源 ¶ 在线学习 ¶ js 基础学习 优质 blog ¶ ICss 奇淫技巧 梁少峰的个人 blog 30 days 精通 Rx.js 书单 ¶ 敏捷开发","text_tokens":["在线","days","的","书单","rx","敏捷","资源","个人","30","优质","奇淫","技巧","js","学习",".","精通","梁少峰","¶","开发","基础","blog"," ","icss"],"title":"Learning Resources","title_tokens":[" ","learning","resources"]},{"location":"introduction/resources/#_1","text":"","text_tokens":[],"title":"学习资源","title_tokens":["资源","学习"]},{"location":"introduction/resources/#_2","text":"js 基础学习","text_tokens":[" ","基础","js","学习"],"title":"在线学习","title_tokens":["在线","学习"]},{"location":"introduction/resources/#blog","text":"ICss 奇淫技巧 梁少峰的个人 blog 30 days 精通 Rx.js","text_tokens":[".","days","的","blog","30"," ","rx","精通","梁少峰","奇淫","技巧","js","个人","icss"],"title":"优质 blog","title_tokens":["优质","blog"," "]},{"location":"introduction/resources/#_3","text":"敏捷开发","text_tokens":["开发","敏捷"],"title":"书单","title_tokens":["书单"]},{"location":"introduction/study-thought/","text":"如何学习 ¶ 如何养成良好的学习习惯和思考习惯？ 大脑结构 ¶ 在放松的时候，大脑神经网络会生成新的 突触 并且「删除」某些老旧的突触 因此可以通过睡前复习一遍的方式让新的突触记住某些重要信息，长此以往能够控制记忆向特定的方向发展 良好睡眠 ¶ 良好的睡眠能加强脑细胞的新陈代谢，有利于新突触的生长 睡眠有助于大脑海马体产生新的神经元，也就是说，你变聪明了。 僵尸意识 ¶ cue 在你做事之前的信号 routine 惯性，在接到信号之后你的行为 reward 做出这样行为之后的结果 belief 养成信念 组块 ¶ 组块是在集中的思维模式下的重要学习方式。将一些信息关联起来，打包成「压缩包」 以后要回忆这个组块中的所有东西，都不需要整个执行。 e.g 比如你穿衣服，你就能知道如何穿，穿什么一样 怎样形成组块 ¶ 核心办法 分解 聚合 专注 将大的问题分解成小的问题，将小的问题反复练习从而掌握，再将小的解决方案聚合成大的解决方案，那么你最终就解决了这个问题 同时你要知道人的智商有限，世界上没有天才，我们只是普通人，这意味着接受东西的速度有限。因此保持专注才能让你的学习速度最大化，也就是知识 性价比 番茄工作法 ¶ 集中精力 25 分钟，然后给予自己奖励，这是克服拖延症的最好办法 间隔重复法则 ¶ 反复能够加强神经网络突触的记忆，即使是很抽象的东西重复十遍也能掌握 反复的技巧在于和番茄工作法结合起来，在一段时间内高强度的学习，然后放松一段时间，让大脑神经网络固化这些新生成突触，并忘记一些不重要的突触 在重复中回顾 ¶ 单一的重复难免让人乏味，你可以试着闭上眼回顾。 克服拖延症 ¶ 隔离危险的信号 养成微习惯 奖励 如何制定任务 ¶ 只制定明天的任务 任务小而精确 今天做不完的任务不是明天做而是周末做 每天刚开始的时候先做最复杂难做的任务 合理运动和学习 ¶ 人的大脑每天都在产生神经元，如果不用掉就会死亡，而老的神经元开始衰弱，所以每天不管学多少，至少学一点 思维 ¶ 多用类比和比喻 ¶ 类比和比喻有利于大脑形成组块 以终为始的思维 ¶ 举个栗子，我们对物流的看法只是更快而已。然而在马云眼中他认为物流的目的是消灭企业的库存。 批判思维 ¶ 根据已有的数据去分析去推断 即时反馈 ¶ 学得到的东西用大白话讲给别人听，你会明白更多 五分钟起步法 ¶ 遇见不想做但是做了会更好的事情，先做五分钟，再谈其他","text_tokens":["分解","天才","认为","穿衣服","聚合","忘记","压缩","e","小","为始","模式","新陈代谢","今天","强度","乏味","拖延","问题","」","变","一段","先","任务","海马","更好","「","眼中","库存","如果","只","因此","记忆","危险","信念","速度","练习","大脑","遇见","新","克服","起步","复习","然后","即使","根据","思考","内","良好","可以","多用","集中","细胞","就是","重要","保持","最大","脑神经","我们","belief","这样","cue","通人","以终","物流","行为","习惯","隔离","更","其他","对","从而","分解成","每天","生成","试着","重复","穿","也就是说","做出","制定","完","g","反馈","周末","执行","也","这","刚","代谢","办法","控制","要","删除","目的","有助","结构","关联","讲","不管","事情","老旧","僵尸","让","做事","脑细胞","长此以往","法则","批判","下","十遍","不用","了","快","得到","某些","以后","只是","有利于","中","整个","所以","什么","睡眠","精力","助于","意味","番茄","最","固化","时间","法","普通人","多","在于","组块","方向","别人","大化","起来","成大","运动","马云","回顾","能够","衰弱","精确","技巧","加强","反复","就","接到","而已","微","成","生长","世界","25","衣服","神经网","复杂","才能","知识","这个","学","举个","专注","东西","一段时间","给予","通过","放松","？","类比","记住","去","利于","而是","没有","能","不","他","消灭","但是","神经网络","意识","而","企业","怎样","分析","形成","开始","¶","会","方案","一点","意味着","上","网络","接受","知道","不是","发展","routine","间隔","已有","之前","解决方案","智商","再","掌握","时候","有利","推断","并","之后","这是","最好","至少","睡前","向","五分","一遍","多少","即时","栗子",".","比喻","给","数据","。","需要","reward","惯性","结果","打包","信号","解决","高强","合理","白话","神经元","是","然而","奖励","信息","性价比","看法","大白","症","最终","学习","用","核心","明白","那么","产生"," ","做","死亡","穿衣","方式","和","有助于","突触","一些","单一","同时","很","，","你","人","大脑神经","大白话","听","以往","高强度","这些","就是说","聪明","如何","难","神经","不想","集中精力","明天","一样","结合","的","回忆","所有","分钟","老","上眼","压缩包","养成","比如","抽象","普通","段时间","都","体","小而","五分钟","闭上眼","思维","难免","掉","工作","自己","再谈","将","在","并且","最大化","特定","大","有限"],"title":"Study&Thought","title_tokens":["study","thought","&"]},{"location":"introduction/study-thought/#_1","text":"如何养成良好的学习习惯和思考习惯？","text_tokens":["？","的","习惯","思考","养成","如何","良好","和","学习"],"title":"如何学习","title_tokens":["如何","学习"]},{"location":"introduction/study-thought/#_2","text":"在放松的时候，大脑神经网络会生成新的 突触 并且「删除」某些老旧的突触 因此可以通过睡前复习一遍的方式让新的突触记住某些重要信息，长此以往能够控制记忆向特定的方向发展","text_tokens":["突触","」","复习","的","时候","方向","放松","，","网络","老旧","让","「","信息","长此以往","发展","睡前","能够","向","大脑神经","一遍","记住","因此","可以","记忆","以往","神经","会","在","重要","生成","并且","大脑","控制","某些","脑神经"," ","新","删除","特定","通过","方式"],"title":"大脑结构","title_tokens":["大脑","结构"]},{"location":"introduction/study-thought/#_3","text":"良好的睡眠能加强脑细胞的新陈代谢，有利于新突触的生长 睡眠有助于大脑海马体产生新的神经元，也就是说，你变聪明了。","text_tokens":["突触","神经元","变","的","也就是说","有利","，","睡眠","海马","你","脑细胞","体","助于","良好","利于","细胞","就是","就是说","聪明","神经","能","加强","。","代谢","新陈代谢","大脑","了","产生"," ","新","有助","有利于","有助于","生长"],"title":"良好睡眠","title_tokens":["良好","睡眠"]},{"location":"introduction/study-thought/#_4","text":"cue 在你做事之前的信号 routine 惯性，在接到信号之后你的行为 reward 做出这样行为之后的结果 belief 养成信念","text_tokens":["的","做出","belief","养成","，","这样","之后","做事","你","cue","routine","行为","信念","reward","惯性","结果","之前","在","接到"," ","信号"],"title":"僵尸意识","title_tokens":["意识","僵尸"]},{"location":"introduction/study-thought/#_5","text":"组块是在集中的思维模式下的重要学习方式。将一些信息关联起来，打包成「压缩包」 以后要回忆这个组块中的所有东西，都不需要整个执行。 e.g 比如你穿衣服，你就能知道如何穿，穿什么一样","text_tokens":["一些","关联","」","的","回忆","所有","衣服","是","压缩包","比如","穿衣服","，","起来","穿衣","你","「","信息","都","知道","g","压缩","中","执行","思维","e","学习","这个",".","集中","整个","下","如何","什么","能","将","。","需要","模式","在","重要","打包","就","东西","要"," ","以后","穿","一样","组块","方式","成","不"],"title":"组块","title_tokens":["组块"]},{"location":"introduction/study-thought/#_6","text":"核心办法 分解 聚合 专注 将大的问题分解成小的问题，将小的问题反复练习从而掌握，再将小的解决方案聚合成大的解决方案，那么你最终就解决了这个问题 同时你要知道人的智商有限，世界上没有天才，我们只是普通人，这意味着接受东西的速度有限。因此保持专注才能让你的学习速度最大化，也就是知识 性价比","text_tokens":["智商","再","分解","世界","掌握","的","同时","我们","天才","大化","上","，","聚合","普通","成大","让","你","通人","接受","性价比","知道","人","才能","知识","意味","也","因此","这","最终","学习","小","这个","核心","就是","没有","将","专注","。","速度","反复","从而","分解成","方案","练习","普通人","就","办法","东西","了","要","保持","那么","意味着","最大"," ","最大化","解决方案","解决","只是","大","有限","问题"],"title":"怎样形成组块","title_tokens":["怎样","组块","形成"]},{"location":"introduction/study-thought/#_7","text":"集中精力 25 分钟，然后给予自己奖励，这是克服拖延症的最好办法","text_tokens":["精力","25","集中","集中精力","分钟","然后","的","办法"," ","给予","自己","症","克服","，","拖延","这是","奖励","最好"],"title":"番茄工作法","title_tokens":["工作","番茄","法"]},{"location":"introduction/study-thought/#_8","text":"反复能够加强神经网络突触的记忆，即使是很抽象的东西重复十遍也能掌握 反复的技巧在于和番茄工作法结合起来，在一段时间内高强度的学习，然后放松一段时间，让大脑神经网络固化这些新生成突触，并忘记一些不重要的突触","text_tokens":["突触","一些","一段","掌握","的","然后","神经网","即使","是","很","放松","神经网络","抽象","并","，","网络","起来","段时间","让","忘记","能够","番茄","大脑神经","也","内","技巧","记忆","学习","高强度","工作","这些","固化","十遍","神经","能","加强","时间","反复","法","在","重要","生成","东西","重复","大脑","一段时间","强度"," ","脑神经","新","高强","在于","结合","和","不"],"title":"间隔重复法则","title_tokens":["间隔","重复","法则"]},{"location":"introduction/study-thought/#_9","text":"单一的重复难免让人乏味，你可以试着闭上眼回顾。","text_tokens":["单一","人","的","试着","回顾","重复","上眼","乏味","闭上眼","，","。","可以","让","难免","你"],"title":"在重复中回顾","title_tokens":["回顾","重复","中","在"]},{"location":"introduction/study-thought/#_10","text":"隔离危险的信号 养成微习惯 奖励","text_tokens":["的","习惯","微","危险"," ","养成","信号","隔离","奖励"],"title":"克服拖延症","title_tokens":["症","克服","拖延"]},{"location":"introduction/study-thought/#_11","text":"只制定明天的任务 任务小而精确 今天做不完的任务不是明天做而是周末做 每天刚开始的时候先做最复杂难做的任务","text_tokens":["的","时候","先","任务","制定","复杂","完","不是","小而","周末","只","精确","最","开始","而是","难","刚","每天","明天","今天","做"," ","不"],"title":"如何制定任务","title_tokens":["如何","任务","制定"]},{"location":"introduction/study-thought/#_12","text":"人的大脑每天都在产生神经元，如果不用掉就会死亡，而老的神经元开始衰弱，所以每天不管学多少，至少学一点","text_tokens":["神经元","的","不管","老","，","都","而","人","至少","如果","衰弱","多少","开始","学","掉","神经","不用","会","每天","在","一点","就","大脑","产生","死亡","所以"],"title":"合理运动和学习","title_tokens":["合理","运动","和","学习"]},{"location":"introduction/study-thought/#_13","text":"","text_tokens":[],"title":"思维","title_tokens":["思维"]},{"location":"introduction/study-thought/#_14","text":"类比和比喻有利于大脑形成组块","text_tokens":["利于","比喻","形成","大脑","类比","有利","有利于","组块","和"],"title":"多用类比和比喻","title_tokens":["比喻","和","类比","多用"]},{"location":"introduction/study-thought/#_15","text":"举个栗子，我们对物流的看法只是更快而已。然而在马云眼中他认为物流的目的是消灭企业的库存。","text_tokens":["我们","的","消灭","认为","是","，","然而","马云","眼中","看法","库存","企业","物流","栗子","举个","。","更","对","在","而已","快","目的","只是","他"],"title":"以终为始的思维","title_tokens":["思维","以终","的","为始"]},{"location":"introduction/study-thought/#_16","text":"根据已有的数据去分析去推断","text_tokens":["根据","的","已有","推断","数据","分析","去"],"title":"批判思维","title_tokens":["思维","批判"]},{"location":"introduction/study-thought/#_17","text":"学得到的东西用大白话讲给别人听，你会明白更多","text_tokens":["会","讲","给","明白","的","学","东西","得到","大白话","别人","大白","听","多","，","更","你","白话","用"],"title":"即时反馈","title_tokens":["即时","反馈"]},{"location":"introduction/study-thought/#_18","text":"遇见不想做但是做了会更好的事情，先做五分钟，再谈其他","text_tokens":["的","分钟","了","遇见","但是","做","先","五分","五分钟","再谈","不想","事情","，","更好","其他","会"],"title":"五分钟起步法","title_tokens":["分钟","五分","五分钟","起步","法"]},{"location":"javascript/introduction/","text":"","text_tokens":[],"title":"Addition Concept","title_tokens":[" ","concept","addition"]},{"location":"javascript/core/execute-context/","text":"执行上下文 ¶","text_tokens":["上下文"," ","执行","下文","¶","上下"],"title":"Execute Context","title_tokens":[" ","context","execute"]},{"location":"javascript/core/execute-context/#_1","text":"","text_tokens":[],"title":"执行上下文","title_tokens":["上下","执行","下文","上下文"]},{"location":"javascript/core/promise/","text":"","text_tokens":[],"title":"Promise","title_tokens":["promise"]},{"location":"javascript/fp/composing-functions/","text":"函数组合 ¶ 函数的组合就像拼 Lego 一样，你可以从现成的积木库中取出小方块和长条去组成程序中数据需要的管道样子。 function outputs ¶ 在函数组合中，很容易发生这种情况，一个函数的输出作为下一个函数的输入传递，直到拿到最终的输出 let toUpper = msg => msg . toUpperCase () let welcome = msg => msg + 'GOOD NIGHT' let username = toUpper ( 'User' ) let welcomeUser = welcome ( username ) // 改进 let welcomeWord = msg => welcome ( toUpper ( msg )) let welcomeUser = welcomeWord ( 'User' ) 考虑一个通用的组合函数 let compose2 = ( fn2 , fn1 ) => origValue => fn2 ( fn1 ( origValue )); 注意函数的运行顺序从右向左，左边的函数在最外层最后执行。 这是大多数 FP 的库的约定俗成的规定。 需要注意的是，函数的组合需要注意类型安全，上面只是一个做作的例子。 我们可以把 2 * 2 的 Lego 放在 1 * 4 的 Lego 上面，也可以吧 1 * 4 的 Lego 放在 2 * 2 的 Lego 上面。 常规函数组合 ¶ 我们如果可以轻易的组合两个函数，那么同样的，我们也可以组合多个函数 finalValue <-- func1 <-- func2 <-- ... <-- funcN <-- origValue let compose = (... fns ) => res => { let list = [... fns ] while ( list . length > 0 ) { res = list . pop ()( res ) } return res } 这里之所以使用 list copy 一份函数数组是因为，如果不拷贝的话，返回的组合函数只能使用一次。 pop 方法会修改原数组，使得 fns 长度减小 然后我们可以对之前的函数进行组合。并且可以使用系列第三篇文章提到的 partialRight 来预设要组合的函数。 当然，也可以使用 curry 和 reverse 来从左到右的依次组合。 这和数组的 reduce() 方法很像，因此我们还有别的实现 compose 的方式 let compose = (... fns ) => res => [... fns ]. reverse (). reduce (( result , fn ) => fn ( result ), res ) 这样实现的好处是更具备可读性，也是 FPer 喜欢的方式，他的性能也和使用 for 循环类似。 但是这样实现每次迭代函数只能接收一个参数。 当然，我们也可以使用一个惰性函数封装 let compose = (... fns ) => fns . reverse (). reduce (( fn1 , fn2 ) => (... args ) => fn2 ( fn1 (... args ))) 在每次 reduce 中，我们不再计算函数的返回值，而是将函数作为输入传递给下一次迭代的函数。这样我们可以尽可能多的传递参数，而不用受到局限。 在这样实现 compose 的技巧当中，我们运用了 惰性计算 的方式。 这样实现在每次调用组合函数时，将不会调用 reduce 循环 甚至，我们还可以通过递归的方式去调用 compose2 方法 let compose = (... fns ) => { // pull off the last two arguments let [ fn1 , fn2 , ... rest ] = fns . reverse () let composedFn = (... args ) => fn2 ( fn1 ( ... args ) ) if ( rest . length == 0 ) return composedFn ; return compose ( ... rest . reverse (), composedFn ) } 递归的好处在于我们能从概念上去理解 compose pipe ¶ pipe 与 compose 相同，只不过 pipe 是从左往右 let pipe = reverseArgs ( compose ) 你可能会困惑，我们给出详细实现。 let pipe = (... fns ) => result => { let list = [... fns ] while ( list . length > 0 ) { // take the first function from the list // and execute it result = list . shift ()( result ); } return result ; }; 在某些需要 reverse 右边参数的场景，使用 pipe 会更有效率 Abstraction ¶ 抽象是一个重要的能力，他让我们的一些代码只需要写一遍。 思考 let saveComment = txt => { if ( txt != \"\" ) comments [ comments . length ] = txt ; } let trackEvent = evt => { if ( evt . name !== undefined ) { events [ evt . name ] = evt ; } } 我们可以很轻松的发现，上面代码的共性就是存储一个值 function storeData ( store , location , value ) { store [ location ] = value ; } function saveComment ( txt ) { if ( txt != \"\" ) { storeData ( comments , comments . length , txt ); } } function trackEvent ( evt ) { if ( evt . name !== undefined ) { storeData ( events , evt . name , evt ); } } 上面体现了抽象的一个原则，那就是不要重复。 但是注意抽象不要过头。 我们可以隐藏一些细节，就像黑盒子那样 但是被隐藏的细节应该是相对的，比如我们有一个相互依赖的功能 x 和 y 当我们专注 x 的时候 y 是无关紧要的 相反，我们专注 y 的时候 x 是无关紧要的。 我们抽象的目的不是隐藏细节，而是调整聚焦 。 请时刻记住，函数式编程的本质目的是写出更多可读性良好，可维护的代码。 为了分离两个概念，我们会插入一个语义级的分界，在大多数情况下，这个边界就是函数的名称。我们调用时，只在意名称和他的输出。 我们把 怎样 和 什么 分离开来 命令式编程风格说明 怎样 而声明式风格注重 什么 也就是输出，声明式关心结果，将如何实现交给别人。 声明式代码实现了从 how 到 what 的一个抽象 我们应该在声明式和命令式之间找到一个平衡。 声明式简单的将 做什么 和 如何做 分开 compose VS abstract ¶ compose 也是 声明式 的抽象 总而言之，compose 是一项非常有用的技能来将我们命令式的代码转换为可读性更好的声明式的代码。 在 FP 中 compose是极其重要的一种方式，它可能是函数间除了副作用传递数据的唯一方法。","text_tokens":["左","代码","函数","y","2","how","evt","注重","概念","使得","作用","考虑","困惑","两个","为了","welcome","let","还有","命令","约定","喜欢","来","甚至","局限","更好","第三篇","实现","如果","只","因此","第三","function","可读","常规","toupper","touppercase","开来","然后","运用","while","往右","体现","安全","思考","reverseargs","风格","修改","良好","可以","改进","outputs","文章","通用","组合","库","\"","就是","composedfn","依赖","copy","origvalue","受到","重要","off","当然","那","例子","我们","abstraction","这样","相互依赖","程序","reduce","时","reverse","约定俗成","除了","(","welcomeword","黑盒子","更","对","因为","重复","最后","rest","关紧","能力","store","总而言之","与","只不过","分界","执行","也","+","这","curry","依次","pull","相对","系列","返回值","每次",";","<","要","目的","样子","参数","被","盒子","'","上面","让","/","from","-",">","名称","之间","welcomeuser","尽可","交给","arguments","下","那样","库中","可","不用","一个","级","value","了","某些","}","只是","x","中","所以","什么","拼","迭代","拷贝","副作用","for","1","two","return","最","吧","减小","容易","不再","还","相同","接收","左边","多","黑盒","在于","发现","有效率","请","插入","分离","别人","在意","comments","不会","值","这种","从左到右","关心","紧要","积木","result","循环","!","技巧",")","events","外层","一项","undefined","就","封装",",","是因为","last","shift","原则","fn1","it","func1","compose2","take","这个","从","name","args","execute","专注","类型","小方","lego","...","使用","只能","调整","唯一","现成","技能","通过","当中","非常","fper","给出","顺序","无关紧要","做作","方块","把","记住","去","平衡","详细","而是","pipe","能","[","极其","过头","别的","规定","res","fn","一种","不","他","取出","但是","直到","具备","写","转换","而","本质","极其重要","msg","怎样","应该","说明","compose","]","作为","类似","pop","情况","数组","有效","从右","维护","¶","聚焦","理解","会","小方块","输入","计算","savecomment","语义","一份","funcn","三篇","返回","and","而言","细节","传递数据","有用","不是","预设","发生","一次","4","txt","可能","像","之前","多数","组成","night","时候","存储","声明","长条","这是","大多","fp","原","向","场景","共性","调用","一遍","写出","abstract",".","给","first","不要","the","隐藏","数据","相反","。","需要","有","if","结果","分开","管道","边界","fn2","编程","location","是","轻易","命令式","相互","0","功能","长度","最终","vs","*","好处","注意","那么","做"," ","的话","trackevent","方式","和","一些","user","很","大多数","到","递归","，","不过","你","finalvalue","{","式","拿到","what","storedata","如何","为","简单","传递","fns","这里","找到","username","提到","从左往右","惰性","一样","同样","=","的","运行","当","性能","比如","多个","抽象","效率","时刻","右边","放在","尽可能","上去","间","good","length","输出","它","轻松","可读性","方法","进行","将","在","并且","func2","无关","list","之所以","partialright"],"title":"Composing Function","title_tokens":[" ","composing","function"]},{"location":"javascript/fp/composing-functions/#_1","text":"函数的组合就像拼 Lego 一样，你可以从现成的积木库中取出小方块和长条去组成程序中数据需要的管道样子。","text_tokens":["拼","的","取出","，","长条","函数","你","程序","积木","方块","可以","去","组合","从","数据","。","库中","需要","组成","小方","lego","像","小方块","就","管道","现成"," ","样子","一样","中","和"],"title":"函数组合","title_tokens":["组合","函数"]},{"location":"javascript/fp/composing-functions/#function-outputs","text":"在函数组合中，很容易发生这种情况，一个函数的输出作为下一个函数的输入传递，直到拿到最终的输出 let toUpper = msg => msg . toUpperCase () let welcome = msg => msg + 'GOOD NIGHT' let username = toUpper ( 'User' ) let welcomeUser = welcome ( username ) // 改进 let welcomeWord = msg => welcome ( toUpper ( msg )) let welcomeUser = welcomeWord ( 'User' ) 考虑一个通用的组合函数 let compose2 = ( fn2 , fn1 ) => origValue => fn2 ( fn1 ( origValue )); 注意函数的运行顺序从右向左，左边的函数在最外层最后执行。 这是大多数 FP 的库的约定俗成的规定。 需要注意的是，函数的组合需要注意类型安全，上面只是一个做作的例子。 我们可以把 2 * 2 的 Lego 放在 1 * 4 的 Lego 上面，也可以吧 1 * 4 的 Lego 放在 2 * 2 的 Lego 上面。","text_tokens":["night","左",",","这是","fn1","函数","2","大多","fp","compose2","向","执行","也","+",".","考虑","。",";","需要","类型","lego","welcome","let","fn2","约定","是","'","上面","/","顺序",">","做作","把","welcomeuser","最终","*","下","一个","注意","规定"," ","toupper","只是","中","touppercase","user","很","大多数","直到","，","安全","msg","作为","可以","1","拿到","改进","情况","通用","最","组合","库","从右","吧","传递","容易","origvalue","输入","username","左边","例子","=","我们","的","运行","这种","放在","发生","good","输出","约定俗成",")","4","外层","(","welcomeword","在","最后","多数"],"title":"function outputs","title_tokens":[" ","outputs","function"]},{"location":"javascript/fp/composing-functions/#_2","text":"我们如果可以轻易的组合两个函数，那么同样的，我们也可以组合多个函数 finalValue <-- func1 <-- func2 <-- ... <-- funcN <-- origValue let compose = (... fns ) => res => { let list = [... fns ] while ( list . length > 0 ) { res = list . pop ()( res ) } return res } 这里之所以使用 list copy 一份函数数组是因为，如果不拷贝的话，返回的组合函数只能使用一次。 pop 方法会修改原数组，使得 fns 长度减小 然后我们可以对之前的函数进行组合。并且可以使用系列第三篇文章提到的 partialRight 来预设要组合的函数。 当然，也可以使用 curry 和 reverse 来从左到右的依次组合。 这和数组的 reduce() 方法很像，因此我们还有别的实现 compose 的方式 let compose = (... fns ) => res => [... fns ]. reverse (). reduce (( result , fn ) => fn ( result ), res ) 这样实现的好处是更具备可读性，也是 FPer 喜欢的方式，他的性能也和使用 for 循环类似。 但是这样实现每次迭代函数只能接收一个参数。 当然，我们也可以使用一个惰性函数封装 let compose = (... fns ) => fns . reverse (). reduce (( fn1 , fn2 ) => (... args ) => fn2 ( fn1 (... args ))) 在每次 reduce 中，我们不再计算函数的返回值，而是将函数作为输入传递给下一次迭代的函数。这样我们可以尽可能多的传递参数，而不用受到局限。 在这样实现 compose 的技巧当中，我们运用了 惰性计算 的方式。 这样实现在每次调用组合函数时，将不会调用 reduce 循环 甚至，我们还可以通过递归的方式去调用 compose2 方法 let compose = (... fns ) => { // pull off the last two arguments let [ fn1 , fn2 , ... rest ] = fns . reverse () let composedFn = (... args ) => fn2 ( fn1 ( ... args ) ) if ( rest . length == 0 ) return composedFn ; return compose ( ... rest . reverse (), composedFn ) } 递归的好处在于我们能从概念上去理解 compose","text_tokens":[",","是因为","last","fn1","函数","func1","原","compose2","调用","也","这","curry","依次","pull",".","给","概念","从","使得","the","系列","返回值","args","。","每次",";","两个","if","...","使用","let","只能","<","要","还有","fn2","参数","喜欢","通过","来","当中","是","甚至","轻易","局限","fper","/","-",">","0","长度","第三篇","实现","如果","因此","尽可","第三","去","arguments","下","而是","可读","能","[","好处","不用","一个","别的","了","那么","}"," ","res","的话","fn","中","方式","和","所以","不","他","然后","迭代","运用","很","但是","具备","while","递归","，","拷贝","而","finalvalue","{","修改","compose","]","类似","for","可以","pop","作为","two","return","数组","文章","组合","composedfn","减小","传递","不再","理解","fns","这里","还","copy","origvalue","会","输入","受到","提到","接收","计算","一份","off","funcn","当然","惰性","多","三篇","在于","返回","同样","=","我们","的","性能","多个","这样","不会","从左到右","reduce","result","预设","尽可能","循环","上去","时","length","reverse","技巧","一次",")","可读性","方法","(","进行","将","更","对","可能","像","之前","在","并且","因为","func2","封装","rest","list","之所以","partialright"],"title":"常规函数组合","title_tokens":["组合","函数","常规"]},{"location":"javascript/fp/composing-functions/#pipe","text":"pipe 与 compose 相同，只不过 pipe 是从左往右 let pipe = reverseArgs ( compose ) 你可能会困惑，我们给出详细实现。 let pipe = (... fns ) => result => { let list = [... fns ] while ( list . length > 0 ) { // take the first function from the list // and execute it result = list . shift ()( result ); } return result ; }; 在某些需要 reverse 右边参数的场景，使用 pipe 会更有效率","text_tokens":["=","我们","的","有效率","是","shift","and","while","效率","，","不过","给出","你","往右","与","/","from","it","右边",">","0","只不过","result","reverseargs","场景","{","实现","compose","]","length","reverse","take","function",")","return",".","first","有效","详细","the","pipe","(","execute","。","[","更",";","困惑","可能","fns","会","相同","需要","...","使用","let","在","某些","}"," ","从左往右","list","参数"],"title":"pipe","title_tokens":["pipe"]},{"location":"javascript/fp/composing-functions/#abstraction","text":"抽象是一个重要的能力，他让我们的一些代码只需要写一遍。 思考 let saveComment = txt => { if ( txt != \"\" ) comments [ comments . length ] = txt ; } let trackEvent = evt => { if ( evt . name !== undefined ) { events [ evt . name ] = evt ; } } 我们可以很轻松的发现，上面代码的共性就是存储一个值 function storeData ( store , location , value ) { store [ location ] = value ; } function saveComment ( txt ) { if ( txt != \"\" ) { storeData ( comments , comments . length , txt ); } } function trackEvent ( evt ) { if ( evt . name !== undefined ) { storeData ( events , evt . name , evt ); } } 上面体现了抽象的一个原则，那就是不要重复。 但是注意抽象不要过头。 我们可以隐藏一些细节，就像黑盒子那样 但是被隐藏的细节应该是相对的，比如我们有一个相互依赖的功能 x 和 y 当我们专注 x 的时候 y 是无关紧要的 相反，我们专注 y 的时候 x 是无关紧要的。 我们抽象的目的不是隐藏细节，而是调整聚焦 。 请时刻记住，函数式编程的本质目的是写出更多可读性良好，可维护的代码。 为了分离两个概念，我们会插入一个语义级的分界，在大多数情况下，这个边界就是函数的名称。我们调用时，只在意名称和他的输出。 我们把 怎样 和 什么 分离开来 命令式编程风格说明 怎样 而声明式风格注重 什么 也就是输出，声明式关心结果，将如何实现交给别人。 声明式代码实现了从 how 到 what 的一个抽象 我们应该在声明式和命令式之间找到一个平衡。 声明式简单的将 做什么 和 如何做 分开","text_tokens":["能力","时候","存储",",","store","声明","原则","代码","函数","y","大多","共性","分界","调用","一遍","evt","也","how","写出","注重","这个",".","概念","从","name","不要","相对","隐藏","相反","。","专注","需要",";","两个","有","if","为了","结果","let","分开","调整","命令","边界","目的","编程","被","盒子","location","是","上面","命令式","让","无关紧要","相互",">","功能","把","名称","之间","实现","记住","只","交给","function","平衡","下","那样","而是","可读","[","可","一个","注意","过头","级","value","了","}"," ","做","x","trackevent","和","他","什么","一些","开来","很","但是","大多数","到","，","写","体现","本质","而","思考","风格","{","式","怎样","应该","说明","]","良好","可以","what","情况","\"","storedata","就是","如何","维护","简单","聚焦","依赖","会","找到","重要","savecomment","语义","多","那","黑盒","=","发现","我们","的","请","插入","当","分离","比如","别人","抽象","在意","comments","细节","值","时刻","相互依赖","不是","紧要","关心","时","!","length","输出",")","轻松","events","可读性","txt","(","黑盒子","将","更","像","undefined","在","就","重复","关紧","多数","无关"],"title":"Abstraction","title_tokens":["abstraction"]},{"location":"javascript/fp/composing-functions/#compose-vs-abstract","text":"compose 也是 声明式 的抽象 总而言之，compose 是一项非常有用的技能来将我们命令式的代码转换为可读性更好的声明式的代码。 在 FP 中 compose是极其重要的一种方式，它可能是函数间除了副作用传递数据的唯一方法。","text_tokens":["我们","的","是","声明","非常","抽象","而言","总而言之","，","命令式","更好","转换","代码","函数","副作用","传递数据","有用","fp","极其重要","式","间","也","compose","它","除了","可读性","方法","作用","可读","数据","为","将","。","传递","极其","可能","一项","在","重要","唯一","命令"," ","技能","一种","中","方式","来"],"title":"compose VS abstract","title_tokens":[" ","abstract","compose","vs"]},{"location":"javascript/fp/manage-function-inputs/","text":"一元函数 ¶ 给函数单一的参数 这样做可以避免参数穿透，举个栗子 [ '1' , '2' , '3' ]. map ( parseInt ) // [1, NaN, NaN] 我们可以写一个帮助函数来过滤多余的参数 let unary = fn => arg => fn ( arg ) [ '1' , '2' , '3' ]. map ( unary ( parseInt )) 甚至你还可以用的更花哨 来看下面这个函数 let identity = v => v ; 这个函数看起来就像人们口中的 shit 但是只有脑子 shit 的开发者 let words = \" Now is the time for all... \" . split ( /\\s|\\b/ ) words // [\"\",\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\",\"\"] words . filter ( identity ) // [\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\"] 还不过瘾？再看下面这个 let output = ( msg , formatFn = identity ) => { msg = formatFn ( msg ) console . log ( msg ) } let upper = txt => txt . toUpperCase () output ( \"Hello World\" , upper ) // HELLO WORLD output ( \"Hello World\" ) // Hello World 一元函数还有别的方式，比如某些不能传递值参数但能传递函数的方法 如 js 中的 Promise 的 then 方法 // error promise1 . then ( foo ). then ( p2 ). then ( bar ) // success promise1 . then ( foo ). then (() => p2 ). then ( bar ) 我们可以写一个值转换函数 let constant = v => () => v promise1 . then ( foo ). then ( constant ( v )). then ( bar ) 参数的解构和聚合 ¶ 某些时候，你会有两个不兼容的函数，在无法更改声明的情况下，如何一起使用他们呢？ let foo = ( x , y ) => console . log ( x + y ) let bar = fn => fn ([ 3 , 9 ]) bar ( foo ) // error let spreadArgs = fn => argsArr => fn (... argsArr ) bar ( spreadArgs ( foo )) // 12 考虑反向操作 let gatherArgs = fn => (... argsArr ) => fn ( argsArr ) let combineFirstTwo = ([ v1 , v2 ]) => v1 + v2 [ 1 , 2 , 3 , 4 , 5 ]. reduce ( gatherArgs ( combineFirstTwo )) // 15 偏函数 ¶ let partial = ( fn ,... presetArgs ) => (... laterArgs ) => fn (... presetArgs , ... laterArgs ) js 中的 bind 也可实现上面的功能，但是 FPer 不太喜欢，因为绑定 this 上下文和偏函数应用很多时候并不同时需要这两个功能 反转参数 let reverseArgs = fn => (... args ) => fn (... args . reverse ()) let cache = {}; let cacheResult = reverseArgs ( partial ( reverseArgs ( ajax ), function onResult ( obj ){ cache [ obj . id ] = obj }) ) // later: cacheResult ( \"http://some.api/person\" , { user : CURRENT_USER_ID }) 某些场景下，你只需要反转最右边的参数，因此可以编写一个基于反转参数的函数 function partialRight ( fn ,... presetArgs ) { return reverseArgs ( partial ( reverseArgs ( fn ), ... presetArgs . reverse ()) ) } let cacheResult = partialRight ( ajax , function onResult ( obj ){ cache [ obj . id ] = obj }) // later: cacheResult ( \"http://some.api/person\" , { user : CURRENT_USER_ID } ) 当然，可以用更直接的技巧 let partialRight = ( fn ,... presetArgs ) => (... laterArgs ) => fn ( ... laterArgs , ... presetArgs ) 柯里化 ¶ 柯里化和偏函数很像，只不过柯里化每次都只接收一个参数，然后将参数传递给下一次调用，考虑如下代码 let curry = ( fn , len = fn . length ) => ( nextCurry = prevParam => nextParam => { let params = [... prevParam , nextParam ] if ( params . length >= len ) { return fn (... params ) } else { return nextCurry ( params ) } })([]) 上面的 len 不是必须要传递的参数，但是当你要 curry 的函数是不定参数的函数，则需要手动传入一个期望长度 为什么使用柯里化和偏函数？ ¶ 提高可读性 拆分会扰乱可读性的其他参数信息 更宽松的柯里化 ¶ 事实上 js 内部实现的柯里化都是这样，上面我们实现的柯里化可以理解为「strict」 let looseCurry = ( fn , len = fn . length ) => ( nextCurried = prevArgs => (... nextArgs ) => { let args = [... prevArgs , ... nextArgs ] if ( args . length >= len ) { return fn (... args ) } else { return nextCurried ( args ) } } )([]) 取消柯里化 ¶ let unCurry = fn => (... args ) => { let ret = fn for ( let arg of args ) { ret = ret ( arg ) } return ret } 需要注意的是，当你没有向取消柯里化中传入应有数量的参数，返回的仍然是一个偏函数 高级实现 ¶ 上面的柯里化和偏函数都只能按照参数的顺序，开发者不可能每次都 reverse 参数 考虑下面的代码 它使得参数的位置没那么重要 let partialProps = ( fn , presetPropsObj ) => propsObj => fn ( Object . assign ({}, presetPropsObj , propsObj )) let curryProps = ( fn , len = 1 ) => ( nextCurried = nowObjProps => ( nextObjProps = {}) => { let props = Object . assign ({}, nowObjProps , nextObjProps ) if ( Object . keys ( props ). length >= len ){ return fn ( props ) } else { return nextCurried ( props ) } } )({}) 可是有的时候我们没法更改传入的函数的参数，这使得我们不能轻易的使用解构。 幸好 js 有一个内置方法叫做 toString() 可以让我们拿到函数的参数列表，再通过类似前面 spreadArgs 的转换，实现一个函数装饰器 Point Style ¶ 当我们遇见某些函数，他们接收参数，并将参数原封不动的 转发 给另一个函数，我们可以把它砍掉 let addThree = v => v + 3 [ 1 , 2 , 3 , 4 , 5 ]. map ( v => addThree ( v )) // 优化 [ 1 , 2 , 3 , 4 , 5 ]. map ( addThree ) 如果是之前 parseInt() 的那个例子，则可以通过 unary 方法实现这一编程风格 又比如你有两个完全相反的判断 let isShortEnough = msg => msg . length <= 5 let isLongEnough = msg => msg . length > 5 // let not = fn => (... args ) => ! fn (... args ) let isLongEnough = not ( isShortEnough )","text_tokens":["parseint","log","addthree","current","聚合","代码","函数","y","2","world","bar","使得","partialprops","考虑","偏","两个","let","promise","还有","脑子","喜欢","来","」","如下","甚至","直接","传递函数","「","nowobjprops","nextparam","实现","应有","如果","只","因此","一元","function","前面","可读","开发","gatherargs","遇见","优化","identity","touppercase","不动","然后","高级","style","多余","nan","开发者","success","console","reverseargs","风格","v","可以","没","api","位置","\"","参数信息","some","strict","重要","器","只有","一起","presetargs","当然",":","例子","传入","我们","\\","过滤","这样","reduce","time","过瘾","|","reverse","nextcurried","arg","(","无法","上下","更","其他","curryprops","onresult","因为","unary","看","必须","没法","bind","内部","只不过","也","+","则","js","这","curry","人们","else","看起","每次",";","islongenough","<","要","仍然","不能","另","参数","partial","'","point","上面","可是","让","/",">","nextargs","prevargs","下","内置","可","一个","花哨","为什么","某些","}","x","中","v1","什么","9","not","原封","很多","判断","formatfn","keys","for","1","return","最","cache","不太","还","b","接收","来看","拆分","起来","值","combinefirsttwo","12","一元函数","下文","5","!","技巧",")","cacheresult","就","列表","又","shit",",","扰乱","如","避免","操作","装饰","object","这个","数传","举个","split","args","反转","期望","...","使用","只能","绑定","宽松","通过","presetpropsobj","fper","应用","顺序","？","不定","把","id","上下文","那个","s","tostring","没有","能","[","别的","promise1","fn","nextcurry","他们","不","但是","写","map","转换","柯里化","转发","msg","]","类似","later","情况","nextobjprops","¶","ajax","理解","会","filter","props","返回","事实上","words","下面","不是","砍掉","constant","穿透","一次","argsarr","叫做","4","txt","spreadargs","可能","编写","像","之前","15","再","时候","幸好","声明","propsobj","并","upper","向","场景","调用","obj","数量","栗子",".","给","error","the","相反","。","需要","帮助","有","if","isshortenough","反向","编程","更改","这一","但","是","轻易","of","信息","功能","hello","长度","len","用","事实","解构","loosecurry","注意","3","按照","那么","做"," ","方式","和","单一","同时","基于","user","很","then","，","v2","不过","你","呢","{","assign","拿到","完全","如何","this","为","传递","params","is","person","取消","=","uncurry","的","兼容","当","比如","都","右边","output","p2","length","laterargs","提高","ret","all","它","原封不动","_","参数传递","可读性","方法","看起来","将","在","http","now","prevparam","foo","partialright","口中","手动"],"title":"Manage Function Inputs","title_tokens":[" ","inputs","manage","function"]},{"location":"javascript/fp/manage-function-inputs/#_1","text":"给函数单一的参数 这样做可以避免参数穿透，举个栗子 [ '1' , '2' , '3' ]. map ( parseInt ) // [1, NaN, NaN] 我们可以写一个帮助函数来过滤多余的参数 let unary = fn => arg => fn ( arg ) [ '1' , '2' , '3' ]. map ( unary ( parseInt )) 甚至你还可以用的更花哨 来看下面这个函数 let identity = v => v ; 这个函数看起来就像人们口中的 shit 但是只有脑子 shit 的开发者 let words = \" Now is the time for all... \" . split ( /\\s|\\b/ ) words // [\"\",\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\",\"\"] words . filter ( identity ) // [\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\"] 还不过瘾？再看下面这个 let output = ( msg , formatFn = identity ) => { msg = formatFn ( msg ) console . log ( msg ) } let upper = txt => txt . toUpperCase () output ( \"Hello World\" , upper ) // HELLO WORLD output ( \"Hello World\" ) // Hello World 一元函数还有别的方式，比如某些不能传递值参数但能传递函数的方法 如 js 中的 Promise 的 then 方法 // error promise1 . then ( foo ). then ( p2 ). then ( bar ) // success promise1 . then ( foo ). then (() => p2 ). then ( bar ) 我们可以写一个值转换函数 let constant = v => () => v promise1 . then ( foo ). then ( constant ( v )). then ( bar )","text_tokens":["再","parseint","shit","log",",","upper","如","避免","函数","2","world","bar","js","栗子","这个",".","给","人们","error","the","看起","举个","split",";","帮助","...","let","promise","还有","脑子","不能","参数","来","甚至","但","'","传递函数","/","？",">","hello","s","用","一元","能","[","开发","一个","别的","花哨","3","promise1","某些","做"," ","}","fn","identity","中","方式","不","touppercase","单一","但是","then","多余","，","map","写","转换","你","nan","开发者","success","formatfn","console","msg","{","]","v","for","可以","1","\"","传递","还","b","is","来看","filter","只有","=","我们","的","\\","words","下面","过滤","比如","这样","起来","值","time","过瘾","一元函数","output","p2","constant","穿透","|","all",")","arg","方法","(","txt","看起来","更","像","就","now","foo","口中","unary","看"],"title":"一元函数","title_tokens":["一元函数","函数","一元"]},{"location":"javascript/fp/manage-function-inputs/#_2","text":"某些时候，你会有两个不兼容的函数，在无法更改声明的情况下，如何一起使用他们呢？ let foo = ( x , y ) => console . log ( x + y ) let bar = fn => fn ([ 3 , 9 ]) bar ( foo ) // error let spreadArgs = fn => argsArr => fn (... argsArr ) bar ( spreadArgs ( foo )) // 12 考虑反向操作 let gatherArgs = fn => (... argsArr ) => fn ( argsArr ) let combineFirstTwo = ([ v1 , v2 ]) => v1 + v2 [ 1 , 2 , 3 , 4 , 5 ]. reduce ( gatherArgs ( combineFirstTwo )) // 15","text_tokens":["=","log","9","时候","的","兼容",",","声明","，","v2","函数","你","/","操作","？","y","2","呢",">","combinefirsttwo","reduce","12","console","bar","]","5","+","1","argsarr","情况",")",".","4","下","error","如何","无法","(","考虑","v1","[","spreadargs","两个","有","会","使用","...","在","let","gatherargs","3","反向","15","某些"," ","foo","一起","x","fn","他们","更改","不"],"title":"参数的解构和聚合","title_tokens":["的","解构","聚合","参数","和"]},{"location":"javascript/fp/manage-function-inputs/#_3","text":"let partial = ( fn ,... presetArgs ) => (... laterArgs ) => fn (... presetArgs , ... laterArgs ) js 中的 bind 也可实现上面的功能，但是 FPer 不太喜欢，因为绑定 this 上下文和偏函数应用很多时候并不同时需要这两个功能 反转参数 let reverseArgs = fn => (... args ) => fn (... args . reverse ()) let cache = {}; let cacheResult = reverseArgs ( partial ( reverseArgs ( ajax ), function onResult ( obj ){ cache [ obj . id ] = obj }) ) // later: cacheResult ( \"http://some.api/person\" , { user : CURRENT_USER_ID }) 某些场景下，你只需要反转最右边的参数，因此可以编写一个基于反转参数的函数 function partialRight ( fn ,... presetArgs ) { return reverseArgs ( partial ( reverseArgs ( fn ), ... presetArgs . reverse ()) ) } let cacheResult = partialRight ( ajax , function onResult ( obj ){ cache [ obj . id ] = obj }) // later: cacheResult ( \"http://some.api/person\" , { user : CURRENT_USER_ID } ) 当然，可以用更直接的技巧 let partialRight = ( fn ,... presetArgs ) => (... laterArgs ) => fn ( ... laterArgs , ... presetArgs )","text_tokens":["时候",",","bind","并","current","函数","场景","也","obj","js","这",".","偏","args","反转","需要","两个",";","...","let","绑定","参数","喜欢","partial","直接","上面","fper","应用","/",">","功能","id","上下文","实现","只","因此","function","用","下","[","可","一个","某些","}"," ","fn","中","和","不","同时","基于","user","但是","很多","，","你","reverseargs","{","]","可以","later","return","api","最","\"","cache","不太","this","some","ajax","presetargs","当然",":","person","=","的","右边","下文","reverse","laterargs","技巧",")","_","(","cacheresult","上下","更","编写","onresult","因为","http","partialright"],"title":"偏函数","title_tokens":["偏","函数"]},{"location":"javascript/fp/manage-function-inputs/#_4","text":"柯里化和偏函数很像，只不过柯里化每次都只接收一个参数，然后将参数传递给下一次调用，考虑如下代码 let curry = ( fn , len = fn . length ) => ( nextCurry = prevParam => nextParam => { let params = [... prevParam , nextParam ] if ( params . length >= len ) { return fn (... params ) } else { return nextCurry ( params ) } })([]) 上面的 len 不是必须要传递的参数，但是当你要 curry 的函数是不定参数的函数，则需要手动传入一个期望长度","text_tokens":["=","必须","然后","的","很","如下",",","是","但是","当","上面","手动","，","柯里化","不过","代码","函数","你","都","nextparam",">","不是","不定","只不过","长度","len","{","调用","]","只","length","则","一次","curry","return",")",".","给","else","数传","下","参数传递","(","偏","考虑","传递","将","每次","[","需要","一个","像","params","...","if","let","期望","接收","要","}"," ","prevparam","fn","nextcurry","参数","和","传入"],"title":"柯里化","title_tokens":["柯里化"]},{"location":"javascript/fp/manage-function-inputs/#_5","text":"提高可读性 拆分会扰乱可读性的其他参数信息","text_tokens":["信息","的","参数","参数信息","可读性","扰乱"," ","可读","拆分","提高","其他","会"],"title":"为什么使用柯里化和偏函数？","title_tokens":["？","使用","为什么","函数","偏","柯里化","和","什么"]},{"location":"javascript/fp/manage-function-inputs/#_6","text":"事实上 js 内部实现的柯里化都是这样，上面我们实现的柯里化可以理解为「strict」 let looseCurry = ( fn , len = fn . length ) => ( nextCurried = prevArgs => (... nextArgs ) => { let args = [... prevArgs , ... nextArgs ] if ( args . length >= len ) { return fn (... args ) } else { return nextCurried ( args ) } } )([])","text_tokens":["」","=","我们","的","事实上",",","是","上面","这样","，","柯里化","「","内部","都",">","nextargs","prevargs","len","{","实现","]","length","可以","js","return",")","nextcurried",".","else","事实","(","为","args","[","理解","strict","loosecurry","if","...","let","}"," ","fn"],"title":"更宽松的柯里化","title_tokens":["宽松","更","柯里化","的"]},{"location":"javascript/fp/manage-function-inputs/#_7","text":"let unCurry = fn => (... args ) => { let ret = fn for ( let arg of args ) { ret = ret ( arg ) } return ret } 需要注意的是，当你没有向取消柯里化中传入应有数量的参数，返回的仍然是一个偏函数","text_tokens":["=","uncurry","的","是","当","，","of","柯里化","函数","你",">","向","{","应有","for","数量","ret","return",")","arg","没有","(","偏","args","需要","注意","一个","...","let","仍然","}"," ","fn","参数","中","返回","取消","传入"],"title":"取消柯里化","title_tokens":["柯里化","取消"]},{"location":"javascript/fp/manage-function-inputs/#_8","text":"上面的柯里化和偏函数都只能按照参数的顺序，开发者不可能每次都 reverse 参数 考虑下面的代码 它使得参数的位置没那么重要 let partialProps = ( fn , presetPropsObj ) => propsObj => fn ( Object . assign ({}, presetPropsObj , propsObj )) let curryProps = ( fn , len = 1 ) => ( nextCurried = nowObjProps => ( nextObjProps = {}) => { let props = Object . assign ({}, nowObjProps , nextObjProps ) if ( Object . keys ( props ). length >= len ){ return fn ( props ) } else { return nextCurried ( props ) } } )({}) 可是有的时候我们没法更改传入的函数的参数，这使得我们不能轻易的使用解构。 幸好 js 有一个内置方法叫做 toString() 可以让我们拿到函数的参数列表，再通过类似前面 spreadArgs 的转换，实现一个函数装饰器","text_tokens":["再","时候","幸好","没法",",","propsobj","代码","函数","装饰","js","这","object",".","else","使得","partialprops","偏","考虑","。","每次","有","if","使用","let","只能","不能","参数","通过","更改","轻易","上面","presetpropsobj","可是","让","顺序","nowobjprops",">","len","实现","前面","tostring","内置","解构","开发","一个","按照","那么","}"," ","fn","和","不","，","柯里化","转换","开发者","keys","{","assign","类似","1","可以","拿到","return","没","nextobjprops","位置","重要","器","props","传入","=","我们","的","下面","都","length","reverse","它",")","nextcurried","叫做","方法","(","spreadargs","可能","curryprops","列表"],"title":"高级实现","title_tokens":["高级","实现"]},{"location":"javascript/fp/manage-function-inputs/#point-style","text":"当我们遇见某些函数，他们接收参数，并将参数原封不动的 转发 给另一个函数，我们可以把它砍掉 let addThree = v => v + 3 [ 1 , 2 , 3 , 4 , 5 ]. map ( v => addThree ( v )) // 优化 [ 1 , 2 , 3 , 4 , 5 ]. map ( addThree ) 如果是之前 parseInt() 的那个例子，则可以通过 unary 方法实现这一编程风格 又比如你有两个完全相反的判断 let isShortEnough = msg => msg . length <= 5 let isLongEnough = msg => msg . length > 5 // let not = fn => (... args ) => ! fn (... args ) let isLongEnough = not ( isShortEnough )","text_tokens":["不动","=","parseint","我们","的","addthree","not",",","是","当","原封","比如","并","，","map","判断","函数","转发","/","你","!","2",">","砍掉","把","风格","msg","那个","实现","5","v","]","+","可以","1","如果","则","通过","又","length","它",")","原封不动",".","给","4","完全","方法","相反","(","args","将","[","两个","有","一个","之前","...","let","unary","islongenough","接收","isshortenough","<","3","遇见","某些"," ","优化","编程","fn","另","参数","他们","例子","这一"],"title":"Point Style","title_tokens":["point","style"," "]},{"location":"javascript/fp/nature-function/","text":"学习函数式编程，我们需要清晰地意识到 函数的定义不是通过 function 关键字声明一个函数 函数式编程本质上是通过使用 函数 让代码变得 函数化 那么，函数的 本质 到底是什么？ 什么是函数 ¶ 常规定义 ¶ 一段可以执行一次或者多次的代码片段，这些片段使用 function 关键字声明 数学角度 ¶ 一个函数包含一个准确的 输入 和一个准确的 输出 输入输出可以有 一个或多个 值，但是不同的输入，输出不同 我们也可以把「函数」叫做「映射」 我们把含有 n 个输入的函数叫做「n 元函数」 函数式编程和「面向过程」编程的区别 ¶ 函数式编程中的函数有 稳定 的输入输出 面向过程编程则不一定，可能 没有 输出 js 中的函数的能力 ¶ 解构赋值 ¶ 解构赋值可以让我们取出并且命名参数对象中的一部分 let fn = ({ x , y } = {}) => { // 这种写法可以不传参数 // 如果不赋一个空对象则至少需要传递一个参数 } 当返回值有多个的时候，使用解构可以让数据流更加明显和清晰 一个函数最好只有一个 return ，当有多个 if() {} else {} 的时候，可以用临时变量存储返回值，最后返回它 开发人员更喜欢显式代码，包括显式的输入输出，不喜欢隐含的修改外部变量，因为这会让可读性变差和造成副作用 闭包 ¶ 应用到偏函数和 curry 上 匿名函数 ¶ 尽可能的给匿名函数命名，如果你需要跟踪 堆栈调用情况 调试 bug 的话 如果函数入参是匿名函数，调用 fn.name 会返回一个空字符串 匿名函数命名可以用来 自引用 递归 在不知道如何给匿名函数命名的时候，原因只可能是因为你不清楚这个函数的用途或是这个函数过于抽象 可以在函数名前面加上 todo 确保未来会更新函数命名 为函数命名是一个很值得的交易，when easy coding, pain read 惰性表达式 ¶ 后面的文章会说到。","text_tokens":["未来","能力","时候","存储",",","是因为","后面","声明","一部分","coding","空","代码","函数","n","映射","一定","y","最好","闭包","跟踪","至少","清楚","关键","参是","变得","个","发人","入","调用","执行","也","则","达式","js","curry","这个",".","给","else","name","数据","作用","返回值","偏","包括","。","角度","需要","元","有","定义","if","使用","数学","let","编程","read","通过","参数","喜欢","表达","一段","」","开发人员","字符","是","造成","应用","让","/","「","？","隐含",">","把","自","更新","稳定","如果","只","尽可","包含","不赋","function","学习","输入输出","用","前面","一部","地","对象","没有","可读","赋值","常规","解构","变量","开发","当有","一个","引用","那么","含有","}"," ","写法","的话","命名","fn","x","todo","中","和","不","什么","取出","表达式","确保","很","部分","但是","显式","到","外部","，","用来","递归","关键字","意识","你","副作用","或是","过于","值得","本质","人员","{","式","修改","可以","不同","变差","准确","return","情况","调试","文章","这些","如何","为","¶","传递","更加","会","输入","多次","数据流","清晰","惰性","只有","区别","返回","=","堆栈","我们","的","面向","名","当","临时","多个","或者","上","明显","抽象","bug","值","匿名","这种","不是","知道","尽可能","这会","一次","到底","片段","输出","或",")","叫做","它","化","字符串","when","可读性","不传","(","easy","更","过程","加上","可能","原因","在","并且","因为","交易","最后","pain","说","用途"],"title":"Nature Function","title_tokens":[" ","nature","function"]},{"location":"javascript/fp/nature-function/#_1","text":"","text_tokens":[],"title":"什么是函数","title_tokens":["是","函数","什么"]},{"location":"javascript/fp/nature-function/#_2","text":"一段可以执行一次或者多次的代码片段，这些片段使用 function 关键字声明","text_tokens":["片段","使用","多次","一段","代码","的","关键","这些","声明"," ","执行","或者","，","可以","一次","关键字","function"],"title":"常规定义","title_tokens":["定义","常规"]},{"location":"javascript/fp/nature-function/#_3","text":"一个函数包含一个准确的 输入 和一个准确的 输出 输入输出可以有 一个或多个 值，但是不同的输入，输出不同 我们也可以把「函数」叫做「映射」 我们把含有 n 个输入的函数叫做「n 元函数」","text_tokens":["」","我们","的","但是","多个","，","值","函数","映射","「","n","把","个","也","可以","不同","输出","包含","输入输出","或","准确","叫做","元","有","一个","输入","含有"," ","和"],"title":"数学角度","title_tokens":["角度","数学"]},{"location":"javascript/fp/nature-function/#_4","text":"函数式编程中的函数有 稳定 的输入输出 面向过程编程则不一定，可能 没有 输出","text_tokens":["的","面向","，","函数","一定","式","稳定","则","输出","输入输出","没有","过程","可能","有","输入"," ","编程","中","不"],"title":"函数式编程和「面向过程」编程的区别","title_tokens":["」","和","的","面向","式","编程","区别","过程","函数","「"]},{"location":"javascript/fp/nature-function/#js","text":"","text_tokens":[],"title":"js 中的函数的能力","title_tokens":["能力","的"," ","中","js","函数"]},{"location":"javascript/fp/nature-function/#_5","text":"解构赋值可以让我们取出并且命名参数对象中的一部分 let fn = ({ x , y } = {}) => { // 这种写法可以不传参数 // 如果不赋一个空对象则至少需要传递一个参数 } 当返回值有多个的时候，使用解构可以让数据流更加明显和清晰 一个函数最好只有一个 return ，当有多个 if() {} else {} 的时候，可以用临时变量存储返回值，最后返回它 开发人员更喜欢显式代码，包括显式的输入输出，不喜欢隐含的修改外部变量，因为这会让可读性变差和造成副作用","text_tokens":["时候","存储",",","一部分","空","代码","函数","最好","y","至少","发人","则","else","数据","作用","返回值","包括","需要","有","if","使用","let","参数","喜欢","开发人员","造成","让","/","隐含",">","如果","不赋","用","输入输出","一部","对象","可读","赋值","解构","变量","开发","当有","一个","}"," ","写法","命名","fn","x","中","和","不","取出","部分","显式","外部","，","副作用","人员","{","修改","可以","变差","return","传递","更加","输入","数据流","清晰","只有","返回","=","我们","的","当","临时","多个","明显","这种","这会","输出","它",")","可读性","不传","(","更","并且","因为","最后"],"title":"解构赋值","title_tokens":["赋值","解构"]},{"location":"javascript/fp/nature-function/#_6","text":"应用到偏函数和 curry 上","text_tokens":["函数"," ","到","偏","上","应用","和","curry"],"title":"闭包","title_tokens":["闭包"]},{"location":"javascript/fp/nature-function/#_7","text":"尽可能的给匿名函数命名，如果你需要跟踪 堆栈调用情况 调试 bug 的话 如果函数入参是匿名函数，调用 fn.name 会返回一个空字符串 匿名函数命名可以用来 自引用 递归 在不知道如何给匿名函数命名的时候，原因只可能是因为你不清楚这个函数的用途或是这个函数过于抽象 可以在函数名前面加上 todo 确保未来会更新函数命名 为函数命名是一个很值得的交易，when easy coding, pain read","text_tokens":["未来","堆栈","的","时候","确保","字符","很","是因为","名","是",",","coding","抽象","空","，","用来","递归","bug","函数","跟踪","你","匿名","或是","过于","值得","知道","清楚","参是","尽可能","入","调用","自","更新","如果","只","可以","尽可","情况","这个","调试",".","给","前面","字符串","name","when","如何","为","easy","加上","需要","可能","会","一个","原因","在","引用","因为","交易","pain"," ","的话","命名","read","fn","todo","用途","返回","不"],"title":"匿名函数","title_tokens":["函数","匿名"]},{"location":"javascript/fp/nature-function/#_8","text":"后面的文章会说到。","text_tokens":["文章","的","后面","到","说","。","会"],"title":"惰性表达式","title_tokens":["表达式","达式","惰性","表达"]},{"location":"javascript/fp/side-effect/","text":"一个没有副作用的代码是不存在的。但是可以尽可能的限制。 举个栗子 let y ; let foo = x => { y = x * 2 ; } foo ( 3 ); // 改进 let foo = x => x * 2 ; let y = foo ( 3 ); 很明显，前者是 因果 不相关的，我们需要读 foo 的内部代码，才能知道 y 被修改了。因此可读性很差，这就是副作用。 函数引用了一个自身之外的「自由变量」时，副作用就产生了。 需要注意的是，并不是所有的「自由变量」都是负面的，但是应当要关注这些自由变量。 Side Effects ¶ 副作用意味着代码的读者需要「人肉编译」才能跟踪某个变量的变化。 副作用的产生可能是因为一个返回值中的引用，例如引用的 state 发生了 Mutation「突变」。 因此，所有影响到函数输出的因素都应该作为函数的输入。 固定状态 ¶ 一个约定俗称的规矩是从不覆盖函数的实现，因此函数作为自由变量引用，可以当做引用了一个常量。 考虑两点，当有一个函数时 给定输入，输出是不变的吗？ 引入的自由变量每次都是不变的吗？程序中有其他地方可能会修改这个自由变量吗？ 偶然性 ¶ 随机函数也会产生副作用。 大部分语言中的随机都是采用伪随机算法，有些语言提供了起始值，因此给定相同的起始值生成的随机序列都是一致的。 但是 js 没有提供这项功能，因此 js 中偶然性也是副作用的一种 IO Effects ¶ 最常见的副作用就是 IO 输入输出 比如 DOM，当修改 DOM 之后，事实上就已经产生了副作用 再比如两个依赖自由变量的 ajax，当异步请求的时候，如果回调执行的 顺序 不一致，可能会产生 bug，但是我们难以捕捉他们。 因为很多时候，这些 bug 只会带来 ui 渲染上的不一致，或者只是简单的状态改变。 制裁副作用 ¶ 如果不得不通过副作用修改状态，制裁方式之一是 幂等性 幂等性 ¶ 首先给出一个在「数学」上和「编程」上都不属于幂等的例子 let updateCounter = obj => { if ( obj . count < 10 ) { obj . count ++ ; return true ; } return false ; }; 数学上的幂等性 ¶ 从数学角度来看，幂等性意味着在第一次调用后输出不会改变的操作。 更清晰的例子。 f(x) = f(f(x)) = f(f(f(x))) 在 js 内置的 Math 库中，下面这些例子显然是幂等性的。 Math.min(..) Math.max(..) Math.round(..) Math.floor(..) Math.ceil(..) 我们也可以自己定义一些幂等性的运算 let toPower0 = x => Math . pow ( x , 0 ); let snapUp3 = x => x - ( x % 3 ) + ( x % 3 > 0 && 3 ); toPower0 ( 3 ) == toPower0 ( toPower0 ( 3 )); // true snapUp3 ( 3.14 ) == snapUp3 ( snapUp3 ( 3.14 )); // true 数学角度的幂等性并不仅仅局限于数学运算，js 中基本类型强制转换也是幂等的 let x = 42 , y = 'hello' ; String ( x ) === String ( String ( x )); // true Boolean ( y ) === Boolean ( Boolean ( y )); // true 或是 let upper = v => v . toUpperCase (); let lower = v => v . toLowerCase (); let str = 'Hello World' ; upper ( str ) == upper ( upper ( str )); // true lower ( str ) == lower ( lower ( str ) ); // true 总而言之，幂等性就是满足下列公式的数学表达式 f(x) = f(f(x)) 程序中的幂等性 ¶ 程序中的幂等性没有那么正式，换句话说，当第一次调用 f(x) 与第二次调用的返回值没有区别，从程序的角度，我们认为是幂等的。 就像在 Http 的 RESTapi 中，PUT 被定义为更新服务器资源，当发送多个带有相同参数的 PUT 时，服务器资源都具备相同的结果状态。 // idempotent:幂等 obj . count = 2 ; a [ a . length - 1 ] = 42 ; person . name = upper ( person . name ); // non-idempotent:非幂等 obj . count ++ ; a [ a . length ] = 42 ; person . lastUpdated = Date . now (); 因此，幂等性的定义是，在第一次调用之后，后续怎样的重复调用，程序状态都不会再改变。非幂等性在每次调用都会更改程序状态。 那么在 DOM 更新中如何表现呢？ let hist = document . getElementById ( 'orderHistory' ); // idempotent: hist . innerHTML = order . historyText ; // non-idempotent: let update = document . createTextNode ( order . latestUpdate ); hist . appendChild ( update ); // 隐式的，当前状态是下一状态的一部分 我们并不能总是幂等的定义我们的操作，但这有利于减少副作用的影响。 Pure Bliss ¶ 一个没有副作用的函数称之为 Pure Function ，也就是「纯」函数 纯函数在编程角度来说是幂等的，因为没有任何副作用。 let add = ( a , b ) => a + b 可以发现所有的输入输出都是直接的，没有引用任何自由变量，多次调用 add 函数与只调用一次没有任何区别。所以 add 是一个幂等纯函数。 但是在数学意义中，不是所有纯函数都是幂等的，因为的返回值可能不能作为他们的输入。 let calculateAverage = nums => { let sum = 0 ; for ( let num of nums ) { sum += num ; } return sum / nums . length ; } calculateAverage ([ 1 , 2 , 4 , 7 , 11 , 16 , 22 ]); // 9 在这个例子中，返回值并非一个数组，因此不可能「recall」 calculateAverage(calculateAverage(nums)) 纯函数也可以引用自由变量和其他函数，前提是自由变量没有副作用。 const PI = 3.141592 ; let circleArea = radius => PI * radius * radius ; let cylinderVolume = ( radius , height ) => height * circleArea ( radius ); 另一个纯函数引用自由变量的例子就是 闭包 虽然 circleArea 是一个函数对象，我们可以给他添加一个可能「突变」的属性，但是不影响 circleArea 调用。因此只要不重新分配函数，就没有副作用。 验证纯函数的另一种方式是，相同的输入永远产生相同的输出。 如果一个函数给相同的输入产生不同的输出，那么就不是一个纯函数。 在 js 中，写带副作用的代码实在是太容易了。 Purely Relative ¶ let rememberNumbers = nums => fn => fn ( nums ); let list = [ 1 , 2 , 3 , 4 , 5 ]; let simpleList = rememberNumbers ( list ); simpleList 像一个纯函数，但实际上并不是， let median = nums => ( nums [ 0 ] + nums [ nums . length - 1 ]) / 2 ; simpleList ( median ); // 3 list . push ( 6 ); simpleList ( median ); // 3.5 显而易见，当我们修改输入引用的自由变量，返回值就发生了变化。 可以通过复制数组使得 simpleList 变成纯函数。 let rememberNumbers = nums => { // make a copy of the array nums = [... nums ]; return fn => fn ( nums ); } 但是这可能会导致一个更隐蔽的副作用潜伏。 let list = [ 1 , 2 , 3 , 4 , 5 ]; // make `list[0]` be a getter with a side effect Object . defineProperty ( list , 0 , { get : () => { console . log ( \"[0] was accessed!\" ); return 1 ; } } ); let simpleList = rememberNumbers ( list ); // [0] was accessed! 这个副作用看起来无法避免，但是我们可以将它从函数内部转移到调用函数的地方。 let rememberNumbers = (... nums ) => fn => fn ( nums ) let simpleList = rememberNumbers (... list ); // [0] was accessed! 这样做的好处是，rememberNumbers 是纯函数，造成副作用的原因在于 ... 纯函数 + 不纯函数 = 不纯函数 ¶ // yes, a silly contrived example :) let firstValue = nums => nums [ 0 ]; let lastValue = nums => firstValue ( nums . reverse ()); simpleList ( lastValue ); // 5 console . log ( list ); // [1,2,3,4,5] -- OK! simpleList ( lastValue ); // 1 reverse() 方法其实修改了原本的数组，只不过修改的是内部引用的数组。 怎样改进呢？ let rememberNumbers = (... nums ) => fn => fn ([... nums ]); 可以通过传递一个数组拷贝来避免接受该数组的函数在调用时改变原数组。 但是仍然无法保证传递一个不纯的函数。因此，我们只能尽量的让函数 pure，为了可读性。 Referential transparency ¶ 判断一个函数是否纯净的第三种方式，是 Referential transparency 「引用透明性」。如果将值替换函数调用的那一行，行为上没有任何变化，那么该函数就是纯函数。 也就是说，在一个程序当中，我们用一个 val 代替了一个函数调用，在执行上我们看不出任何区别。 如果一个函数存在副作用，但是在程序的任何地方都没有被观察到或者被依赖，那么他还具备「引用透明性」吗？ let sum ; let calculateAverage = nums => { sum = 0 ; for ( let num of nums ) { sum += num ; } return sum / nums . length ; } let numbers = [ 1 , 2 , 4 , 7 , 11 , 16 , 22 ]; let avg = calculateAverage ( numbers ); 不得不说它和纯函数几乎没有区别，但是如何看待他取决于你自己 Performance Effects ¶ 观察这个函数 let cache = []; let specialNumber = n => { // if we've already calculated this special number, // skip the work and just return it from the cache if ( cache [ n ] !== undefined ) { return cache [ n ]; } var x = 1 , y = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { x += i % 2 ; y += i % 3 ; } cache [ n ] = ( x * y ) / ( n + 1 ); return cache [ n ]; } specialNumber ( 6 ); // 4 specialNumber ( 42 ); // 22 specialNumber ( 1 E6 ); // 500001 specialNumber ( 987654321 ); // 493827162 我们通过一个缓存来优化多次调用这个函数的性能，但是这看起来很蠢，你可能认为他是纯函数，但是我不这么认为。 let specialNumber = ( function memoization (){ let cache = []; return function specialNumber ( n ){ // if we've already calculated this special number, // skip the work and just return it from the cache if ( cache [ n ] !== undefined ) { return cache [ n ]; } let x = 1 , y = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { x += i % 2 ; y += i % 3 ; } cache [ n ] = ( x * y ) / ( n + 1 ); return cache [ n ]; }; })(); 我们通过 IIFE 来 确保 函数的其他部分不能访问到 cache，而不仅仅是 不允许 在这里至关重要的一点，就是我们能确保，而不仅仅是心灵约定。 Mentally Transparent ¶ 虽然有时将常数和函数调用替换对函数的执行没有影响，但是我们不应该这么做。 不仅仅是因为数据可能是变化的，还为了更好地可读性。 读者会不断地心算一个永远不会变的结果，但是纯函数能够减少这样的花销。 函数提纯 ¶ 可以将副作用从函数内部转移到调用函数的地方，这看起来更明显。 举个栗子 let addMaxNum = arr => { let maxNum = Math . max (... arr ); arr . push ( maxNum + 1 ); } let nums = [ 4 , 2 , 7 , 3 ]; addMaxNum ( nums ); // [4,2,7,3,8] //改进 let addMaxNum = arr => Math . max (... arr ) + 1 ; let nums = [ 4 , 2 , 7 , 3 ]; nums . push ( addMaxNum ( nums )); // [4,2,7,3,8] 我们可以将 addMaxNum 折叠起来了，我们不需要再去观察 addMaxNum 的内部实现。 另外一种方式是采用 immutable 数据结构来实现，我会在下一篇文章说明 我们还可以从这几个角度来分析。 自由变量 ¶ 如果一个函数是不纯的，并且引用了外部的自由变量，我们可以使用作用域来封装。 let users = {}; let fetchUserData = userId => { ajax ( `http://some.api/user/ ${ userId } ` , function onUserData ( user ){ users [ userId ] = user ; }); } // 改进 function safer_fetchUserData ( userId , users ) { // simple, naive ES6+ shallow object copy, could also // be done w/ various libs or frameworks users = Object . assign ( {}, users ); fetchUserData ( userId ); // return the copied state return users ; // *********************** // original untouched impure function: function fetchUserData ( userId ) { ajax ( `http://some.api/user/ ${ userId } ` , function onUserData ( user ){ users [ userId ] = user ; } ); } } 函数的纯度与否其实是由外部决定的，内部也可以适当的采用一些不纯的技术，比如为了性能使用 cache 缓存结果。 但是我们的目标是尽可能的减少副作用。 掩盖 ¶ 有些时候，不纯的函数来自于第三方库，你无法直接将自由变量封装在函数的作用域内 let nums = []; let smallCount = 0 ; let largeCount = 0 ; function generateMoreRandoms ( count ) { for ( let i = 0 ; i < count ; i ++ ) { let num = Math . random (); if ( num >= 0.5 ) { largeCount ++ ; } else { smallCount ++ ; } nums . push ( num ); } } 我们可以通过 brute-force 算法执行以下步骤来改进： 保存未被影响的当前状态 设置初始输入状态 运行不纯的函数 捕获副作用 恢复原状态 返回副作用状态 function safer_generateMoreRandoms ( count , initial ) { // (1) Save original state let orig = { nums , smallCount , largeCount }; // (2) Set up initial pre-side effects state nums = [... initial . nums ]; smallCount = initial . smallCount ; largeCount = initial . largeCount ; // (3) Beware impurity! generateMoreRandoms ( count ); // (4) Capture side effect state let sides = { nums , smallCount , largeCount }; // (5) Restore original state nums = orig . nums ; smallCount = orig . smallCount ; largeCount = orig . largeCount ; // (6) Expose side effect state directly as output return sides ; } 需要注意的是 掩盖 手段只有在处理同步代码时才有效。 规避 ¶ 当我们要处理的副作用是一个 突变 的输入导致的，「数组」或是「对象」我们可以这样做 function handleInactiveUsers ( userList , dateCutoff ) { for ( let i = 0 ; i < userList . length ; i ++ ) { if ( userList [ i ]. lastLogin == null ) { // remove the user from the list userList . splice ( i , 1 ); i -- ; } else if ( userList [ i ]. lastLogin < dateCutoff ) { userList [ i ]. inactive = true ; } } } 先做一个深拷贝 function safer_handleInactiveUsers ( userList , dateCutoff ) { // make a copy of both the list and its user objects let copiedUserList = userList . map ( function mapper ( user ){ // copy a `user` object return Object . assign ( {}, user ); }); // call the original function with the copy handleInactiveUsers ( copiedUserList , dateCutoff ); // expose the mutated list as a direct output return copiedUserList ; } this Revisited ¶ 有的时候 this 作为一个隐式的输入也可能导致副作用 let ids = { prefix : \"_\" , generate () { return this . prefix + Math . random (); } }; 我们可以创建一个包装函数来传入可读的上下文 let safer_generate = context => ids . generate . call ( context ); safer_generate ({ prefix : \"foo\" }); // \"foo0.8988802158307285\" 本质上，我们并没有消除副作用的影响，而是尽可能的做到在运行时能将 bug 定位在仍然使用副作用的代码上。","text_tokens":["隐式","取决于","log","替换","认为","一部分","orig","nums","代码","idempotent","函数","尽量","y","2","world","add","direct","yes","date","recall","达式","copieduserlist","另外","处理","11","largecount","使得","不纯","我","作用","永远","考虑","角度","两个","为了","various","let","时能","复制","was","&&","手段","是从","lastvalue","约定","已经","来","负面","false","」","变","第二次","直接","几乎","e6","先","局限","访问","更好","「","special","shallow","很差","实现","如果","mapper","只","因此","数据结构","第三","输入输出","function","7","一部","总是","可读","expose","变量","地方","不断","maxnum","写带","一篇","引用","请求","val","优化","非幂","math","update","有些","touppercase","foo0.8988802158307285","突变","回调","表达式","boolean","外部","capture","42","random","as","users","console","修改","重新分配","透明","v","正式","内","可以","generatemorerandoms","sides","f","改进","仅仅","10","api","文章","tolowercase","\"","来自","库","就是","pi","put","getter","依赖","max","some","copy","libs","or","重要","带来","不出","string","务器","那","只有","hist","服务器资源",":","潜伏","例子","skip","传入","impure","我们","lastupdated","或者","这样","++","程序","显然","影响","编译","时","表现","i","有时","reverse","save","$","relative","行为","set","满足","(","显而易见","无法","null","上下","其他","更","对","ok","做到","生成","因为","重复","dom","隐蔽","决定","语言","起始值","work","updatecounter","也就是说","复原","总而言之","发送","这项","与","内部","prefix","只不过","规矩","也","执行","0.5","+","第三方","第二","safer","js","这","制裁","be","取决","任何","我会","else","看起","snapup3","返回值","强制","每次",";","untouched","<","要","仍然","不能","包装","另","参数","结构","表达","被","num","const","3.5","get","'","造成","虽然","handleinactiveusers","恢复原","让","/","from","代替","-",">","just","来说","push","只会","silly","side","尽可","generate","实在","不得","下","对象","latestupdate","内置","消除","限于","异步","库中","当有","第三种","一个","6","适当","深","了","不得不","}","花销","只是","有利于","x","之为","中","所以","一致","9","topower0","orderhistory","转移","很多","判断","拷贝","副作用","或是","could","设置","作用域","意味","吗","for","1","smallcount","defineproperty","beware","return","appendchild","radius","最","mutation","initial","关注","cache","因素","捕获","容易","至关重要","context","还","bliss","相同","多次","naive","inactive","b","某个","来看","心灵","清晰","在于","force","算法","3.141592","发现","自身","493827162","保存","pure","明显","不会","起来","cylindervolume","心算","能够","w","函数调用","下文","5","!","换句",")","俗称","性","纯","由","两点","innerhtml","属于","不变","大部","几个","undefined","frameworks","就","封装","提纯","技术","number",",","是因为","于","specialnumber","避免","跟踪","操作","闭包","it","太","lastlogin","给定","才能","等","重新","object","这个","添加","观察","datecutoff","从","第一次","name","restapi","缓存","举个","换句话","类型","3.14","二次","状态","str","数学","采用","存在","伪","...","只能","使用","array","count","calculated","通过","读者","看不出","并非","当中","lower","固定","时才","remembernumbers","将值","给出","median","顺序","？","fetchuserdata","三方","上下文","objects","意义","contrived","序列","remove","去","利于","不仅","前者","987654321","firstvalue","而是","限制","没有","sum","call","能","[","ceil","允许","done","公式","up","circlearea","分配","之一","fn","一种","他们","immutable","directly","实际","不","他","看待","ui","部分","但是","自由","幂","具备","restore","a","map","转换","we","：","变成","memoization","而","transparent","本质","恢复","怎样","应该","说明","]","分析","作为","its","透明性","不同","22","数组","随机","捕捉","有效","引入","¶","ajax","already","会","userlist","输入","一点","常数","意味着","换句话说","返回","make","historytext","purely","事实上","simplelist","下面","and","而言","上","偶然性","改变","接受","onuserdata","知道","不是","当做","初始","发生","当前","调用函数","其实","至关","impurity","一次","明性","4","前提","document","纯净","simple","可能","像","original","原因","一行","order","称之为","以下","说","这么","再","不仅仅","var","时候","有利","后","copied","并","运算","upper","之后","纯度","n","原","肉","读","iife","调用","16","accessed","掩盖","obj","referential","栗子","createtextnode","mutated","实际上",".","floor","给","also","mentally","原本","the","数据","getelementbyid","。","显而","avg","需要","userid","结果","if","中有","定义","有","创建","calculateaverage","编程","更改","定位","ids","pre","首先","是","但","performance","渲染","numbers","of","未","round","revisited","功能","0","hello","服务器","基本","带有","更新","局限于","effects","用","偶然","*","with","地","事实","常见","好处","导致","注意","规避","很蠢","non","3","只要","那么","产生"," ","做","下列","一","属性","应当","方式","和","transparency","一些","确保","很","相关","user","到","，","不过","资源","你","es6","与否","是否","人","变化","呢","{","true","assign","验证","..","example","后续","之外","提供","这些","`","就是说","覆盖","如何","this","为","height","io","因果","简单","传递","折叠","这里","起始","目标","arr","区别","effect","服务","person","同步","=","500001","的","splice","所有","例如","运行","当","性能","比如","多个","bug","减少","addmaxnum","都","尽可能","大部分","output","length","both","输出","它","易见","常量","8","难以","_","可读性","方法","自己","三种","state","看起来","将","min","%","保证","在","并且","http","now","步骤","foo","第一","list","该","brute","ve","pow"],"title":"Side Effects","title_tokens":[" ","effects","side"]},{"location":"javascript/fp/side-effect/#side-effects","text":"副作用意味着代码的读者需要「人肉编译」才能跟踪某个变量的变化。 副作用的产生可能是因为一个返回值中的引用，例如引用的 state 发生了 Mutation「突变」。 因此，所有影响到函数输出的因素都应该作为函数的输入。","text_tokens":["突变","」","的","所有","例如","是因为","到","，","代码","跟踪","函数","「","副作用","都","人","变化","肉","才能","发生","影响","意味","编译","应该","作为","因此","输出","mutation","作用","返回值","因素","。","变量","state","需要","可能","一个","输入","引用","因为","某个","了","意味着","产生"," ","中","返回","读者"],"title":"Side Effects","title_tokens":[" ","effects","side"]},{"location":"javascript/fp/side-effect/#_1","text":"一个约定俗称的规矩是从不覆盖函数的实现，因此函数作为自由变量引用，可以当做引用了一个常量。 考虑两点，当有一个函数时 给定输入，输出是不变的吗？ 引入的自由变量每次都是不变的吗？程序中有其他地方可能会修改这个自由变量吗？","text_tokens":["的","是","自由","，","函数","？","都","当做","程序","给定","规矩","时","修改","实现","作为","因此","可以","吗","输出","俗称","这个","常量","覆盖","引入","考虑","两点","。","变量","不变","当有","每次","其他","地方","一个","中有","可能","输入","会","引用","了","是从"," ","约定","不"],"title":"固定状态","title_tokens":["状态","固定"]},{"location":"javascript/fp/side-effect/#_2","text":"随机函数也会产生副作用。 大部分语言中的随机都是采用伪随机算法，有些语言提供了起始值，因此给定相同的起始值生成的随机序列都是一致的。 但是 js 没有提供这项功能，因此 js 中偶然性也是副作用的一种","text_tokens":["一致","的","是","部分","但是","，","偶然性","函数","这项","副作用","都","功能","给定","大部分","也","因此","js","序列","一种","随机","偶然","提供","作用","没有","。","大部","会","相同","起始","采用","伪","生成","了","产生"," ","语言","起始值","中","算法","有些"],"title":"偶然性","title_tokens":["偶然性","偶然"]},{"location":"javascript/fp/side-effect/#io-effects","text":"最常见的副作用就是 IO 输入输出 比如 DOM，当修改 DOM 之后，事实上就已经产生了副作用 再比如两个依赖自由变量的 ajax，当异步请求的时候，如果回调执行的 顺序 不一致，可能会产生 bug，但是我们难以捕捉他们。 因为很多时候，这些 bug 只会带来 ui 渲染上的不一致，或者只是简单的状态改变。","text_tokens":["再","一致","我们","的","时候","回调","ui","事实上","当","自由","但是","比如","渲染","很多","上","，","或者","之后","bug","顺序","改变","副作用","只会","修改","执行","如果","输出","输入输出","最","捕捉","难以","事实","这些","就是","作用","常见","io","ajax","依赖","变量","异步","两个","可能","。","会","简单","输入","状态","就","请求","因为","了","带来","产生"," ","dom","只是","已经","他们","不"],"title":"IO Effects","title_tokens":[" ","effects","io"]},{"location":"javascript/fp/side-effect/#_3","text":"如果不得不通过副作用修改状态，制裁方式之一是 幂等性","text_tokens":["状态","性","不得","等","是","不得不","幂","修改","作用"," ","如果","之一","，","通过","方式","制裁","副作用"],"title":"制裁副作用","title_tokens":["作用","制裁","副作用"]},{"location":"javascript/fp/side-effect/#_4","text":"首先给出一个在「数学」上和「编程」上都不属于幂等的例子 let updateCounter = obj => { if ( obj . count < 10 ) { obj . count ++ ; return true ; } return false ; };","text_tokens":["updatecounter","」","=","false","的","首先","幂","上","给出","++","「","都",">","等","{","true","obj","return",")",".","10","(","属于",";","一个","if","在","数学","let","<","count"," ","}","编程","和","例子","不"],"title":"幂等性","title_tokens":["等","性","幂"]},{"location":"javascript/fp/side-effect/#_5","text":"从数学角度来看，幂等性意味着在第一次调用后输出不会改变的操作。 更清晰的例子。 f(x) = f(f(x)) = f(f(f(x))) 在 js 内置的 Math 库中，下面这些例子显然是幂等性的。 Math.min(..) Math.max(..) Math.round(..) Math.floor(..) Math.ceil(..) 我们也可以自己定义一些幂等性的运算 let toPower0 = x => Math . pow ( x , 0 ); let snapUp3 = x => x - ( x % 3 ) + ( x % 3 > 0 && 3 ); toPower0 ( 3 ) == toPower0 ( toPower0 ( 3 )); // true snapUp3 ( 3.14 ) == snapUp3 ( snapUp3 ( 3.14 )); // true 数学角度的幂等性并不仅仅局限于数学运算，js 中基本类型强制转换也是幂等的 let x = 42 , y = 'hello' ; String ( x ) === String ( String ( x )); // true Boolean ( y ) === Boolean ( Boolean ( y )); // true 或是 let upper = v => v . toUpperCase (); let lower = v => v . toLowerCase (); let str = 'Hello World' ; upper ( str ) == upper ( upper ( str )); // true lower ( str ) == lower ( lower ( str ) ); // true 总而言之，幂等性就是满足下列公式的数学表达式 f(x) = f(f(x))","text_tokens":["不仅仅",",","后","并","总而言之","运算","upper","操作","y","world","等","调用","也","+","达式","js",".","floor","从","第一次","snapup3","强制","。","角度",";","类型","3.14","定义","str","数学","let","&&","表达","lower","是","'","局限","round","/","-",">","0","hello","基本","局限于","不仅","内置","限于","库中","ceil","公式","3"," ","math","下列","x","中","touppercase","一些","表达式","topower0","幂","boolean","，","42","转换","或是","意味","true","v","可以","..","f","仅仅","tolowercase","这些","就是","max","来看","意味着","string","清晰","例子","=","我们","的","下面","而言","不会","改变","显然","一次","输出",")","性","满足","自己","(","更","min","%","在","第一","pow"],"title":"数学上的幂等性","title_tokens":["数学","的","性","等","幂","上"]},{"location":"javascript/fp/side-effect/#_6","text":"程序中的幂等性没有那么正式，换句话说，当第一次调用 f(x) 与第二次调用的返回值没有区别，从程序的角度，我们认为是幂等的。 就像在 Http 的 RESTapi 中，PUT 被定义为更新服务器资源，当发送多个带有相同参数的 PUT 时，服务器资源都具备相同的结果状态。 // idempotent:幂等 obj . count = 2 ; a [ a . length - 1 ] = 42 ; person . name = upper ( person . name ); // non-idempotent:非幂等 obj . count ++ ; a [ a . length ] = 42 ; person . lastUpdated = Date . now (); 因此，幂等性的定义是，在第一次调用之后，后续怎样的重复调用，程序状态都不会再改变。非幂等性在每次调用都会更改程序状态。 那么在 DOM 更新中如何表现呢？ let hist = document . getElementById ( 'orderHistory' ); // idempotent: hist . innerHTML = order . historyText ; // non-idempotent: let update = document . createTextNode ( order . latestUpdate ); hist . appendChild ( update ); // 隐式的，当前状态是下一状态的一部分 我们并不能总是幂等的定义我们的操作，但这有利于减少副作用的影响。","text_tokens":["再","隐式","认为","有利","一部分","并","upper","之后","发送","idempotent","操作","与","2","等","调用","date","第二","obj","createtextnode","这",".","从","第一次","name","restapi","作用","getelementbyid","返回值","。","换句话","角度",";","每次","结果","二次","定义","状态","let","count","不能","参数","更改","被","第二次","是","但","'","/","？","-","服务器","带有","更新","因此","利于","一部","总是","下","latestupdate","没有","[","non","那么"," ","非幂","有利于","一","x","中","update","orderhistory","部分","幂","具备","a","，","42","资源","副作用","呢","怎样","]","正式","1","f","appendchild","后续","如何","为","put","会","相同","换句话说","务器","区别","hist","服务器资源",":","返回","服务","person","=","historytext","我们","的","lastupdated","当","多个","减少","不会","++","改变","都","程序","影响","当前","时","表现","length","换句","一次",")","性","document","(","innerhtml","像","在","就","http","重复","now","dom","order","第一"],"title":"程序中的幂等性","title_tokens":["程序","的","性","等","幂","中"]},{"location":"javascript/fp/side-effect/#pure-bliss","text":"一个没有副作用的函数称之为 Pure Function ，也就是「纯」函数 纯函数在编程角度来说是幂等的，因为没有任何副作用。 let add = ( a , b ) => a + b 可以发现所有的输入输出都是直接的，没有引用任何自由变量，多次调用 add 函数与只调用一次没有任何区别。所以 add 是一个幂等纯函数。 但是在数学意义中，不是所有纯函数都是幂等的，因为的返回值可能不能作为他们的输入。 let calculateAverage = nums => { let sum = 0 ; for ( let num of nums ) { sum += num ; } return sum / nums . length ; } calculateAverage ([ 1 , 2 , 4 , 7 , 11 , 16 , 22 ]); // 9 在这个例子中，返回值并非一个数组，因此不可能「recall」 calculateAverage(calculateAverage(nums)) 纯函数也可以引用自由变量和其他函数，前提是自由变量没有副作用。 const PI = 3.141592 ; let circleArea = radius => PI * radius * radius ; let cylinderVolume = ( radius , height ) => height * circleArea ( radius ); 另一个纯函数引用自由变量的例子就是 闭包 虽然 circleArea 是一个函数对象，我们可以给他添加一个可能「突变」的属性，但是不影响 circleArea 调用。因此只要不重新分配函数，就没有副作用。 验证纯函数的另一种方式是，相同的输入永远产生相同的输出。 如果一个函数给相同的输入产生不同的输出，那么就不是一个纯函数。 在 js 中，写带副作用的代码实在是太容易了。","text_tokens":[",","nums","代码","函数","与","闭包","太","2","add","等","重新","调用","也","16","recall","+","js","这个",".","任何","11","给","添加","作用","永远","返回值","。","角度",";","let","数学","calculateaverage","不能","编程","另","并非","」","num","是","直接","const","虽然","of","/","「",">","0","来说","如果","只","因此","意义","function","输入输出","7","实在","*","对象","没有","sum","[","变量","一个","写带","引用","只要","了","那么","}"," ","circlearea","产生","分配","属性","一种","他们","之为","中","和","方式","所以","不","他","突变","9","但是","幂","自由","a","，","副作用","{","重新分配","]","作为","for","可以","1","验证","不同","22","return","数组","radius","就是","height","pi","容易","相同","输入","多次","b","区别","返回","例子","3.141592","=","发现","我们","的","所有","pure","都","cylindervolume","不是","影响","length","一次","输出",")","4","纯","前提","(","其他","可能","在","就","因为","称之为"],"title":"Pure Bliss","title_tokens":[" ","pure","bliss"]},{"location":"javascript/fp/side-effect/#purely-relative","text":"let rememberNumbers = nums => fn => fn ( nums ); let list = [ 1 , 2 , 3 , 4 , 5 ]; let simpleList = rememberNumbers ( list ); simpleList 像一个纯函数，但实际上并不是， let median = nums => ( nums [ 0 ] + nums [ nums . length - 1 ]) / 2 ; simpleList ( median ); // 3 list . push ( 6 ); simpleList ( median ); // 3.5 显而易见，当我们修改输入引用的自由变量，返回值就发生了变化。 可以通过复制数组使得 simpleList 变成纯函数。 let rememberNumbers = nums => { // make a copy of the array nums = [... nums ]; return fn => fn ( nums ); } 但是这可能会导致一个更隐蔽的副作用潜伏。 let list = [ 1 , 2 , 3 , 4 , 5 ]; // make `list[0]` be a getter with a side effect Object . defineProperty ( list , 0 , { get : () => { console . log ( \"[0] was accessed!\" ); return 1 ; } } ); let simpleList = rememberNumbers ( list ); // [0] was accessed! 这个副作用看起来无法避免，但是我们可以将它从函数内部转移到调用函数的地方。 let rememberNumbers = (... nums ) => fn => fn ( nums ) let simpleList = rememberNumbers (... list ); // [0] was accessed! 这样做的好处是，rememberNumbers 是纯函数，造成副作用的原因在于 ...","text_tokens":["log",",","nums","并","避免","函数","内部","2","调用","+","accessed","这","object","实际上","be",".","这个","从","使得","the","看起","作用","返回值","显而","。",";","...","let","复制","was","array","通过","但","3.5","get","是","造成","remembernumbers","of","median","/","-",">","0","push","side","with","[","变量","好处","地方","导致","一个","引用","6","3","了","}"," ","做","fn","实际","但是","自由","a","转移","到","，","变成","副作用","变化","console","{","修改","]","1","可以","defineproperty","数组","return","\"","`","getter","copy","会","输入","在于","潜伏",":","返回","effect","make","=","我们","的","simplelist","当","这样","起来","不是","发生","调用函数","5","!","length","它",")","4","易见","纯","(","显而易见","无法","看起来","将","更","可能","像","原因","就","隐蔽","list"],"title":"Purely Relative","title_tokens":[" ","relative","purely"]},{"location":"javascript/fp/side-effect/#_7","text":"// yes, a silly contrived example :) let firstValue = nums => nums [ 0 ]; let lastValue = nums => firstValue ( nums . reverse ()); simpleList ( lastValue ); // 5 console . log ( list ); // [1,2,3,4,5] -- OK! simpleList ( lastValue ); // 1 reverse() 方法其实修改了原本的数组，只不过修改的是内部引用的数组。 怎样改进呢？ let rememberNumbers = (... nums ) => fn => fn ([... nums ]); 可以通过传递一个数组拷贝来避免接受该数组的函数在调用时改变原数组。 但是仍然无法保证传递一个不纯的函数。因此，我们只能尽量的让函数 pure，为了可读性。","text_tokens":["log",",","nums","尽量","避免","函数","内部","2","yes","只不过","原","调用",".","原本","不纯","。",";","为了","...","let","只能","仍然","lastvalue","通过","来","是","remembernumbers","让","/","？","-",">","0","silly","因此","contrived","firstvalue","可读","[","一个","引用","3","了"," ","fn","但是","a","，","不过","拷贝","呢","console","修改","怎样","]","1","可以","改进","example","数组","传递",":","=","我们","的","simplelist","pure","改变","接受","时","5","!","其实","reverse",")","4","可读性","方法","(","无法","ok","保证","在","list","该"],"title":"纯函数 + 不纯函数 = 不纯函数","title_tokens":["=","纯"," ","+","函数","不"]},{"location":"javascript/fp/side-effect/#referential-transparency","text":"判断一个函数是否纯净的第三种方式，是 Referential transparency 「引用透明性」。如果将值替换函数调用的那一行，行为上没有任何变化，那么该函数就是纯函数。 也就是说，在一个程序当中，我们用一个 val 代替了一个函数调用，在执行上我们看不出任何区别。 如果一个函数存在副作用，但是在程序的任何地方都没有被观察到或者被依赖，那么他还具备「引用透明性」吗？ let sum ; let calculateAverage = nums => { sum = 0 ; for ( let num of nums ) { sum += num ; } return sum / nums . length ; } let numbers = [ 1 , 2 , 4 , 7 , 11 , 16 , 22 ]; let avg = calculateAverage ( numbers ); 不得不说它和纯函数几乎没有区别，但是如何看待他取决于你自己","text_tokens":["取决于","替换","也就是说",",","nums","函数","2","调用","执行","16","+","referential",".","任何","观察","11","取决","作用","。","avg",";","let","存在","calculateaverage","被","看不出","」","当中","num","是","几乎","numbers","将值","of","/","「","？","代替",">","0","如果","第三","用","7","不得","没有","sum","[","第三种","地方","一个","引用","val","了","那么","不得不","}"," ","方式","和","他","transparency","看待","但是","具备","到","，","判断","你","副作用","是否","变化","{","透明","]","吗","for","1","透明性","22","return","就是说","就是","如何","依赖","还","不出","那","区别","=","我们","的","或者","上","都","程序","函数调用","length","它",")","明性","行为","4","纯","纯净","(","自己","三种","在","一行","该","说"],"title":"Referential transparency","title_tokens":[" ","referential","transparency"]},{"location":"javascript/fp/side-effect/#performance-effects","text":"观察这个函数 let cache = []; let specialNumber = n => { // if we've already calculated this special number, // skip the work and just return it from the cache if ( cache [ n ] !== undefined ) { return cache [ n ]; } var x = 1 , y = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { x += i % 2 ; y += i % 3 ; } cache [ n ] = ( x * y ) / ( n + 1 ); return cache [ n ]; } specialNumber ( 6 ); // 4 specialNumber ( 42 ); // 22 specialNumber ( 1 E6 ); // 500001 specialNumber ( 987654321 ); // 493827162 我们通过一个缓存来优化多次调用这个函数的性能，但是这看起来很蠢，你可能认为他是纯函数，但是我不这么认为。 let specialNumber = ( function memoization (){ let cache = []; return function specialNumber ( n ){ // if we've already calculated this special number, // skip the work and just return it from the cache if ( cache [ n ] !== undefined ) { return cache [ n ]; } let x = 1 , y = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { x += i % 2 ; y += i % 3 ; } cache [ n ] = ( x * y ) / ( n + 1 ); return cache [ n ]; }; })(); 我们通过 IIFE 来 确保 函数的其他部分不能访问到 cache，而不仅仅是 不允许 在这里至关重要的一点，就是我们能确保，而不仅仅是心灵约定。","text_tokens":["work","不仅仅","var","number","认为",",","specialnumber","函数","n","it","y","2","iife","调用","+","这","这个","观察","the","看起","我","缓存","。",";","if","let","<","不能","约定","calculated","通过","来","是","'","e6","访问","/","from","special",">","just","function","*","不仅","987654321","能","[","允许","一个","很蠢","6","3","}"," ","优化","x","他","不","确保","部分","但是","到","，","42","we","你","memoization","而","{","]","for","1","22","return","仅仅","cache","就是","this","至关重要","这里","already","多次","重要","一点","心灵","skip","=","500001","我们","的","493827162","性能","and","起来","++","i","!","至关",")","4","纯","(","看起来","其他","可能","%","undefined","在","这么","ve"],"title":"Performance Effects","title_tokens":[" ","effects","performance"]},{"location":"javascript/fp/side-effect/#mentally-transparent","text":"虽然有时将常数和函数调用替换对函数的执行没有影响，但是我们不应该这么做。 不仅仅是因为数据可能是变化的，还为了更好地可读性。 读者会不断地心算一个永远不会变的结果，但是纯函数能够减少这样的花销。","text_tokens":["不仅仅","变","替换","的","我们","是因为","是","但是","虽然","，","这样","更好","减少","不会","函数","变化","心算","影响","能够","调用","函数调用","执行","应该","有时","仅仅","不仅","地","纯","可读性","数据","没有","可读","永远","将","。","对","可能","还","为了","会","不断","一个","结果","因为","常数","做"," ","花销","这么","和","读者","不"],"title":"Mentally Transparent","title_tokens":[" ","mentally","transparent"]},{"location":"javascript/fp/side-effect/#_8","text":"可以将副作用从函数内部转移到调用函数的地方，这看起来更明显。 举个栗子 let addMaxNum = arr => { let maxNum = Math . max (... arr ); arr . push ( maxNum + 1 ); } let nums = [ 4 , 2 , 7 , 3 ]; addMaxNum ( nums ); // [4,2,7,3,8] //改进 let addMaxNum = arr => Math . max (... arr ) + 1 ; let nums = [ 4 , 2 , 7 , 3 ]; nums . push ( addMaxNum ( nums )); // [4,2,7,3,8] 我们可以将 addMaxNum 折叠起来了，我们不需要再去观察 addMaxNum 的内部实现。 另外一种方式是采用 immutable 数据结构来实现，我会在下一篇文章说明 我们还可以从这几个角度来分析。","text_tokens":["再",",","nums","函数","内部","2","调用","+","这","栗子","另外",".","观察","我会","从","看起","作用","数据","举个","。","角度",";","需要","...","let","采用","结构","来","是","/",">","push","实现","数据结构","去","7","下","[","地方","maxnum","一篇","3","了","}"," ","math","一种","immutable","方式","不","转移","到","，","副作用","{","说明","]","分析","可以","1","改进","文章","max","折叠","还","arr","=","我们","的","明显","起来","addmaxnum","调用函数",")","4","8","(","将","看起来","更","几个","在"],"title":"函数提纯","title_tokens":["提纯","函数"]},{"location":"javascript/fp/side-effect/#_9","text":"如果一个函数是不纯的，并且引用了外部的自由变量，我们可以使用作用域来封装。 let users = {}; let fetchUserData = userId => { ajax ( `http://some.api/user/ ${ userId } ` , function onUserData ( user ){ users [ userId ] = user ; }); } // 改进 function safer_fetchUserData ( userId , users ) { // simple, naive ES6+ shallow object copy, could also // be done w/ various libs or frameworks users = Object . assign ( {}, users ); fetchUserData ( userId ); // return the copied state return users ; // *********************** // original untouched impure function: function fetchUserData ( userId ) { ajax ( `http://some.api/user/ ${ userId } ` , function onUserData ( user ){ users [ userId ] = user ; } ); } } 函数的纯度与否其实是由外部决定的，内部也可以适当的采用一些不纯的技术，比如为了性能使用 cache 缓存结果。 但是我们的目标是尽可能的减少副作用。","text_tokens":[",","copied","纯度","函数","内部","也","+","safer","object","be",".","also","the","不纯","作用","缓存","。",";","userid","结果","为了","使用","various","untouched","let","采用","来","是","/","fetchuserdata","shallow",">","如果","尽可","function","*","[","变量","一个","done","引用","适当","了","}"," ","一些","user","但是","自由","外部","，","与否","es6","副作用","could","users","作用域","{","]","assign","可以","改进","return","api","`","cache","some","ajax","copy","libs","or","naive","目标",":","=","impure","我们","的","性能","比如","减少","onuserdata","尽可能","w","其实",")","$","_","由","(","simple","state","可能","original","frameworks","并且","http","封装","决定","技术"],"title":"自由变量","title_tokens":["变量","自由"]},{"location":"javascript/fp/side-effect/#_10","text":"有些时候，不纯的函数来自于第三方库，你无法直接将自由变量封装在函数的作用域内 let nums = []; let smallCount = 0 ; let largeCount = 0 ; function generateMoreRandoms ( count ) { for ( let i = 0 ; i < count ; i ++ ) { let num = Math . random (); if ( num >= 0.5 ) { largeCount ++ ; } else { smallCount ++ ; } nums . push ( num ); } } 我们可以通过 brute-force 算法执行以下步骤来改进： 保存未被影响的当前状态 设置初始输入状态 运行不纯的函数 捕获副作用 恢复原状态 返回副作用状态 function safer_generateMoreRandoms ( count , initial ) { // (1) Save original state let orig = { nums , smallCount , largeCount }; // (2) Set up initial pre-side effects state nums = [... initial . nums ]; smallCount = initial . smallCount ; largeCount = initial . largeCount ; // (3) Beware impurity! generateMoreRandoms ( count ); // (4) Capture side effect state let sides = { nums , smallCount , largeCount }; // (5) Restore original state nums = orig . nums ; smallCount = orig . smallCount ; largeCount = orig . largeCount ; // (6) Expose side effect state directly as output return sides ; } 需要注意的是 掩盖 手段只有在处理同步代码时才有效。","text_tokens":["时候","复原",",","于","orig","nums","代码","函数","2","执行","0.5","第三方","掩盖","safer",".","处理","else","largecount","不纯","作用","。",";","需要","if","状态","...","let","手段","<","count","通过","来","被","num","pre","是","直接","时才","恢复原","未","/","三方","-","0",">","push","side","第三","effects","function","expose","[","变量","注意","up","6","3","}"," ","math","directly","有些","restore","自由","capture","，","random","你","：","副作用","as","设置","作用域","恢复","{","内","]","generatemorerandoms","for","smallcount","可以","1","改进","beware","sides","return","有效","来自","库","initial","捕获","输入","只有","force","返回","算法","effect","同步","=","我们","的","保存","运行","++","初始","影响","当前","output","i","!","5","impurity",")","save","4","_","set","无法","(","将","state","original","在","封装","步骤","以下","brute"],"title":"掩盖","title_tokens":["掩盖"]},{"location":"javascript/fp/side-effect/#_11","text":"当我们要处理的副作用是一个 突变 的输入导致的，「数组」或是「对象」我们可以这样做 function handleInactiveUsers ( userList , dateCutoff ) { for ( let i = 0 ; i < userList . length ; i ++ ) { if ( userList [ i ]. lastLogin == null ) { // remove the user from the list userList . splice ( i , 1 ); i -- ; } else if ( userList [ i ]. lastLogin < dateCutoff ) { userList [ i ]. inactive = true ; } } } 先做一个深拷贝 function safer_handleInactiveUsers ( userList , dateCutoff ) { // make a copy of both the list and its user objects let copiedUserList = userList . map ( function mapper ( user ){ // copy a `user` object return Object . assign ( {}, user ); }); // call the original function with the copy handleInactiveUsers ( copiedUserList , dateCutoff ); // expose the mutated list as a direct output return copiedUserList ; }","text_tokens":[",","lastlogin","direct","safer","copieduserlist","object","mutated","处理",".","datecutoff","else","the","作用",";","if","let","<","要","」","是","先","of","/","from","「","-","0","mapper","objects","remove","function","with","对象","call","expose","[","导致","一个","深","做"," ","}","突变","user","a","，","map","拷贝","或是","副作用","as","{","true","]","its","assign","for","可以","1","return","数组","`","userlist","copy","输入","inactive","make","=","我们","的","splice","当","and","这样","++","output","i","length","both",")","_","(","null","original","list","handleinactiveusers"],"title":"规避","title_tokens":["规避"]},{"location":"javascript/fp/side-effect/#this-revisited","text":"有的时候 this 作为一个隐式的输入也可能导致副作用 let ids = { prefix : \"_\" , generate () { return this . prefix + Math . random (); } }; 我们可以创建一个包装函数来传入可读的上下文 let safer_generate = context => ids . generate . call ( context ); safer_generate ({ prefix : \"foo\" }); // \"foo0.8988802158307285\" 本质上，我们并没有消除副作用的影响，而是尽可能的做到在运行时能将 bug 定位在仍然使用副作用的代码上。","text_tokens":["隐式","ids","=","foo0.8988802158307285","我们","的","时候","运行",",","并","上","，","bug","代码","random","函数","/","副作用","prefix",">","本质","尽可能","影响","上下文","{","定位","也","下文","作为","+","可以","safer","尽可","return","generate",")",".","\"","_","而是","作用","可读","this","(","call","没有","消除","上下","将",";","。","导致","可能","有","一个","context","输入","使用","let","在","做到","时能","创建","仍然","}"," ","math","包装","foo",":","来","传入"],"title":"this Revisited","title_tokens":[" ","this","revisited"]},{"location":"javascript/fp/value-immutable/","text":"这一节和上节一样，都是为了减少副作用而努力。 如果说编程角度的幂等让一个数值改变的操作变为一次，那么不可变数据结构就是将其变为 0 次。 原始数据类型的 immutable ¶ JavaScript 中的原始类型一直是不可变的，无法修改。 但是 JS 有一种奇怪的「装箱」行为，在访问原始类型的属性时触发。 JS 在这种情况下自动将值包裹在一个「装箱对象」中。 let x = 2 ; x . length = 4 ; // 严格模式下报错 x ; // 2 x . length ; // undefined let x = new Number ( 2 ); // works fine x . length = 4 ; 那么，字符串呢？ \"use strict\" ; let s = new String ( \"hello\" ); s [ 1 ]; // e s [ 1 ] = \"E\" ; // error s . length = 10 ; // error s [ 42 ] = \"?\" ; // OK s ; // \"hello\" // 即使是装箱对象，大部分属性也不可以变 let s = new String ( \"hello\" ); s [ 1 ] = \"E\" ; // error s . length = 10 ; // error s [ 42 ] = \"?\" ; // OK s ; // \"hello\" Value to Value ¶ 首先，必须在心里上有一个清晰地认知，immutable 数据不代表在整个程序中我们不修改这个值。 immutable 的核心理念是在我们需要修改某个值的时候，我们创建一个新的值而不是对已有的值「突变」。 举个栗子 let addValue = arr => [... arr , 4 ]; addValue ([ 1 , 2 , 3 ]); // [1,2,3,4] 这意味着我们可以控制我们程序的状态，除了 addValue，没有任何东西能改变状态。 我们也可以复制对象而不是产生对象的「突变」 let user = { // .. }; function updateLastLogin ( user ) { let newUserRecord = Object . assign ({}, user ); newUserRecord . lastLogin = Date . now (); return newUserRecord ; } user = updateLastLogin ( user );","text_tokens":["new","必须","时候","number",",","操作","addvalue","newuserrecord","2","lastlogin","等","也","date","js","这","e","栗子","object","这个",".","任何","error","作用","数据","举个","。","角度",";","类型","需要","有","为了","包裹","模式","let","...","状态","复制","东西","控制","创建","次","上节","编程","结构","装箱","核心理念","变","」","字符","首先","是","javascript","不可","访问","将值","让","/","「","？","0","其","hello",">","如果","works","to","数据结构","s","updatelastlogin","function","下","地","对象","核心","没有","能","[","一个","原始","value","3","那么","产生"," ","新","一直","}","属性","x","一种","中","immutable","和","fine","整个","不","突变","user","即使","部分","但是","幂","，","42","副作用","而","呢","意味","{","修改","]","assign","1","可以","..","变为","情况","return","10","\"","一节","就是","自动","¶","?","strict","某个","string","奇怪","arr","意味着","清晰","代表","一样","=","我们","的","原始数据","上","减少","值","改变","这种","都","use","不是","程序","大部分","心里","时","length","一次",")","严格","行为","4","认知","字符串","如果说","除了","已有","无法","触发","报错","(","将","大部","对","undefined","ok","在","心理","now","理念","数值","努力"],"title":"Value immutable","title_tokens":[" ","value","immutable"]},{"location":"javascript/fp/value-immutable/#immutable","text":"JavaScript 中的原始类型一直是不可变的，无法修改。 但是 JS 有一种奇怪的「装箱」行为，在访问原始类型的属性时触发。 JS 在这种情况下自动将值包裹在一个「装箱对象」中。 let x = 2 ; x . length = 4 ; // 严格模式下报错 x ; // 2 x . length ; // undefined let x = new Number ( 2 ); // works fine x . length = 4 ; 那么，字符串呢？ \"use strict\" ; let s = new String ( \"hello\" ); s [ 1 ]; // e s [ 1 ] = \"E\" ; // error s . length = 10 ; // error s [ 42 ] = \"?\" ; // OK s ; // \"hello\" // 即使是装箱对象，大部分属性也不可以变 let s = new String ( \"hello\" ); s [ 1 ] = \"E\" ; // error s . length = 10 ; // error s [ 42 ] = \"?\" ; // OK s ; // \"hello\"","text_tokens":["new","number","2","也","js","e",".","error","。",";","类型","有","包裹","模式","let","装箱","变","」","字符","javascript","是","不可","访问","将值","/","「","？","hello","works","s","下","对象","[","一个","原始","那么"," ","一直","属性","x","一种","中","fine","不","即使","部分","但是","，","42","呢","修改","]","1","可以","情况","10","\"","自动","?","strict","string","奇怪","=","的","这种","use","大部分","时","length",")","严格","行为","4","字符串","无法","触发","报错","(","大部","undefined","ok","在"],"title":"原始数据类型的 immutable","title_tokens":["原始","的","immutable"," ","数据","原始数据","类型"]},{"location":"javascript/fp/value-immutable/#value-to-value","text":"首先，必须在心里上有一个清晰地认知，immutable 数据不代表在整个程序中我们不修改这个值。 immutable 的核心理念是在我们需要修改某个值的时候，我们创建一个新的值而不是对已有的值「突变」。 举个栗子 let addValue = arr => [... arr , 4 ]; addValue ([ 1 , 2 , 3 ]); // [1,2,3,4] 这意味着我们可以控制我们程序的状态，除了 addValue，没有任何东西能改变状态。 我们也可以复制对象而不是产生对象的「突变」 let user = { // .. }; function updateLastLogin ( user ) { let newUserRecord = Object . assign ({}, user ); newUserRecord . lastLogin = Date . now (); return newUserRecord ; } user = updateLastLogin ( user );","text_tokens":["必须","时候",",","addvalue","newuserrecord","2","lastlogin","也","date","栗子","这","object","这个",".","任何","数据","举个","。","需要",";","有","...","状态","let","复制","东西","控制","创建","核心理念","」","首先","是","/","「",">","updatelastlogin","function","地","对象","核心","没有","能","[","一个","3","产生"," ","新","}","中","immutable","整个","不","突变","user","，","而","意味","{","修改","]","assign","1","可以","..","return","某个","意味着","arr","清晰","代表","=","我们","的","上","值","改变","不是","程序","心里",")","认知","4","除了","已有","(","对","在","心理","now","理念"],"title":"Value to Value","title_tokens":[" ","value","to"]},{"location":"javascript/fp/why-fp/","text":"近年来，主流开发模式从独立开发转变成多人协同，对代码的可读性的要求增加。 函数式编程带来的好处 ¶ 可读性强 可维护性 天然 bug 更少更易发现 举个栗子 来对比一下下面的代码 // 1. let arr = [ 1 , 2 , 3 , 4 ] arr . map ( m => { //... }) // 2. let arr = [ 1 , 2 , 3 , 4 ] for ( let i = 0 ; i < arr . length ; i ++ ) { // arr[i] ... } 明显可以看出 map 一目了然，因为在阅读 for 循环的时候，我们会不由自主，也迫不得已的深入代码细节，潜意识会去知道每一步循环干了什么。 命令式 => 声明式的转变 ¶ 命令式的代码总是让读者「过度的」关心技术细节。 而声明式的代码让人更关心数据流和结果。 代码中的平衡 ¶ 熟练掌握函数式编程并不意味着所有的代码都必须得函数化。 取得一个开发和维护的成本的平衡才是我们应该去关心的事情。","text_tokens":["必须","掌握","时候","m",",","声明","并","代码","年来","函数","2","成本","自主","也","多人","栗子","对比",".","从","数据","举个","。",";","结果","模式","...","let","转变","维护性","<","命令","近年来","编程","一下","来","读者","」","是","命令式","事情","让","/","「",">","0","熟练","去","平衡","总是","不得","要求","可读","[","开发","好处","一个","3","了","}"," ","迫不得已","才","中","和","每","什么","不","可维护性","潜意识","看出","主流","技术细节","，","map","意识","变成","而","人","过度","阅读","{","式","意味","应该","独立","]","for","1","可以","了然","维护","¶","会","数据流","增加","近年","带来","意味着","arr","熟练掌握","更易","深入","一目","转变成","发现","=","的","我们","所有","一目了然","协同","取得","下面","明显","细节","bug","++","一步","都","知道","关心","循环","不得已","i","length","干",")","不由","4","天然","化","可读性","(","得","更","对","更少","在","不由自主","因为","技术","强"],"title":"Why FP","title_tokens":[" ","fp","why"]},{"location":"javascript/fp/why-fp/#_1","text":"可读性强 可维护性 天然 bug 更少更易发现 举个栗子 来对比一下下面的代码 // 1. let arr = [ 1 , 2 , 3 , 4 ] arr . map ( m => { //... }) // 2. let arr = [ 1 , 2 , 3 , 4 ] for ( let i = 0 ; i < arr . length ; i ++ ) { // arr[i] ... } 明显可以看出 map 一目了然，因为在阅读 for 循环的时候，我们会不由自主，也迫不得已的深入代码细节，潜意识会去知道每一步循环干了什么。","text_tokens":["时候","m",",","代码","2","自主","也","栗子","对比",".","举个","。",";","...","let","维护性","<","一下","来","/",">","0","去","不得","可读","[","3","了","}"," ","迫不得已","每","什么","可维护性","潜意识","看出","，","map","意识","阅读","{","]","for","1","可以","了然","维护","会","arr","更易","深入","一目","=","发现","我们","的","一目了然","下面","明显","细节","bug","++","一步","知道","循环","不得已","i","length","干",")","不由","4","天然","可读性","(","更少","在","不由自主","因为","强"],"title":"函数式编程带来的好处","title_tokens":["的","带来","式","编程","好处","函数"]},{"location":"javascript/fp/why-fp/#_2","text":"命令式的代码总是让读者「过度的」关心技术细节。 而声明式的代码让人更关心数据流和结果。","text_tokens":["」","的","技术细节","声明","命令式","读者","细节","代码","让","「","而","关心","人","过度","式","总是","数据","。","更","结果","数据流","命令"," ","和","技术"],"title":"命令式 =&gt; 声明式的转变","title_tokens":["=","的","转变","命令","声明"," ","式","命令式",";","gt","&"]},{"location":"javascript/fp/why-fp/#_3","text":"熟练掌握函数式编程并不意味着所有的代码都必须得函数化。 取得一个开发和维护的成本的平衡才是我们应该去关心的事情。","text_tokens":["必须","取得","掌握","的","我们","所有","是","并","事情","代码","函数","都","关心","成本","意味","式","应该","熟练","去","平衡","化","得","维护","。","开发","一个","意味着","熟练掌握"," ","编程","才","和","不"],"title":"代码中的平衡","title_tokens":["平衡","代码","的","中"]},{"location":"javascript-ecosystem/introduction/","text":"","text_tokens":[],"title":"Getting Started","title_tokens":[" ","started","getting"]},{"location":"skills/introduction/","text":"简介 ¶","text_tokens":[" ","¶","简介"],"title":"Getting Started","title_tokens":[" ","started","getting"]},{"location":"skills/introduction/#_1","text":"","text_tokens":[],"title":"简介","title_tokens":["简介"]},{"location":"skills/git/git-cz/","text":"why git cz ¶ 给 git commit 添加一段简短有意义且规范的描述 组成 ¶ 一个标准的 commit 应该包括下面几个部分 <type> ( <scope> ): <subject> <BLANK LINE > <body> <BLANK LINE > <footer> 其中 type ¶ feat 新功能 fix 修复 Bug docs 只有文档改变 style 并没有影响代码的意义(去掉空格，换行) refactor 没有修改 Bug 也没有提交新功能 perf 代码修改提高性能 test 添加测试 chore 构建过程或者构建工具的改变 scope ¶ 说明本次代码影响的范围（文件、文件夹） subject ¶ 简短描述 body ¶ 当代码需要一些说明时 foot ¶ 可以用来跟踪 issue 的 ID ，如 Close #123 方便的库 ¶ npm i -g commitizen 全局安装 commitizen commitizen init cz-conventional-changelog --save --save-exact 项目目录中运行 在 package.json 中添加 \"config\" : { \"commitizen\" : { \"path\" : \"cz-conventional-changelog\" } } \"scripts\" : { \"commit\" : \"git-cz\" } 然后就可以通过 npm run commit 来运行了。","text_tokens":["目录","测试","并","如","代码","（","跟踪","g","）","也","文档","issue",".","给","添加","package","commitizen","包括","why","。","需要","有","test","<","方便","全局","规范","范围","通过","subject","来","一段","123","修复","init","简短","去掉","-","cz",">","功能","exact","id","scripts","意义","文件夹","描述","标准","conventional","perf","没有","foot","scope","一个","了","}"," ","新","换行","中","一些","chore","然后","项目","部分","style","用来","，","commit","{","修改","body","应该","说明","可以","run","、","line","库","\"","且","footer","refactor","path","¶","feat","#","fix","close","docs","只有",":","的","运行","json","构建","当","性能","下面","或者","bug","本次","改变","文件","git","工具","空格","安装","影响","时","i","提高","type","npm","changelog","件夹",")","save","config","(","过程","几个","blank","组成","在","就","其中","提交"],"title":"git-cz","title_tokens":["-","git","cz"]},{"location":"skills/git/git-cz/#why-git-cz","text":"给 git commit 添加一段简短有意义且规范的描述","text_tokens":["git","一段","给","添加","的","commit"," ","且","规范","意义","描述","有","简短"],"title":"why git cz","title_tokens":[" ","git","cz","why"]},{"location":"skills/git/git-cz/#_1","text":"一个标准的 commit 应该包括下面几个部分 <type> ( <scope> ): <subject> <BLANK LINE > <body> <BLANK LINE > <footer> 其中","text_tokens":["的","部分","下面",">","commit","body","应该","type","标准",")","line","(","footer","包括","scope","几个","blank","一个","<","其中"," ","subject",":"],"title":"组成","title_tokens":["组成"]},{"location":"skills/git/git-cz/#type","text":"feat 新功能 fix 修复 Bug docs 只有文档改变 style 并没有影响代码的意义(去掉空格，换行) refactor 没有修改 Bug 也没有提交新功能 perf 代码修改提高性能 test 添加测试 chore 构建过程或者构建工具的改变","text_tokens":["chore","的","构建","性能","style","测试","并","或者","修复","，","bug","代码","改变","去掉","功能","工具","空格","影响","修改","也","意义","提高","文档",")","添加","perf","没有","(","refactor","feat","过程","test","fix"," ","新","换行","docs","只有","提交"],"title":"type","title_tokens":["type"]},{"location":"skills/git/git-cz/#scope","text":"说明本次代码影响的范围（文件、文件夹）","text_tokens":["、","的","）","影响","件夹","说明","范围","文件夹","代码","（","本次","文件"],"title":"scope","title_tokens":["scope"]},{"location":"skills/git/git-cz/#subject","text":"简短描述","text_tokens":["描述","简短"],"title":"subject","title_tokens":["subject"]},{"location":"skills/git/git-cz/#body","text":"当代码需要一些说明时","text_tokens":["一些","当","时","说明","需要","代码"],"title":"body","title_tokens":["body"]},{"location":"skills/git/git-cz/#foot","text":"可以用来跟踪 issue 的 ID ，如 Close #123","text_tokens":["issue","#","的","id","123"," ","close","用来","，","可以","如","跟踪"],"title":"foot","title_tokens":["foot"]},{"location":"skills/git/git-cz/#_2","text":"npm i -g commitizen 全局安装 commitizen commitizen init cz-conventional-changelog --save --save-exact 项目目录中运行 在 package.json 中添加 \"config\" : { \"commitizen\" : { \"path\" : \"cz-conventional-changelog\" } } \"scripts\" : { \"commit\" : \"git-cz\" } 然后就可以通过 npm run commit 来运行了。","text_tokens":["目录","然后","项目","运行","json","init","-","cz","git","g","安装","exact",":","{","commit","i","scripts","可以","npm","changelog","run","save",".","conventional","添加","package","\"","config","commitizen","path","。","在","就","了","全局","}"," ","通过","中","来"],"title":"方便的库","title_tokens":["库","方便","的"]}]}