{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"shuyan ¶ 那些将要去的地方，都是素未谋面的故乡。 欢迎来到 shuyan 。 shuyan （chancezyw's blog）是较为全面的前端技术整理。 shuyan 涉及较多领域。我试图整理一个系统的手册，判断自己缺失的技术栈，并且专注核心概念，主要在于理解而不是成为 api 调用师。 目前， shuyan 主要包含 JavaScript 的基础知识，并正在着力完善以下内容 JavaScript 中的函数式编程 算法相关 关于上述部分待完善内容，请参见 shuyan 的 Projects ，详细列出了正在做的事项以及待做事项。 当然， shuyan 不会局限于 JavaScript ，在未来， shuyan 将会 深入 TypeScript 深入 Css 此外，鉴于以下两点 我不仅仅想写 blog，我试图梳理我的经历和看到的风景，可能会经常回顾，也会一往无前。 技术总是保持不断更新，旧的技术在面对新的技术时随时可能失效。 因此， shuyan 永远保持更新。 How to build？ ¶ blog 目前采用 mkdocs 部署在 https://chancezyw.github.io/shuyan/ 。 mkdocs gh-deploy 可以将其直接提交到 gh-pages 分支 如何安装 mkdocs 待整理 How to practice？ ¶ 首先，可以通过浏览网上资料来学习一些基本的语法。 其次，可以通过刷题巩固自己的学识。 What can you read? ¶ 我的旅行见闻 一些建议： 阅读 提问的智慧 善用 Google 搜索可以帮助你更好地提升自己 掌握至少一门编程语言，比如 JavaScript 实践比什么都要管用 保持对技术的好奇与渴望并坚持下去 Material color palette 更换颜色主题 ¶ Primary colors 主色 ¶ 默认 white 点击色块可更换主题的主色 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) Accent colors 辅助色 ¶ 默认 red 点击色块更换主题的辅助色 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","text_tokens":["自己","保持","can","基础","mdcoloraccent","巩固","默认","color","chancezyw","了","-","试图","click","刷题","mkdocs","pink","buttons","内容","projects","来到","前端","practice",":","可能","如何","写","坚持","yellow","新","辅助","teal","将","orange","更新","body","(","栈","见闻","data","专注","比如","purple","accent","来","中","light","涉及","浏览","=","核心",",","和","https","比","基础知识","算法","不是","。","blog","不会","部分"," ","局限于","安装","\"","以下内容","deep","主要","pages","其","坚持下去","都","看到","失效","addeventlistener","我","gh","整理","）","语法","当然","document","提问","你","管用","此外","css","并","旧","amber","this","localstorage","并且","将会","较","永远","在于","（","api","提升","限于","颜色","师","分支","也","to","关于","一个","采用","参见","一往无前","?","两点","可以","深入","不仅","着力","]","material","io","事项","到","色块","grey","请","鉴于","编程","how","一些","较为","的","更换","typescript",")","网上","待","提交","what","green","lime","完善","包含","可","语言","资料","掌握","成为","知识","shuyan","mdcolorprimary","将要","是","手册","做","帮助","primary","google","善用","风景","：","deploy","谋面","red","基本","理解","目前","什么","array","foreach","详细","read","技术","不断","阅读","因此","与","多","会","学识","缺失","一门","直接","地方","式","概念","好奇","不断更新","white","button",";","系统","prototype","判断","其次","在","地","palette","/","¶","javascript","对","}","首先","部署","blue","调用","md","function","函数","[","cyan","故乡","那些","上述","编程语言","时",".","？","去","一往","不仅仅","经历","正在","学习","'","仅仅","智慧","建议","领域","回顾","面对","indigo","setitem","以及","实践","dataset","想","点击","而","至少","brown","随时","相关","色","github","要","欢迎","更好","无前","you","s","全面","主色","call","colors","{","素未谋面","以下","列出","经常","旅行","渴望","主题","搜索","通过","下去","build","var","总是","queryselectorall","未来","局限","梳理","，"],"title":"Getting Started","title_tokens":["started","getting"," "]},{"location":"#shuyan","text":"那些将要去的地方，都是素未谋面的故乡。 欢迎来到 shuyan 。 shuyan （chancezyw's blog）是较为全面的前端技术整理。 shuyan 涉及较多领域。我试图整理一个系统的手册，判断自己缺失的技术栈，并且专注核心概念，主要在于理解而不是成为 api 调用师。 目前， shuyan 主要包含 JavaScript 的基础知识，并正在着力完善以下内容 JavaScript 中的函数式编程 算法相关 关于上述部分待完善内容，请参见 shuyan 的 Projects ，详细列出了正在做的事项以及待做事项。 当然， shuyan 不会局限于 JavaScript ，在未来， shuyan 将会 深入 TypeScript 深入 Css 此外，鉴于以下两点 我不仅仅想写 blog，我试图梳理我的经历和看到的风景，可能会经常回顾，也会一往无前。 技术总是保持不断更新，旧的技术在面对新的技术时随时可能失效。 因此， shuyan 永远保持更新。","text_tokens":["自己","保持","基础","chancezyw","了","试图","内容","projects","来到","前端","可能","写","新","更新","栈","专注","中","涉及","核心","和","基础知识","算法","不是","。","blog","不会","部分"," ","局限于","以下内容","主要","都","看到","失效","我","整理","）","当然","此外","css","并","旧","并且","将会","较","永远","在于","（","api","限于","师","也","关于","一个","参见","一往无前","两点","深入","不仅","着力","事项","请","鉴于","编程","较为","的","typescript","待","完善","包含","成为","知识","shuyan","将要","是","手册","做","风景","谋面","理解","目前","详细","技术","不断","因此","多","会","缺失","地方","式","概念","不断更新","系统","判断","在","javascript","调用","函数","故乡","那些","上述","时","去","一往","不仅仅","经历","正在","'","仅仅","领域","回顾","面对","以及","想","而","随时","相关","欢迎","无前","s","全面","素未谋面","以下","列出","经常","总是","未来","局限","梳理","，"],"title":"shuyan","title_tokens":["shuyan"]},{"location":"#how-to-build","text":"blog 目前采用 mkdocs 部署在 https://chancezyw.github.io/shuyan/ 。 mkdocs gh-deploy 可以将其直接提交到 gh-pages 分支 如何安装 mkdocs 待整理","text_tokens":["gh","整理","shuyan","chancezyw",".","-","deploy","mkdocs","目前",":","如何","分支","采用","github","可以","将","待","直接","io","到","https","在","blog","。","安装","/"," ","提交","部署","pages","其"],"title":"How to build？","title_tokens":["how","build"," ","to","？"]},{"location":"#how-to-practice","text":"首先，可以通过浏览网上资料来学习一些基本的语法。 其次，可以通过刷题巩固自己的学识。","text_tokens":["自己","巩固","资料","语法","刷题","学习","基本","可以","学识","来","浏览","一些","通过","其次","首先","。"," ","的","，","网上"],"title":"How to practice？","title_tokens":["how"," ","practice","to","？"]},{"location":"#what-can-you-read","text":"我的旅行见闻 一些建议： 阅读 提问的智慧 善用 Google 搜索可以帮助你更好地提升自己 掌握至少一门编程语言，比如 JavaScript 实践比什么都要管用 保持对技术的好奇与渴望并坚持下去","text_tokens":["都","自己","保持","我","语言","掌握","编程语言","提问","帮助","你","google","善用","管用","：","并","智慧","建议","提升","坚持","实践","什么","至少","比","阅读","要","可以","更好","技术","与","一门","对","见闻","比如","渴望","旅行","好奇","搜索","一些","编程","地","下去"," ","的","javascript","，","坚持下去"],"title":"What can you read?","title_tokens":["can","what","you"," ","?","read"]},{"location":"#material-color-palette","text":"","text_tokens":[],"title":"Material color palette 更换颜色主题","title_tokens":["palette"," ","color","颜色","material","更换","主题"]},{"location":"#primary-colors","text":"默认 white 点击色块可更换主题的主色 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","text_tokens":["md","addeventlistener","green","lime","[","可","cyan","默认","color","document","mdcolorprimary",".","-","primary","click","this","localstorage","amber","pink","indigo","buttons","red","setitem","dataset","点击","brown","array","foreach","yellow","teal","body","orange","(","主色","data","]","call","purple","色块","{","主题","light","grey","white",",","=","button",";","prototype",")","var"," ","queryselectorall","\"","的","更换","}","deep","function","blue"],"title":"Primary colors 主色","title_tokens":["primary","colors"," ","主色"]},{"location":"#accent-colors","text":"默认 red 点击色块更换主题的辅助色 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","text_tokens":["md","addeventlistener","green","lime","mdcoloraccent","[","cyan","默认","color","document",".","-","click","this","localstorage","amber","pink","indigo","buttons","red","setitem","dataset","点击","色","array","foreach","yellow","辅助","teal","body","orange","(","]","data","call","purple","色块","accent","主题","light",",","{","=","button",";","prototype",")","var"," ","queryselectorall","\"","的","更换","}","deep","function","blue"],"title":"Accent colors 辅助色","title_tokens":[" ","色","colors","accent","辅助"]},{"location":"algorithm/introduction/","text":"Become stronger ¶ 想起加入小打卡的时候，阿赖问我一个简单的大堆找中值不用排序，我想了半天才想出来 我的心里只有一点感受：我要变强！ 变强的方法 ¶ 参考某位刷了三千多题大佬的 推荐顺序","text_tokens":["才","阿赖","大佬","我","！","方法","时候","找","变强","千多","推荐","become","想起","了","大堆","只有","：","不用","问","小","简单","想","感受","一个","心里","参考","顺序","出来","我要","某位","排序","半天","一点","刷","三千","题","中值"," ","¶","stronger","打卡","的","三千多","加入","，"],"title":"Getting Started","title_tokens":["started","getting"," "]},{"location":"algorithm/introduction/#become-stronger","text":"想起加入小打卡的时候，阿赖问我一个简单的大堆找中值不用排序，我想了半天才想出来 我的心里只有一点感受：我要变强！","text_tokens":["才","阿赖","我","！","时候","找","变强","了","想起","大堆","只有","：","不用","问","小","简单","想","感受","一个","心里","出来","我要","排序","半天","一点","中值"," ","打卡","的","加入","，"],"title":"Become stronger","title_tokens":["stronger"," ","become"]},{"location":"algorithm/introduction/#_1","text":"参考某位刷了三千多题大佬的 推荐顺序","text_tokens":["大佬","千多","某位"," ","顺序","的","推荐","刷","了","三千多","三千","题","参考"],"title":"变强的方法","title_tokens":["方法","变强","的"]},{"location":"introduction/markdown-norm/","text":"Markdown 编写规范 ¶ 采用 CTF Wiki Team 的 Markdown 编写规范。 文档格式 ¶ 使用 .md 后缀 文件夹、文件名使用小写，单词之间使用连字符 - 分隔 建议使用连字符而非下划线的原因是，搜索引擎会将连字符处理为两个单词，而将下划线看做一个单词。参考 Google SEO 指南 。 文档编码使用 UTF-8 标题 ¶ 根据 MkDocs 的要求，文档中至多有一个一级标题 # ，当没有一级标题时采用目录配置中的标题作为当前页面的一级标题 章节标题从 ## 开始 章节标题在 ## 后添加空格，且之后没有 ## // bad ##章节1 // bad ## 章节1 ## // good ## 章节1 章节标题与正文间有且仅有一个空行 段落 ¶ 使用空行换行，尽量不适用两空格换行 部分 IDE 会在提交时自动清理行末的空格 一个段落只表达一个主题 使用主动语态 陈述句中使用肯定说法 删除不必要的词 避免啰嗦、口语化的语句 需要强调的内容酌情使用 Admonition 插件 ，有 note 、 abstract 、 info 、 tip 、 success 、 question 、 warning 、 failure 、 danger 、 bug 、 example 、 quote 多种样式 列表 ¶ 有序列表无需编码 ¶ 1. Foo. 1. Bar. 1. Foofoo. 1. Barbar. 1. Baz. 嵌套列表 ¶ 在有序和无需嵌套列表时使用 4 空格缩进。 1. 2 spaces after a numbered list. 4 space indent for wrapped text. 2. 2 spaces again. * 3 spaces after a bullet. 4 space indent for wrapped text. 1. 2 spaces after a numbered list. 8 space indent for the wrapped text of a nested list. 2. Looks nice, don't it? * 3 spaces after a bullet. 当没有嵌套时，也尽量使用 4 空格缩进。 * Foo, wrapped. 1. 2 spaces and 4 space indenting. 2. 2 spaces again. 当列表结构很简单时，可以在标识符后使用 1 个空格作为标记。 * Foo * Bar * Baz. 1. Foo. 2. Bar. 代码 ¶ 代码块 ¶ 代码块使用 Fenced Block ​```js console.log(\"\"); ​``` 代码块注明语言，以便代码高亮，参见 Pygments 文档 行内代码 ¶ 行内代码使用反引号，且当引用文件时使用行内代码 Be sure to update your `README.md`! 表格 ¶ 以 GitHub Flavored Markdown 格式为准。 | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | | Left-aligned | Center-aligned | Right-aligned | | :--- | :---: | ---: | | git status | git status | git status | | git diff | git diff | git diff | 排版 ¶ 空格 ¶ 中英文之间需要增加空格（包括行内代码） 中文与数字之间需要增加空格 数字与单位之间需要增加空格 全角标点与其他字符之间不加空格 标点符号 ¶ 不重复使用标点符号 用直角引号 「」 代替双引号 “” 使用规范的省略号 …… 全角与半角 ¶ 使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点 名词 ¶ 专有名词使用正确的大小写 公式 ¶ 合理使用行内公式和行间公式，前后无文字的尽量使用行间公式，可以居中显示，提升阅读体验。 行内公式 $ a + b = c $ 行间公式 $$ a + b = c $$ 其他 ¶ 更多排版相关内容和例子请参考 中文排版指南 。","text_tokens":["2","添加","行间","文件夹","danger","强调","diff","根据","文件名","status","包括","分隔","参考","text","用","词","使用","looks","=",")","插件","正确","清理","公式","admonition","）","failure","中文","口语","引用","log","代替","to","符号","参见","尽量","表格","barbar","中英文","非","自动","3","增加","space","left","seo","文字","语言","不","说法","序列表","不必要","配置","遇到","行内","a","team","无","+","wrapped","直角","of","引号","没有","缩进","#","indenting","md","双引号","don","时","数字","bullet","indent","after","排版","foofoo","主题","b","搜索","嵌套","”","两","原因","居中","1","内容","以","省略","(","之间","note","和","主动","*","件夹","readme","避免","页面","numbered","`","空格","8","空行","提升","the","例子","也","一个","标点","小写","块","bug","更","block","的","utf","口语化","abstract","肯定","连","google","样式","下划","文档","当前","换行","」","多","有序","be","必要","/","good",".","引擎","'","显示","结构","…","简单","当","github","有名","baz","下划线","处理","专有","「","体验","first","章节","全角","只","其內容","表达","字符","-","aligned","格式","后","console","标点符号","前后","list","将","完整","删除","省略号","指南","中","部分"," ","\"","从","适用","again","反","作为","规范","需要","特殊","?","采用","git","语句","段落","quote","请","不必","合理","编码","tip","second","c","其他","是","header","标记","update","英文","nested","bar","为准","spaces","与","名词","陈述","center","标识",";","ide","啰嗦","¶","单词","success","索引","!","多种","以便","至多","标识符","example","建议","​","两个","right","搜索引擎","而","相关","酌情","js","$","列表","4","，","fenced","、","大小写","行末","bad","mkdocs","“","for","高亮",":","|","目录","sure","为","重复",",","。","注明","整句","一级","ctf","有","大小","单位","cell","陈述句","（","无需","可以","nice","pygments","重复使用","语态","看做","中英","t","提交","之后","content","中文标点","且","个","标题","info","很","阅读","flavored","会","后缀","仅","and","加","your","专有名词","文件","question","在","it","开始","间","wiki","warning","代码","foo","序列","正文","划线","编写","要求","markdown","##","半角"],"title":"Markdown Norm","title_tokens":["norm","markdown"," "]},{"location":"introduction/markdown-norm/#markdown","text":"采用 CTF Wiki Team 的 Markdown 编写规范。","text_tokens":["wiki","。","team","ctf","markdown"," ","编写","的","采用","规范"],"title":"Markdown 编写规范","title_tokens":["编写","规范","markdown"," "]},{"location":"introduction/markdown-norm/#_1","text":"使用 .md 后缀 文件夹、文件名使用小写，单词之间使用连字符 - 分隔 建议使用连字符而非下划线的原因是，搜索引擎会将连字符处理为两个单词，而将下划线看做一个单词。参考 Google SEO 指南 。 文档编码使用 UTF-8","text_tokens":["md","字符","、","文件夹","原因",".","-","连","是","google","引擎","8","建议","文件名","下划","文档","两个","搜索引擎","分隔","而","件夹","一个","参考","将","小写","会","后缀","之间","划线","使用","下划线","为","处理","指南","文件","非","搜索","。"," ","单词","的","看做","索引","utf","，","seo","编码"],"title":"文档格式","title_tokens":["文档","格式"]},{"location":"introduction/markdown-norm/#_2","text":"根据 MkDocs 的要求，文档中至多有一个一级标题 # ，当没有一级标题时采用目录配置中的标题作为当前页面的一级标题 章节标题从 ## 开始 章节标题在 ## 后添加空格，且之后没有 ## // bad ##章节1 // bad ## 章节1 ## // good ## 章节1 章节标题与正文间有且仅有一个空行","text_tokens":["页面","good","有","添加","作为","时","至多","空格","bad","mkdocs","配置","1","根据","且","空行","文档","后","当前","标题","一个","采用","目录","当","与","正文","仅","中","章节","在","要求","没有","/"," ","#","的","从","##","开始","间","，","一级","之后"],"title":"标题","title_tokens":["标题"]},{"location":"introduction/markdown-norm/#_3","text":"使用空行换行，尽量不适用两空格换行 部分 IDE 会在提交时自动清理行末的空格 一个段落只表达一个主题 使用主动语态 陈述句中使用肯定说法 删除不必要的词 避免啰嗦、口语化的语句 需要强调的内容酌情使用 Admonition 插件 ，有 note 、 abstract 、 info 、 tip 、 success 、 question 、 warning 、 failure 、 danger 、 bug 、 example 、 quote 多种样式","text_tokens":["避免","、","行末","admonition","warning","有","两","不","肯定","说法","failure","多种","danger","时","不必要","空格","陈述句","强调","需要","样式","example","口语","空行","内容","换行","info","一个","酌情","尽量","词","会","bug","语句","使用","删除","必要","陈述","段落","主题","中","quote","note","不必","question","ide","在","啰嗦","自动","主动","部分"," ","只","success","语态","的","表达","插件","口语化","清理","abstract","，","适用","提交","tip"],"title":"段落","title_tokens":["段落"]},{"location":"introduction/markdown-norm/#_4","text":"","text_tokens":[],"title":"列表","title_tokens":["列表"]},{"location":"introduction/markdown-norm/#_5","text":"1. Foo. 1. Bar. 1. Foofoo. 1. Barbar. 1. Baz.","text_tokens":["foo","1","baz"," ",".","bar","foofoo","barbar"],"title":"有序列表无需编码","title_tokens":["序列","有","列表","无需","序列表","编码"]},{"location":"introduction/markdown-norm/#_6","text":"在有序和无需嵌套列表时使用 4 空格缩进。 1. 2 spaces after a numbered list. 4 space indent for wrapped text. 2. 2 spaces again. * 3 spaces after a bullet. 4 space indent for wrapped text. 1. 2 spaces after a numbered list. 8 space indent for the wrapped text of a nested list. 2. Looks nice, don't it? * 3 spaces after a bullet. 当没有嵌套时，也尽量使用 4 空格缩进。 * Foo, wrapped. 1. 2 spaces and 4 space indenting. 2. 2 spaces again. 当列表结构很简单时，可以在标识符后使用 1 个空格作为标记。 * Foo * Bar * Baz. 1. Foo. 2. Bar.","text_tokens":["2","again","don","作为","numbered","时",".","，","空格","8","'","标识符","1","bullet","for","标记","结构","indent","无需","the","nested","简单","后","?","也","很","个","bar","spaces","a","after","list","text","当","foo","可以","baz","尽量","nice","and","使用","有序","looks",",","wrapped","标识","t","嵌套","of","和","在","缩进","。","没有","it"," ","*","列表","3","space","4","indenting"],"title":"嵌套列表","title_tokens":["列表","嵌套"]},{"location":"introduction/markdown-norm/#_7","text":"","text_tokens":[],"title":"代码","title_tokens":["代码"]},{"location":"introduction/markdown-norm/#_8","text":"代码块使用 Fenced Block ​```js console.log(\"\"); ​``` 代码块注明语言，以便代码高亮，参见 Pygments 文档","text_tokens":["fenced","语言","以便",".","`","文档","log","​","高亮","代码","console","参见","块","(","pygments","使用","js",";",")"," ","\"","block","注明","，"],"title":"代码块","title_tokens":["代码","块"]},{"location":"introduction/markdown-norm/#_9","text":"行内代码使用反引号，且当引用文件时使用行内代码 Be sure to update your `README.md`!","text_tokens":["readme","md","!","反","时",".","`","且","引用","update","代码","to","行内","当","sure","使用","be","your","文件","引号"," ","，"],"title":"行内代码","title_tokens":["代码","行内"]},{"location":"introduction/markdown-norm/#_10","text":"以 GitHub Flavored Markdown 格式为准。 | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | | Left-aligned | Center-aligned | Right-aligned | | :--- | :---: | ---: | | git status | git status | git status | | git diff | git diff | git diff |","text_tokens":["second","-","aligned","content","cell","格式","header","diff","status","right",":","以","|","为准","github","git","flavored","center","first","。","markdown"," ","left"],"title":"表格","title_tokens":["表格"]},{"location":"introduction/markdown-norm/#_11","text":"","text_tokens":[],"title":"排版","title_tokens":["排版"]},{"location":"introduction/markdown-norm/#_12","text":"中英文之间需要增加空格（包括行内代码） 中文与数字之间需要增加空格 数字与单位之间需要增加空格 全角标点与其他字符之间不加空格","text_tokens":["字符","）","不","单位","其他","数字","空格","需要","中文","（","代码","英文","包括","行内","标点","与","之间","加","中英文","全角"," ","增加","中英"],"title":"空格","title_tokens":["空格"]},{"location":"introduction/markdown-norm/#_13","text":"不重复使用标点符号 用直角引号 「」 代替双引号 “” 使用规范的省略号 ……","text_tokens":["双引号","不","规范","“","…","代替","符号","标点符号","标点","省略","」","用","使用","重复","省略号","「","直角","重复使用","”","引号"," ","的"],"title":"标点符号","title_tokens":["符号","标点符号","标点"]},{"location":"introduction/markdown-norm/#_14","text":"使用全角中文标点 数字使用半角字符 遇到完整的英文整句、特殊名词，其內容使用半角标点","text_tokens":["字符","、","中文标点","数字","中文","特殊","英文","遇到","标点","完整","使用","名词","全角"," ","整句","其內容","的","，","半角"],"title":"全角与半角","title_tokens":["全角","与","半角"]},{"location":"introduction/markdown-norm/#_15","text":"专有名词使用正确的大小写","text_tokens":["有名","小写","大小写","使用","名词","的","正确","大小","专有名词","专有"],"title":"名词","title_tokens":["名词"]},{"location":"introduction/markdown-norm/#_16","text":"合理使用行内公式和行间公式，前后无文字的尽量使用行间公式，可以居中显示，提升阅读体验。 行内公式 $ a + b = c $ 行间公式 $$ a + b = c $$","text_tokens":["公式","c","文字","行间","居中","显示","提升","前后","行内","a","阅读","可以","尽量","使用","无","+","体验","b","=","$","和","合理","。"," ","的","，"],"title":"公式","title_tokens":["公式"]},{"location":"introduction/markdown-norm/#_17","text":"更多排版相关内容和例子请参考 中文排版指南 。","text_tokens":["和","排版","多","中文","。","内容","更"," ","例子","指南","相关","请","参考"],"title":"其他","title_tokens":["其他"]},{"location":"introduction/resources/","text":"学习资源 ¶ 在线学习 ¶ js 基础学习 优质 blog ¶ ICss 奇淫技巧 梁少峰的个人 blog 30 days 精通 Rx.js 书单 ¶ 敏捷开发","text_tokens":["在线","优质","基础","技巧",".","学习","书单","days","精通","梁少峰","个人","30","奇淫","敏捷","开发","rx","js","资源","blog"," ","¶","的","icss"],"title":"Learning Resources","title_tokens":[" ","resources","learning"]},{"location":"introduction/resources/#_1","text":"","text_tokens":[],"title":"学习资源","title_tokens":["资源","学习"]},{"location":"introduction/resources/#_2","text":"js 基础学习","text_tokens":["学习","js"," ","基础"],"title":"在线学习","title_tokens":["在线","学习"]},{"location":"introduction/resources/#blog","text":"ICss 奇淫技巧 梁少峰的个人 blog 30 days 精通 Rx.js","text_tokens":["精通","梁少峰","个人","blog","30","奇淫"," ","rx","技巧","的",".","js","days","icss"],"title":"优质 blog","title_tokens":["blog","优质"," "]},{"location":"introduction/resources/#_3","text":"敏捷开发","text_tokens":["敏捷","开发"],"title":"书单","title_tokens":["书单"]},{"location":"introduction/study-thought/","text":"如何学习 ¶ 如何养成良好的学习习惯和思考习惯？ 大脑结构 ¶ 在放松的时候，大脑神经网络会生成新的 突触 并且「删除」某些老旧的突触 因此可以通过睡前复习一遍的方式让新的突触记住某些重要信息，长此以往能够控制记忆向特定的方向发展 良好睡眠 ¶ 良好的睡眠能加强脑细胞的新陈代谢，有利于新突触的生长 睡眠有助于大脑海马体产生新的神经元，也就是说，你变聪明了。 僵尸意识 ¶ cue 在你做事之前的信号 routine 惯性，在接到信号之后你的行为 reward 做出这样行为之后的结果 belief 养成信念 组块 ¶ 组块是在集中的思维模式下的重要学习方式。将一些信息关联起来，打包成「压缩包」 以后要回忆这个组块中的所有东西，都不需要整个执行。 e.g 比如你穿衣服，你就能知道如何穿，穿什么一样 怎样形成组块 ¶ 核心办法 分解 聚合 专注 将大的问题分解成小的问题，将小的问题反复练习从而掌握，再将小的解决方案聚合成大的解决方案，那么你最终就解决了这个问题 同时你要知道人的智商有限，世界上没有天才，我们只是普通人，这意味着接受东西的速度有限。因此保持专注才能让你的学习速度最大化，也就是知识 性价比 番茄工作法 ¶ 集中精力 25 分钟，然后给予自己奖励，这是克服拖延症的最好办法 间隔重复法则 ¶ 反复能够加强神经网络突触的记忆，即使是很抽象的东西重复十遍也能掌握 反复的技巧在于和番茄工作法结合起来，在一段时间内高强度的学习，然后放松一段时间，让大脑神经网络固化这些新生成突触，并忘记一些不重要的突触 在重复中回顾 ¶ 单一的重复难免让人乏味，你可以试着闭上眼回顾。 克服拖延症 ¶ 隔离危险的信号 养成微习惯 奖励 如何制定任务 ¶ 只制定明天的任务 任务小而精确 今天做不完的任务不是明天做而是周末做 每天刚开始的时候先做最复杂难做的任务 合理运动和学习 ¶ 人的大脑每天都在产生神经元，如果不用掉就会死亡，而老的神经元开始衰弱，所以每天不管学多少，至少学一点 思维 ¶ 多用类比和比喻 ¶ 类比和比喻有利于大脑形成组块 以终为始的思维 ¶ 举个栗子，我们对物流的看法只是更快而已。然而在马云眼中他认为物流的目的是消灭企业的库存。 批判思维 ¶ 根据已有的数据去分析去推断 即时反馈 ¶ 学得到的东西用大白话讲给别人听，你会明白更多 五分钟起步法 ¶ 遇见不想做但是做了会更好的事情，先做五分钟，再谈其他","text_tokens":["时候","代谢","学","神经元","根据","回忆","新","信息","意味","一样","分钟","用","就是","专注","比如","都","精确","死亡","一遍","分解","白话","复杂","你","认为","也就是说","固化","十遍","能","法则","企业","上","明天","高强度","而是","思维","重要","一些","乏味","就是说","问题","关联","产生","眼中","接受","不","间隔","整个","得到","然后","belief","周末","起步","网络","事情","五分钟","大","批判","突触","最好","发展","最","任务","聪明","没有","物流","这样","从而","这些","最终","不用","助于","而已","性价比","方式","办法","某些","听","工作","压缩包","为始","要","运动","这","打包","推断","放松","自己","大脑","执行","他","怎样","番茄","25","加强","已有","老","难免","马云","routine","东西","普通人","一点","集中精力","生长","和","那么","内","制定","之前","同时","解决","reward","并","再谈","练习","在于","让","穿","养成","反馈","也","拖延","如果","利于","解决方案","细胞","习惯","更","一段时间","的","形成","讲","掌握","知识","才能","隔离","高强","信念","」","多","记住","精力","成","所以","即时","有助","以往","不想","以后","集中","快","聚合",".","？","去","学习","结构","小","单一","世界","最大","分解成","即使","强度","「","库存","只","知道","衣服","睡前","成大","如何","遇见","将","完","所有","删除","中","大白","天才"," ","复习","睡眠","只是","神经网络","意味着","类比","方案","速度","克服","比喻","通人","需要","压缩","有限","向","能够","模式","试着","体","行为","合理","大白话","举个","技巧","其他","是","起来","普通","症","良好","看法","别人","今天","危险","给","脑细胞","¶","多少","上眼","五分","结合","新陈代谢","先","以终","组块","小而","而","结果","衰弱","就","更好","法","通过","但是","控制","，","方向","这个","保持","做事","我们","了","目的","难","给予","长此以往","重复","核心","变","不是","。","cue","脑神经","不管","段时间","人","每天","忘记","海马","并且","闭上眼","数据","大脑神经","这是","可以","穿衣服","消灭","多用","有利","老旧","之后","抽象","僵尸","做","最大化","做出","有助于","再","什么","时间","很","有利于","奖励","神经","因此","会","思考","意识","特定","在","惯性","接到","信号","对","开始","明白","栗子","e","回顾","分析","神经网","然而","g","至少","反复","智商","大化","记忆","下","刚","穿衣","掉","微","一段","生成"],"title":"Study&Thought","title_tokens":["thought","&","study"]},{"location":"introduction/study-thought/#_1","text":"如何养成良好的学习习惯和思考习惯？","text_tokens":["良好","和","思考","习惯","如何","的","养成","？","学习"],"title":"如何学习","title_tokens":["如何","学习"]},{"location":"introduction/study-thought/#_2","text":"在放松的时候，大脑神经网络会生成新的 突触 并且「删除」某些老旧的突触 因此可以通过睡前复习一遍的方式让新的突触记住某些重要信息，长此以往能够控制记忆向特定的方向发展","text_tokens":["方向","大脑","时候","一遍","睡前","并且","方式","让","某些","长此以往","大脑神经","新","网络","信息","神经","向","能够","可以","因此","」","会","记住","突触","删除","记忆","发展","「","重要","以往","通过","特定","在","控制","放松"," ","复习","的","生成","老旧","脑神经","，"],"title":"大脑结构","title_tokens":["结构","大脑"]},{"location":"introduction/study-thought/#_3","text":"良好的睡眠能加强脑细胞的新陈代谢，有利于新突触的生长 睡眠有助于大脑海马体产生新的神经元，也就是说，你变聪明了。","text_tokens":["产生","大脑","代谢","了","你","也就是说","加强","良好","海马","助于","新陈代谢","神经元","有助于","能","有利于","新","神经","就是","利于","突触","体","有助","脑细胞","生长","变","聪明","就是说","细胞","。"," ","睡眠","的","有利","，"],"title":"良好睡眠","title_tokens":["良好","睡眠"]},{"location":"introduction/study-thought/#_4","text":"cue 在你做事之前的信号 routine 惯性，在接到信号之后你的行为 reward 做出这样行为之后的结果 belief 养成信念","text_tokens":["做事","reward","你","belief","做出","养成","routine","结果","信念","行为","之前","在","惯性"," ","cue","接到","的","信号","这样","，","之后"],"title":"僵尸意识","title_tokens":["意识","僵尸"]},{"location":"introduction/study-thought/#_5","text":"组块是在集中的思维模式下的重要学习方式。将一些信息关联起来，打包成「压缩包」 以后要回忆这个组块中的所有东西，都不需要整个执行。 e.g 比如你穿衣服，你就能知道如何穿，穿什么一样","text_tokens":["以后","都","这个","知道","执行","集中","不",".","起来","是","整个","你","学习","需要","e","衣服","回忆","组块","方式","压缩","g","穿","如何","什么","压缩包","能","东西","信息","要","模式","将","就","」","一样","下","所有","比如","思维","打包","成","「","中","穿衣服","重要","一些","在","穿衣","。"," ","的","关联","，"],"title":"组块","title_tokens":["组块"]},{"location":"introduction/study-thought/#_6","text":"核心办法 分解 聚合 专注 将大的问题分解成小的问题，将小的问题反复练习从而掌握，再将小的解决方案聚合成大的解决方案，那么你最终就解决了这个问题 同时你要知道人的智商有限，世界上没有天才，我们只是普通人，这意味着接受东西的速度有限。因此保持专注才能让你的学习速度最大化，也就是知识 性价比","text_tokens":["从而","这个","保持","知道","速度","最终","接受","人","聚合","掌握","知识","我们","分解","了","通人","普通","你","最大化","学习","性价比","练习","再","成大","办法","小","让","世界","才能","最大","分解成","也","有限","东西","意味","要","就","将","大","反复","智商","因此","大化","就是","普通人","上","解决方案","专注","这","核心","没有","天才","。","问题","那么"," ","的","只是","同时","解决","意味着","，","方案"],"title":"怎样形成组块","title_tokens":["组块","形成","怎样"]},{"location":"introduction/study-thought/#_7","text":"集中精力 25 分钟，然后给予自己奖励，这是克服拖延症的最好办法","text_tokens":["奖励","自己","然后","分钟","集中","这是","拖延"," ","精力","克服","给予","最好","25","的","办法","，","集中精力","症"],"title":"番茄工作法","title_tokens":["番茄","法","工作"]},{"location":"introduction/study-thought/#_8","text":"反复能够加强神经网络突触的记忆，即使是很抽象的东西重复十遍也能掌握 反复的技巧在于和番茄工作法结合起来，在一段时间内高强度的学习，然后放松一段时间，让大脑神经网络固化这些新生成突触，并忘记一些不重要的突触","text_tokens":["大脑","这些","段时间","不","掌握","技巧","番茄","是","起来","结合","忘记","学习","固化","并","加强","然后","神经网","十遍","在于","让","时间","工作","也","很","能","东西","网络","高强","神经","大脑神经","能够","新","反复","记忆","突触","即使","重复","法","强度","高强度","重要","一些","和","在","放松","一段时间"," ","内","的","一段","生成","神经网络","脑神经","，","抽象"],"title":"间隔重复法则","title_tokens":["重复","间隔","法则"]},{"location":"introduction/study-thought/#_9","text":"单一的重复难免让人乏味，你可以试着闭上眼回顾。","text_tokens":["可以","乏味","试着","回顾","闭上眼","。","难免","让","人","单一","重复","的","上眼","，","你"],"title":"在重复中回顾","title_tokens":["在","重复","中","回顾"]},{"location":"introduction/study-thought/#_10","text":"隔离危险的信号 养成微习惯 奖励","text_tokens":["习惯","微"," ","危险","的","信号","养成","隔离","奖励"],"title":"克服拖延症","title_tokens":["克服","症","拖延"]},{"location":"introduction/study-thought/#_11","text":"只制定明天的任务 任务小而精确 今天做不完的任务不是明天做而是周末做 每天刚开始的时候先做最复杂难做的任务","text_tokens":["精确","时候","每天","不","复杂","做","周末","先","小而","难","今天","完","刚","明天","而是","最","任务","不是"," ","只","的","制定","开始"],"title":"如何制定任务","title_tokens":["如何","任务","制定"]},{"location":"introduction/study-thought/#_12","text":"人的大脑每天都在产生神经元，如果不用掉就会死亡，而老的神经元开始衰弱，所以每天不管学多少，至少学一点","text_tokens":["都","产生","不管","大脑","每天","人","死亡","学","不用","神经元","老","而","至少","衰弱","神经","就","会","如果","一点","所以","在","掉","多少","的","开始","，"],"title":"合理运动和学习","title_tokens":["学习","运动","和","合理"]},{"location":"introduction/study-thought/#_13","text":"","text_tokens":[],"title":"思维","title_tokens":["思维"]},{"location":"introduction/study-thought/#_14","text":"类比和比喻有利于大脑形成组块","text_tokens":["和","大脑","组块","利于","比喻","有利","有利于","形成","类比"],"title":"多用类比和比喻","title_tokens":["和","比喻","多用","类比"]},{"location":"introduction/study-thought/#_15","text":"举个栗子，我们对物流的看法只是更快而已。然而在马云眼中他认为物流的目的是消灭企业的库存。","text_tokens":["举个","眼中","快","他","我们","是","栗子","认为","目的","看法","而已","然而","马云","企业","消灭","在","。","物流","更","库存","的","只是","对","，"],"title":"以终为始的思维","title_tokens":["以终","的","思维","为始"]},{"location":"introduction/study-thought/#_16","text":"根据已有的数据去分析去推断","text_tokens":["推断","已有","根据","分析","的","数据","去"],"title":"批判思维","title_tokens":["批判","思维"]},{"location":"introduction/study-thought/#_17","text":"学得到的东西用大白话讲给别人听，你会明白更多","text_tokens":["讲","大白","用","多","会","明白","更","大白话","别人","听","的","，","给","学","白话","东西","得到","你"],"title":"即时反馈","title_tokens":["即时","反馈"]},{"location":"introduction/study-thought/#_18","text":"遇见不想做但是做了会更好的事情，先做五分钟，再谈其他","text_tokens":["遇见","五分钟","更好","不想","分钟","再谈","先","会","但是","事情","的","五分","其他","了","做","，"],"title":"五分钟起步法","title_tokens":["五分钟","分钟","起步","五分","法"]},{"location":"javascript/introduction/","text":"","text_tokens":[],"title":"Addition Concept","title_tokens":["concept","addition"," "]},{"location":"javascript/core/execute-context/","text":"执行上下文 ¶","text_tokens":["上下文","执行","下文"," ","¶","上下"],"title":"Execute Context","title_tokens":["context","execute"," "]},{"location":"javascript/core/execute-context/#_1","text":"","text_tokens":[],"title":"执行上下文","title_tokens":["上下文","下文","执行","上下"]},{"location":"javascript/core/promise/","text":"","text_tokens":[],"title":"Promise","title_tokens":["promise"]},{"location":"javascript/fp/composing-functions/","text":"函数组合 ¶ 函数的组合就像拼 Lego 一样，你可以从现成的积木库中取出小方块和长条去组成程序中数据需要的管道样子。 function outputs ¶ 在函数组合中，很容易发生这种情况，一个函数的输出作为下一个函数的输入传递，直到拿到最终的输出 let toUpper = msg => msg . toUpperCase () let welcome = msg => msg + 'GOOD NIGHT' let username = toUpper ( 'User' ) let welcomeUser = welcome ( username ) // 改进 let welcomeWord = msg => welcome ( toUpper ( msg )) let welcomeUser = welcomeWord ( 'User' ) 考虑一个通用的组合函数 let compose2 = ( fn2 , fn1 ) => origValue => fn2 ( fn1 ( origValue )); 注意函数的运行顺序从右向左，左边的函数在最外层最后执行。 这是大多数 FP 的库的约定俗成的规定。 需要注意的是，函数的组合需要注意类型安全，上面只是一个做作的例子。 我们可以把 2 * 2 的 Lego 放在 1 * 4 的 Lego 上面，也可以吧 1 * 4 的 Lego 放在 2 * 2 的 Lego 上面。 常规函数组合 ¶ 我们如果可以轻易的组合两个函数，那么同样的，我们也可以组合多个函数 finalValue <-- func1 <-- func2 <-- ... <-- funcN <-- origValue let compose = (... fns ) => res => { let list = [... fns ] while ( list . length > 0 ) { res = list . pop ()( res ) } return res } 这里之所以使用 list copy 一份函数数组是因为，如果不拷贝的话，返回的组合函数只能使用一次。 pop 方法会修改原数组，使得 fns 长度减小 然后我们可以对之前的函数进行组合。并且可以使用系列第三篇文章提到的 partialRight 来预设要组合的函数。 当然，也可以使用 curry 和 reverse 来从左到右的依次组合。 这和数组的 reduce() 方法很像，因此我们还有别的实现 compose 的方式 let compose = (... fns ) => res => [... fns ]. reverse (). reduce (( result , fn ) => fn ( result ), res ) 这样实现的好处是更具备可读性，也是 FPer 喜欢的方式，他的性能也和使用 for 循环类似。 但是这样实现每次迭代函数只能接收一个参数。 当然，我们也可以使用一个惰性函数封装 let compose = (... fns ) => fns . reverse (). reduce (( fn1 , fn2 ) => (... args ) => fn2 ( fn1 (... args ))) 在每次 reduce 中，我们不再计算函数的返回值，而是将函数作为输入传递给下一次迭代的函数。这样我们可以尽可能多的传递参数，而不用受到局限。 在这样实现 compose 的技巧当中，我们运用了 惰性计算 的方式。 这样实现在每次调用组合函数时，将不会调用 reduce 循环 甚至，我们还可以通过递归的方式去调用 compose2 方法 let compose = (... fns ) => { // pull off the last two arguments let [ fn1 , fn2 , ... rest ] = fns . reverse () let composedFn = (... args ) => fn2 ( fn1 ( ... args ) ) if ( rest . length == 0 ) return composedFn ; return compose ( ... rest . reverse (), composedFn ) } 递归的好处在于我们能从概念上去理解 compose pipe ¶ pipe 与 compose 相同，只不过 pipe 是从左往右 let pipe = reverseArgs ( compose ) 你可能会困惑，我们给出详细实现。 let pipe = (... fns ) => result => { let list = [... fns ] while ( list . length > 0 ) { // take the first function from the list // and execute it result = list . shift ()( result ); } return result ; }; 在某些需要 reverse 右边参数的场景，使用 pipe 会更有效率 Abstraction ¶ 抽象是一个重要的能力，他让我们的一些代码只需要写一遍。 思考 let saveComment = txt => { if ( txt != \"\" ) comments [ comments . length ] = txt ; } let trackEvent = evt => { if ( evt . name !== undefined ) { events [ evt . name ] = evt ; } } 我们可以很轻松的发现，上面代码的共性就是存储一个值 function storeData ( store , location , value ) { store [ location ] = value ; } function saveComment ( txt ) { if ( txt != \"\" ) { storeData ( comments , comments . length , txt ); } } function trackEvent ( evt ) { if ( evt . name !== undefined ) { storeData ( events , evt . name , evt ); } } 上面体现了抽象的一个原则，那就是不要重复。 但是注意抽象不要过头。 我们可以隐藏一些细节，就像黑盒子那样 但是被隐藏的细节应该是相对的，比如我们有一个相互依赖的功能 x 和 y 当我们专注 x 的时候 y 是无关紧要的 相反，我们专注 y 的时候 x 是无关紧要的。 我们抽象的目的不是隐藏细节，而是调整聚焦 。 请时刻记住，函数式编程的本质目的是写出更多可读性良好，可维护的代码。 为了分离两个概念，我们会插入一个语义级的分界，在大多数情况下，这个边界就是函数的名称。我们调用时，只在意名称和他的输出。 我们把 怎样 和 什么 分离开来 命令式编程风格说明 怎样 而声明式风格注重 什么 也就是输出，声明式关心结果，将如何实现交给别人。 声明式代码实现了从 how 到 what 的一个抽象 我们应该在声明式和命令式之间找到一个平衡。 声明式简单的将 做什么 和 如何做 分开 compose VS abstract ¶ compose 也是 声明式 的抽象 总而言之，compose 是一项非常有用的技能来将我们命令式的代码转换为可读性更好的声明式的代码。 在 FP 中 compose是极其重要的一种方式，它可能是函数间除了副作用传递数据的唯一方法。","text_tokens":["2","时候","拷贝","trackevent","func2","转换","约定俗成","写","一样","就是","使用","专注","不要","比如","来","=",")","数组","而言","相同","shift","平衡","黑盒子","文章","一遍","你","arguments","作用","能","abstraction","声明","给出","小方","而是","有效","重要","一些","how","返回","location","运用","依赖","从左到右","可","不","类似","相互","然后","多数","紧要","拿到","唯一","一次","式","可读性","+","username","最","同样","有用","功能","副作用","这样","输入","盒子","最终","实现","相互依赖","时","上面","细节","不用","这里","方式","输出","某些","关紧","要","往右","修改","有效率","这","第三","fper","开来","length","插入","可读","执行","他","怎样","msg","savecomment","1","之所以","store","partialright","pull","原则","样子","体现","(","之间","vs","fn","预设","考虑","origvalue","和","那么","*","一项","之前","依次","touppercase","上去","当然","提到","运行","welcomeword","在于","让","the","例子","也","一个","welcomeuser","if","传递数据","顺序","为了","txt","如果","x","compose2","边界","黑盒","编程","更","的","风格","abstract","具备","lego","除了",">","左边","大多","理解","pipe","在意","维护","那","接收","多","分开","管道","记住","级","概念","...","所以","user","时刻","from","总而言之","/","外层","}","调用","good",".","去","'","拼","轻易","events","简单","技能","命令式","当","fp","组合","循环","{","first","night","只","存储","curry","局限","大多数","聚焦","-","发现","别的","原","可能","如何","list","将","last","一种","中","库中","喜欢","那样"," ","\"","返回值","从","reverse","只是","计算","不再","效率","交给","左","作为","本质","需要","减小","容易","常规","像","分离","向","被","还有","关心","轻松","封装","0","name","return","应该","长条","情况","请","不过","递归","outputs","这种","使得","what","积木","funcn","技巧","是","多个","发生","良好","别人","名称","一份","与","execute","给","长度","是因为",";","¶","进行","function","!","还","方法","函数","args","off","它","两个","吧","而","小方块","结果","困惑","值","就","更好","约定","从右","找到","copy","每次","通过","但是","方块","fns","命令","4","，","写出","隐藏","这个","惰性","pop","因为","能力","我们","了","目的","for","第三篇","welcome","右边","分界","为","toupper","重复","fn2",",","现成","不会","不是","。","rest","while","过头","有","reduce","场景","value","并且","语义","调整","程序","数据","无关","把","composedfn","这是","可以","res","相反","最后","好处","comments","]","尽可","到","性能","take","做作","reverseargs","注重","三篇","抽象","做","let","compose","什么","改进","很","详细","直到","库","相对","通用","甚至","<","因此","会","and","result","思考","规定","func1","只不过","无关紧要","共性","undefined","在","it","对","参数","间","非常","[","y","evt","说明","受到","迭代","two","代码","当中","传递","极其","finalvalue","系列","尽可能","的话","只能","下","安全","类型","组成","放在","极其重要","storedata","fn1","取出","注意","从左往右"],"title":"Composing Function","title_tokens":["composing","function"," "]},{"location":"javascript/fp/composing-functions/#_1","text":"函数的组合就像拼 Lego 一样，你可以从现成的积木库中取出小方块和长条去组成程序中数据需要的管道样子。","text_tokens":["函数","积木","lego","去","你","需要","拼","像","程序","数据","小方块","样子","一样","就","可以","组合","管道","小方","组成","中","长条","现成","和","库中","。"," ","方块","从","的","取出","，"],"title":"函数组合","title_tokens":["函数","组合"]},{"location":"javascript/fp/composing-functions/#function-outputs","text":"在函数组合中，很容易发生这种情况，一个函数的输出作为下一个函数的输入传递，直到拿到最终的输出 let toUpper = msg => msg . toUpperCase () let welcome = msg => msg + 'GOOD NIGHT' let username = toUpper ( 'User' ) let welcomeUser = welcome ( username ) // 改进 let welcomeWord = msg => welcome ( toUpper ( msg )) let welcomeUser = welcomeWord ( 'User' ) 考虑一个通用的组合函数 let compose2 = ( fn2 , fn1 ) => origValue => fn2 ( fn1 ( origValue )); 注意函数的运行顺序从右向左，左边的函数在最外层最后执行。 这是大多数 FP 的库的约定俗成的规定。 需要注意的是，函数的组合需要注意类型安全，上面只是一个做作的例子。 我们可以把 2 * 2 的 Lego 放在 1 * 4 的 Lego 上面，也可以吧 1 * 4 的 Lego 放在 2 * 2 的 Lego 上面。","text_tokens":["2","执行","我们","msg","1","约定俗成","welcome","(","toupper","4","fn2","中","考虑",",","origvalue","=",")","。"," ","*","只是","touppercase","左","作为","运行","需要","welcomeword","容易","例子","也","把","一个","welcomeuser","向","这是","顺序","可以","最后","compose2","情况","做作","的","这种","lego","是",">","发生","let","左边","大多","改进","很","多数","直到","库","通用","拿到","规定","+","username","最","user",";","在","/","外层","输入","函数","good","最终",".","上面","'","输出","吧","传递","fp","约定","组合","从右","下","安全","类型","放在","night","fn1","注意","大多数","，"],"title":"function outputs","title_tokens":["outputs","function"," "]},{"location":"javascript/fp/composing-functions/#_2","text":"我们如果可以轻易的组合两个函数，那么同样的，我们也可以组合多个函数 finalValue <-- func1 <-- func2 <-- ... <-- funcN <-- origValue let compose = (... fns ) => res => { let list = [... fns ] while ( list . length > 0 ) { res = list . pop ()( res ) } return res } 这里之所以使用 list copy 一份函数数组是因为，如果不拷贝的话，返回的组合函数只能使用一次。 pop 方法会修改原数组，使得 fns 长度减小 然后我们可以对之前的函数进行组合。并且可以使用系列第三篇文章提到的 partialRight 来预设要组合的函数。 当然，也可以使用 curry 和 reverse 来从左到右的依次组合。 这和数组的 reduce() 方法很像，因此我们还有别的实现 compose 的方式 let compose = (... fns ) => res => [... fns ]. reverse (). reduce (( result , fn ) => fn ( result ), res ) 这样实现的好处是更具备可读性，也是 FPer 喜欢的方式，他的性能也和使用 for 循环类似。 但是这样实现每次迭代函数只能接收一个参数。 当然，我们也可以使用一个惰性函数封装 let compose = (... fns ) => fns . reverse (). reduce (( fn1 , fn2 ) => (... args ) => fn2 ( fn1 (... args ))) 在每次 reduce 中，我们不再计算函数的返回值，而是将函数作为输入传递给下一次迭代的函数。这样我们可以尽可能多的传递参数，而不用受到局限。 在这样实现 compose 的技巧当中，我们运用了 惰性计算 的方式。 这样实现在每次调用组合函数时，将不会调用 reduce 循环 甚至，我们还可以通过递归的方式去调用 compose2 方法 let compose = (... fns ) => { // pull off the last two arguments let [ fn1 , fn2 , ... rest ] = fns . reverse () let composedFn = (... args ) => fn2 ( fn1 ( ... args ) ) if ( rest . length == 0 ) return composedFn ; return compose ( ... rest . reverse (), composedFn ) } 递归的好处在于我们能从概念上去理解 compose","text_tokens":["惰性","pop","因为","拷贝","他","我们","-","了","func2","for","之所以","别的","第三篇","partialright","原","可能","pull","list","将","(","last","使用","fn","预设","fn2","来","中",",","origvalue","=",")","和","喜欢","不会","。","那么"," ","数组","rest","返回值","reverse","从","计算","之前","不再","依次","while","上去","作为","文章","当然","提到","reduce","arguments","减小","并且","在于","像","the","也","能","一个","composedfn","if","还有","可以","res","封装","如果","0","好处","]","return","尽可","而是","compose2","性能","返回","更","的","运用","递归","使得","三篇","具备","从左到右","funcn","不","类似","技巧","是","多个",">","let","compose","然后","理解","很","一份","接收","甚至","<","因此","一次","多","会","result","可读性","概念","func1","长度","给","...","所以","是因为","同样",";","在","/","对","这样","}","参数","进行","输入","调用","还","方法","函数","[","实现","时",".","去","args","不用","这里","受到","off","方式","迭代","two","两个","轻易","当中","而","传递","finalvalue","系列","要","尽可能","组合","的话","只能","下","修改","循环","{","这","copy","第三","每次","fper","通过","但是","length","fn1","curry","局限","fns","，","可读"],"title":"常规函数组合","title_tokens":["常规","函数","组合"]},{"location":"javascript/fp/composing-functions/#pipe","text":"pipe 与 compose 相同，只不过 pipe 是从左往右 let pipe = reverseArgs ( compose ) 你可能会困惑，我们给出详细实现。 let pipe = (... fns ) => result => { let list = [... fns ] while ( list . length > 0 ) { // take the first function from the list // and execute it result = list . shift ()( result ); } return result ; }; 在某些需要 reverse 右边参数的场景，使用 pipe 会更有效率","text_tokens":["[","实现","我们",".","是",">","while","你","场景","需要","compose","let","某些","the","可能","pipe","详细","困惑","list","右边","往右","与","execute","(","会","and","result","0","使用","]","给出","return","效率","{","有效率","参数","...","只不过","take","=","first","有效",";",")","在","。","from","length","reverseargs"," ","/","it","更","reverse","不过","的","相同","fns","shift","}","，","function","从左往右"],"title":"pipe","title_tokens":["pipe"]},{"location":"javascript/fp/composing-functions/#abstraction","text":"抽象是一个重要的能力，他让我们的一些代码只需要写一遍。 思考 let saveComment = txt => { if ( txt != \"\" ) comments [ comments . length ] = txt ; } let trackEvent = evt => { if ( evt . name !== undefined ) { events [ evt . name ] = evt ; } } 我们可以很轻松的发现，上面代码的共性就是存储一个值 function storeData ( store , location , value ) { store [ location ] = value ; } function saveComment ( txt ) { if ( txt != \"\" ) { storeData ( comments , comments . length , txt ); } } function trackEvent ( evt ) { if ( evt . name !== undefined ) { storeData ( events , evt . name , evt ); } } 上面体现了抽象的一个原则，那就是不要重复。 但是注意抽象不要过头。 我们可以隐藏一些细节，就像黑盒子那样 但是被隐藏的细节应该是相对的，比如我们有一个相互依赖的功能 x 和 y 当我们专注 x 的时候 y 是无关紧要的 相反，我们专注 y 的时候 x 是无关紧要的。 我们抽象的目的不是隐藏细节，而是调整聚焦 。 请时刻记住，函数式编程的本质目的是写出更多可读性良好，可维护的代码。 为了分离两个概念，我们会插入一个语义级的分界，在大多数情况下，这个边界就是函数的名称。我们调用时，只在意名称和他的输出。 我们把 怎样 和 什么 分离开来 命令式编程风格说明 怎样 而声明式风格注重 什么 也就是输出，声明式关心结果，将如何实现交给别人。 声明式代码实现了从 how 到 what 的一个抽象 我们应该在声明式和命令式之间找到一个平衡。 声明式简单的将 做什么 和 如何做 分开","text_tokens":["这个","时候","能力","聚焦","他","怎样","我们","了","发现","trackevent","savecomment","目的","store","如何","写","原则","体现","将","(","就是","之间","分界","重复","专注","不要","比如",",","=",")","和","不是","。","那样"," ","\"","从","过头","交给","平衡","黑盒子","有","一遍","本质","需要","value","让","像","调整","分离","语义","无关","也","把","一个","if","被","关心","可以","轻松","为了","相反","txt","命令","声明","comments","name","]","应该","x","而是","到","边界","情况","请","重要","黑盒","一些","编程","how","更","location","的","风格","注重","抽象","依赖","what","可","是",">","做","let","相互","良好","大多","别人","什么","名称","多数","很","在意","维护","那","相对","紧要","多","会","思考","分开","级","记住","式","可读性","概念","无关紧要","共性",";","undefined","功能","时刻","在","}","function","盒子","!","调用","函数","[","y","相互依赖","实现","evt","时",".","说明","上面","细节","输出","两个","events","代码","简单","而","命令式","结果","关紧","当","值","就","下","{","找到","开来","但是","length","storedata","插入","只","存储","注意","大多数","，","写出","可读","隐藏"],"title":"Abstraction","title_tokens":["abstraction"]},{"location":"javascript/fp/composing-functions/#compose-vs-abstract","text":"compose 也是 声明式 的抽象 总而言之，compose 是一项非常有用的技能来将我们命令式的代码转换为可读性更好的声明式的代码。 在 FP 中 compose是极其重要的一种方式，它可能是函数间除了副作用传递数据的唯一方法。","text_tokens":["方法","函数","我们","是","，","除了","转换","compose","它","方式","作用","代码","可能","数据","技能","也","传递","命令式","极其","传递数据","将","更好","fp","唯一","声明","一种","为","式","可读性","来","中","有用","重要","在","。","副作用","总而言之","极其重要"," ","的","一项","而言","命令","间","非常","可读","抽象"],"title":"compose VS abstract","title_tokens":["vs","compose"," ","abstract"]},{"location":"javascript/fp/manage-function-inputs/","text":"一元函数 ¶ 给函数单一的参数 这样做可以避免参数穿透，举个栗子 [ '1' , '2' , '3' ]. map ( parseInt ) // [1, NaN, NaN] 我们可以写一个帮助函数来过滤多余的参数 let unary = fn => arg => fn ( arg ) [ '1' , '2' , '3' ]. map ( unary ( parseInt )) 甚至你还可以用的更花哨 来看下面这个函数 let identity = v => v ; 这个函数看起来就像人们口中的 shit 但是只有脑子 shit 的开发者 let words = \" Now is the time for all... \" . split ( /\\s|\\b/ ) words // [\"\",\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\",\"\"] words . filter ( identity ) // [\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\"] 还不过瘾？再看下面这个 let output = ( msg , formatFn = identity ) => { msg = formatFn ( msg ) console . log ( msg ) } let upper = txt => txt . toUpperCase () output ( \"Hello World\" , upper ) // HELLO WORLD output ( \"Hello World\" ) // Hello World 一元函数还有别的方式，比如某些不能传递值参数但能传递函数的方法 如 js 中的 Promise 的 then 方法 // error promise1 . then ( foo ). then ( p2 ). then ( bar ) // success promise1 . then ( foo ). then (() => p2 ). then ( bar ) 我们可以写一个值转换函数 let constant = v => () => v promise1 . then ( foo ). then ( constant ( v )). then ( bar ) 参数的解构和聚合 ¶ 某些时候，你会有两个不兼容的函数，在无法更改声明的情况下，如何一起使用他们呢？ let foo = ( x , y ) => console . log ( x + y ) let bar = fn => fn ([ 3 , 9 ]) bar ( foo ) // error let spreadArgs = fn => argsArr => fn (... argsArr ) bar ( spreadArgs ( foo )) // 12 考虑反向操作 let gatherArgs = fn => (... argsArr ) => fn ( argsArr ) let combineFirstTwo = ([ v1 , v2 ]) => v1 + v2 [ 1 , 2 , 3 , 4 , 5 ]. reduce ( gatherArgs ( combineFirstTwo )) // 15 偏函数 ¶ let partial = ( fn ,... presetArgs ) => (... laterArgs ) => fn (... presetArgs , ... laterArgs ) js 中的 bind 也可实现上面的功能，但是 FPer 不太喜欢，因为绑定 this 上下文和偏函数应用很多时候并不同时需要这两个功能 反转参数 let reverseArgs = fn => (... args ) => fn (... args . reverse ()) let cache = {}; let cacheResult = reverseArgs ( partial ( reverseArgs ( ajax ), function onResult ( obj ){ cache [ obj . id ] = obj }) ) // later: cacheResult ( \"http://some.api/person\" , { user : CURRENT_USER_ID }) 某些场景下，你只需要反转最右边的参数，因此可以编写一个基于反转参数的函数 function partialRight ( fn ,... presetArgs ) { return reverseArgs ( partial ( reverseArgs ( fn ), ... presetArgs . reverse ()) ) } let cacheResult = partialRight ( ajax , function onResult ( obj ){ cache [ obj . id ] = obj }) // later: cacheResult ( \"http://some.api/person\" , { user : CURRENT_USER_ID } ) 当然，可以用更直接的技巧 let partialRight = ( fn ,... presetArgs ) => (... laterArgs ) => fn ( ... laterArgs , ... presetArgs ) 柯里化 ¶ 柯里化和偏函数很像，只不过柯里化每次都只接收一个参数，然后将参数传递给下一次调用，考虑如下代码 let curry = ( fn , len = fn . length ) => ( nextCurry = prevParam => nextParam => { let params = [... prevParam , nextParam ] if ( params . length >= len ) { return fn (... params ) } else { return nextCurry ( params ) } })([]) 上面的 len 不是必须要传递的参数，但是当你要 curry 的函数是不定参数的函数，则需要手动传入一个期望长度 为什么使用柯里化和偏函数？ ¶ 提高可读性 拆分会扰乱可读性的其他参数信息 更宽松的柯里化 ¶ 事实上 js 内部实现的柯里化都是这样，上面我们实现的柯里化可以理解为「strict」 let looseCurry = ( fn , len = fn . length ) => ( nextCurried = prevArgs => (... nextArgs ) => { let args = [... prevArgs , ... nextArgs ] if ( args . length >= len ) { return fn (... args ) } else { return nextCurried ( args ) } } )([]) 取消柯里化 ¶ let unCurry = fn => (... args ) => { let ret = fn for ( let arg of args ) { ret = ret ( arg ) } return ret } 需要注意的是，当你没有向取消柯里化中传入应有数量的参数，返回的仍然是一个偏函数 高级实现 ¶ 上面的柯里化和偏函数都只能按照参数的顺序，开发者不可能每次都 reverse 参数 考虑下面的代码 它使得参数的位置没那么重要 let partialProps = ( fn , presetPropsObj ) => propsObj => fn ( Object . assign ({}, presetPropsObj , propsObj )) let curryProps = ( fn , len = 1 ) => ( nextCurried = nowObjProps => ( nextObjProps = {}) => { let props = Object . assign ({}, nowObjProps , nextObjProps ) if ( Object . keys ( props ). length >= len ){ return fn ( props ) } else { return nextCurried ( props ) } } )({}) 可是有的时候我们没法更改传入的函数的参数，这使得我们不能轻易的使用解构。 幸好 js 有一个内置方法叫做 toString() 可以让我们拿到函数的参数列表，再通过类似前面 spreadArgs 的转换，实现一个函数装饰器 Point Style ¶ 当我们遇见某些函数，他们接收参数，并将参数原封不动的 转发 给另一个函数，我们可以把它砍掉 let addThree = v => v + 3 [ 1 , 2 , 3 , 4 , 5 ]. map ( v => addThree ( v )) // 优化 [ 1 , 2 , 3 , 4 , 5 ]. map ( addThree ) 如果是之前 parseInt() 的那个例子，则可以通过 unary 方法实现这一编程风格 又比如你有两个完全相反的判断 let isShortEnough = msg => msg . length <= 5 let isLongEnough = msg => msg . length > 5 // let not = fn => (... args ) => ! fn (... args ) let isLongEnough = not ( isShortEnough )","text_tokens":["2","一起","时候","nextobjprops","过瘾","loosecurry","parseint","转换","写","信息","数传","用","砍掉","使用","位置","比如","来","=",")","not","他们","props","uncurry","都","all","期望","原封不动","不能","你","log","api","能","partialprops","ajax","声明","下面","开发","这一","map","重要","返回","3","看起来","可","不","类似","current","应有","然后","装饰","拿到","内置","一次","直接","可读性","+","最","of","split","nan","9","功能","没有","prevparam","这样","实现","提高","_","则","上面","方式","某些","反转","要","v","操作","这","style","b","fper","length","islongenough","花哨","可读","laterargs","arg","基于","msg","1","可是","partialright","v2","gatherargs","tostring","(","应用","那个","fn","考虑","和","addthree","那么","同时","v1","之前","touppercase","兼容","nextcurried","避免","obj","当然","presetargs","更改","this","并","让","the","例子","也","一个","if","顺序","txt","不定","如果","x","assign","参数信息","unary","编程","formatfn","很多","更","的","风格",">","只有","then","理解","优化","完全","接收","呢","」","拆分","原封","...","user","判断","/","绑定","}","调用","p2","柯里化","聚合",".","keys","？","'","但","ret","轻易","单一","curryprops","解构","前面","prevargs","当","words","下文","{","「","传入","开发者","仍然","只","curry","反向","promise","别的","如何","else","可能","console","没","遇见","将","一元","output","中","喜欢"," ","\"","error","reverse","需要","事实上","另","像","必须","多余","向","还有","return","情况","5","按照","later","不过","高级","使得","上下文","举个","12","技巧","其他","nowobjprops","起来","是","转发","15","id","传递函数","nextparam","combinefirsttwo","bar","手动","给","长度","presetpropsobj","params",";","cacheresult","¶","success","is","function","upper","!","还","方法","函数","为什么","不太","args","参数传递","它","point","两个","宽松","值","就","js","看","每次","如","通过","bind","但是","identity","列表","\\","len","partial","4","，","promise1","这个","因为","我们","幸好","some","for",":","http","|","右边","为","上下",",","object","不是","。","器","口中","有","reduce","场景","isshortenough","propsobj","shit","nextargs","叫做","cache","constant","把","来看","可以","相反","]","一元函数","偏","onresult","time","内部","strict","reverseargs","argsarr","now","帮助","做","let","hello","再","什么","穿透","很","过滤","无法","脑子","甚至","因此","扰乱","world","<","会","spreadargs","只不过","不动","如下","事实","在","nextcurry","参数","数量","没法","[","y","又","栗子","看起","person","取消","代码","filter","传递","foo","人们","只能","编写","s","下","注意"],"title":"Manage Function Inputs","title_tokens":[" ","inputs","function","manage"]},{"location":"javascript/fp/manage-function-inputs/#_1","text":"给函数单一的参数 这样做可以避免参数穿透，举个栗子 [ '1' , '2' , '3' ]. map ( parseInt ) // [1, NaN, NaN] 我们可以写一个帮助函数来过滤多余的参数 let unary = fn => arg => fn ( arg ) [ '1' , '2' , '3' ]. map ( unary ( parseInt )) 甚至你还可以用的更花哨 来看下面这个函数 let identity = v => v ; 这个函数看起来就像人们口中的 shit 但是只有脑子 shit 的开发者 let words = \" Now is the time for all... \" . split ( /\\s|\\b/ ) words // [\"\",\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\",\"\"] words . filter ( identity ) // [\"Now\",\"is\",\"the\",\"time\",\"for\",\"all\",\"...\"] 还不过瘾？再看下面这个 let output = ( msg , formatFn = identity ) => { msg = formatFn ( msg ) console . log ( msg ) } let upper = txt => txt . toUpperCase () output ( \"Hello World\" , upper ) // HELLO WORLD output ( \"Hello World\" ) // Hello World 一元函数还有别的方式，比如某些不能传递值参数但能传递函数的方法 如 js 中的 Promise 的 then 方法 // error promise1 . then ( foo ). then ( p2 ). then ( bar ) // success promise1 . then ( foo ). then (() => p2 ). then ( bar ) 我们可以写一个值转换函数 let constant = v => () => v promise1 . then ( foo ). then ( constant ( v )). then ( bar )","text_tokens":["2","这个","promise","我们","arg","过瘾","parseint","msg","转换","1","for","别的","写","|","console","用","(","一元","fn","比如","output","来","中",",","=",")"," ","\"","口中","error","touppercase","all","避免","不能","你","shit","log","constant","像","the","能","一个","多余","来看","还有","可以","txt","下面","开发","]","一元函数","map","unary","time","formatfn","更","3","的","举个","now","看起来","不","起来","帮助","做",">","只有","let","传递函数","hello","then","再","穿透","bar","过滤","脑子","甚至","world","给","...",";","split","nan","/","success","is","这样","参数","}","upper","还","方法","函数","[","p2",".","，","？","栗子","'","看起","但","方式","单一","某些","filter","传递","值","v","就","foo","人们","words","s","{","js","看","b","如","开发者","但是","identity","\\","花哨","promise1"],"title":"一元函数","title_tokens":["函数","一元","一元函数"]},{"location":"javascript/fp/manage-function-inputs/#_2","text":"某些时候，你会有两个不兼容的函数，在无法更改声明的情况下，如何一起使用他们呢？ let foo = ( x , y ) => console . log ( x + y ) let bar = fn => fn ([ 3 , 9 ]) bar ( foo ) // error let spreadArgs = fn => argsArr => fn (... argsArr ) bar ( spreadArgs ( foo )) // 12 考虑反向操作 let gatherArgs = fn => (... argsArr ) => fn ( argsArr ) let combineFirstTwo = ([ v1 , v2 ]) => v1 + v2 [ 1 , 2 , 3 , 4 , 5 ]. reduce ( gatherArgs ( combineFirstTwo )) // 15","text_tokens":["2","兼容","一起","函数","时候","y","[","有","12","不","反向","reduce",".","？","更改",">","你","15","let","1","log","两个","某些","combinefirsttwo","如何","v2","bar","console","无法","gatherargs","foo","呢","声明","(","会","spreadargs","下","使用","]","操作","+","x","fn","4","...",",","考虑","情况","=",")","9","在","5","/"," ","3","他们","error","的","v1","argsarr","，"],"title":"参数的解构和聚合","title_tokens":["和","聚合","的","解构","参数"]},{"location":"javascript/fp/manage-function-inputs/#_3","text":"let partial = ( fn ,... presetArgs ) => (... laterArgs ) => fn (... presetArgs , ... laterArgs ) js 中的 bind 也可实现上面的功能，但是 FPer 不太喜欢，因为绑定 this 上下文和偏函数应用很多时候并不同时需要这两个功能 反转参数 let reverseArgs = fn => (... args ) => fn (... args . reverse ()) let cache = {}; let cacheResult = reverseArgs ( partial ( reverseArgs ( ajax ), function onResult ( obj ){ cache [ obj . id ] = obj }) ) // later: cacheResult ( \"http://some.api/person\" , { user : CURRENT_USER_ID }) 某些场景下，你只需要反转最右边的参数，因此可以编写一个基于反转参数的函数 function partialRight ( fn ,... presetArgs ) { return reverseArgs ( partial ( reverseArgs ( fn ), ... presetArgs . reverse ()) ) } let cacheResult = partialRight ( ajax , function onResult ( obj ){ cache [ obj . id ] = obj }) // later: cacheResult ( \"http://some.api/person\" , { user : CURRENT_USER_ID } ) 当然，可以用更直接的技巧 let partialRight = ( fn ,... presetArgs ) => (... laterArgs ) => fn ( ... laterArgs , ... presetArgs )","text_tokens":["因为","laterargs","时候","基于","some","partialright",":","http","右边","用","(","应用","fn","上下","中",",","=",")","和","喜欢"," ","\"","reverse","同时","obj","当然","presetargs","场景","你","this","并","需要","cache","api","也","一个","可以","ajax","]","return","偏","onresult","很多","更","reverseargs","later","的","上下文","可","不","技巧","current",">","let","id","因此","直接","...","最","user",";","cacheresult","功能","/","绑定","}","参数","function","函数","[","实现",".","不太","_","args","上面","person","两个","某些","反转","编写","下文","下","{","这","js","fper","bind","但是","只","partial","，"],"title":"偏函数","title_tokens":["函数","偏"]},{"location":"javascript/fp/manage-function-inputs/#_4","text":"柯里化和偏函数很像，只不过柯里化每次都只接收一个参数，然后将参数传递给下一次调用，考虑如下代码 let curry = ( fn , len = fn . length ) => ( nextCurry = prevParam => nextParam => { let params = [... prevParam , nextParam ] if ( params . length >= len ) { return fn (... params ) } else { return nextCurry ( params ) } })([]) 上面的 len 不是必须要传递的参数，但是当你要 curry 的函数是不定参数的函数，则需要手动传入一个期望长度","text_tokens":["都","函数","[","柯里化","期望",".","是",">","你","则","上面","参数传递","let","然后","需要","像","nextparam","代码","必须","else","传递","很","一个","if","接收","当","要","将","数传","一次","(","手动","不定","下","]","return","fn","给","{","长度","考虑","只不过","偏",",","如下","=","每次","params","...","传入","和",")","nextcurry","不是","但是","length"," ","只","len","不过","curry","prevparam","}","的","参数","，","调用"],"title":"柯里化","title_tokens":["柯里化"]},{"location":"javascript/fp/manage-function-inputs/#_5","text":"提高可读性 拆分会扰乱可读性的其他参数信息","text_tokens":["扰乱","会","拆分"," ","可读性","提高","的","其他","参数信息","参数","信息","可读"],"title":"为什么使用柯里化和偏函数？","title_tokens":["和","函数","柯里化","使用","为什么","什么","？","偏"]},{"location":"javascript/fp/manage-function-inputs/#_6","text":"事实上 js 内部实现的柯里化都是这样，上面我们实现的柯里化可以理解为「strict」 let looseCurry = ( fn , len = fn . length ) => ( nextCurried = prevArgs => (... nextArgs ) => { let args = [... prevArgs , ... nextArgs ] if ( args . length >= len ) { return fn (... args ) } else { return nextCurried ( args ) } } )([])","text_tokens":["都","nextcurried","[","柯里化","实现","我们",".","是",">","loosecurry","args","上面","nextargs","let","事实上","理解","else","prevargs","if","可以","」","(","为","]","return","fn","{","js",",","「","...","=","事实",")","内部","strict","length"," ","len","的","这样","}","，"],"title":"更宽松的柯里化","title_tokens":["柯里化","的","更","宽松"]},{"location":"javascript/fp/manage-function-inputs/#_7","text":"let unCurry = fn => (... args ) => { let ret = fn for ( let arg of args ) { ret = ret ( arg ) } return ret } 需要注意的是，当你没有向取消柯里化中传入应有数量的参数，返回的仍然是一个偏函数","text_tokens":["函数","柯里化","arg","是",">","你","args","应有","需要","let","for","ret","取消","一个","向","当","(","return","fn","{","参数","...","中","偏","=","传入","of",")","返回","没有"," ","仍然","的","注意","}","，","数量","uncurry"],"title":"取消柯里化","title_tokens":["柯里化","取消"]},{"location":"javascript/fp/manage-function-inputs/#_8","text":"上面的柯里化和偏函数都只能按照参数的顺序，开发者不可能每次都 reverse 参数 考虑下面的代码 它使得参数的位置没那么重要 let partialProps = ( fn , presetPropsObj ) => propsObj => fn ( Object . assign ({}, presetPropsObj , propsObj )) let curryProps = ( fn , len = 1 ) => ( nextCurried = nowObjProps => ( nextObjProps = {}) => { let props = Object . assign ({}, nowObjProps , nextObjProps ) if ( Object . keys ( props ). length >= len ){ return fn ( props ) } else { return nextCurried ( props ) } } )({}) 可是有的时候我们没法更改传入的函数的参数，这使得我们不能轻易的使用解构。 幸好 js 有一个内置方法叫做 toString() 可以让我们拿到函数的参数列表，再通过类似前面 spreadArgs 的转换，实现一个函数装饰器","text_tokens":["时候","nextobjprops","我们","幸好","转换","1","可是","可能","else","没","tostring","(","使用","位置","fn","考虑",",","=","和",")","object","。","那么"," ","器","reverse","props","都","nextcurried","有","不能","更改","propsobj","叫做","让","一个","if","partialprops","顺序","可以","下面","开发","return","assign","偏","重要","按照","的","使得","不","类似","nowobjprops",">","let","装饰","再","拿到","内置","spreadargs","presetpropsobj","}","参数","没法","函数","方法","柯里化","实现",".","keys","上面","它","轻易","代码","curryprops","解构","前面","只能","{","这","js","传入","每次","通过","开发者","length","列表","len","，"],"title":"高级实现","title_tokens":["实现","高级"]},{"location":"javascript/fp/manage-function-inputs/#point-style","text":"当我们遇见某些函数，他们接收参数，并将参数原封不动的 转发 给另一个函数，我们可以把它砍掉 let addThree = v => v + 3 [ 1 , 2 , 3 , 4 , 5 ]. map ( v => addThree ( v )) // 优化 [ 1 , 2 , 3 , 4 , 5 ]. map ( addThree ) 如果是之前 parseInt() 的那个例子，则可以通过 unary 方法实现这一编程风格 又比如你有两个完全相反的判断 let isShortEnough = msg => msg . length <= 5 let isLongEnough = msg => msg . length > 5 // let not = fn => (... args ) => ! fn (... args ) let isLongEnough = not ( isShortEnough )","text_tokens":["!","2","方法","函数","[","又","有","实现","我们","原封不动",".","是",">","转发","你","isshortenough","parseint","则","msg","并","let","args","1","另","它","两个","某些","优化","例子","把","一个","完全","接收","当","遇见","可以","将","v","砍掉","相反","<","(","如果","]","原封","那个","这一","+","比如","给","4","fn","...","不动",",","map","=","unary","编程",")","通过","判断","addthree","5","length","/"," ","3","他们","not","的","风格","之前","参数","islongenough","，"],"title":"Point Style","title_tokens":["style","point"," "]},{"location":"javascript/fp/nature-function/","text":"学习函数式编程，我们需要清晰地意识到 函数的定义不是通过 function 关键字声明一个函数 函数式编程本质上是通过使用 函数 让代码变得 函数化 那么，函数的 本质 到底是什么？ 什么是函数 ¶ 常规定义 ¶ 一段可以执行一次或者多次的代码片段，这些片段使用 function 关键字声明 数学角度 ¶ 一个函数包含一个准确的 输入 和一个准确的 输出 输入输出可以有 一个或多个 值，但是不同的输入，输出不同 我们也可以把「函数」叫做「映射」 我们把含有 n 个输入的函数叫做「n 元函数」 函数式编程和「面向过程」编程的区别 ¶ 函数式编程中的函数有 稳定 的输入输出 面向过程编程则不一定，可能 没有 输出 js 中的函数的能力 ¶ 解构赋值 ¶ 解构赋值可以让我们取出并且命名参数对象中的一部分 let fn = ({ x , y } = {}) => { // 这种写法可以不传参数 // 如果不赋一个空对象则至少需要传递一个参数 } 当返回值有多个的时候，使用解构可以让数据流更加明显和清晰 一个函数最好只有一个 return ，当有多个 if() {} else {} 的时候，可以用临时变量存储返回值，最后返回它 开发人员更喜欢显式代码，包括显式的输入输出，不喜欢隐含的修改外部变量，因为这会让可读性变差和造成副作用 闭包 ¶ 应用到偏函数和 curry 上 匿名函数 ¶ 尽可能的给匿名函数命名，如果你需要跟踪 堆栈调用情况 调试 bug 的话 如果函数入参是匿名函数，调用 fn.name 会返回一个空字符串 匿名函数命名可以用来 自引用 递归 在不知道如何给匿名函数命名的时候，原因只可能是因为你不清楚这个函数的用途或是这个函数过于抽象 可以在函数名前面加上 todo 确保未来会更新函数命名 为函数命名是一个很值得的交易，when easy coding, pain read 惰性表达式 ¶ 后面的文章会说到。","text_tokens":["字符","这个","when","惰性","知道","执行","临时","时候","因为","能力","闭包","赋值","稳定","原因","我们","值得","清楚","人员","或者","可能","else","包括","如何","不传","更新","用","(","片段","应用","表达式","使用","到底","为","fn","中",",","=","和",")","喜欢","不是","。","那么"," ","多次","部分","返回值","n","这会","当有","有","过于","文章","本质","你","外部","需要","叫做","说","常规","并且","引用","变差","让","不赋","造成","作用","或","数据","或是","也","把","一个","变量","if","可以","准确","最后","声明","自","easy","如果","bug","name","开发","上","return","变得","尽可","x","匿名","到","偏","情况","编程","返回","更","写法","达式","的","递归","这种","抽象","明显","包含","参是","不","命名","堆栈","是","关键","多个",">","数学","清晰","只有","let","不同","一定","角度","一部","什么","个","定义","显式","用途","更加","很","输入输出","开发人员","read","」","一次","名","会","意识","最好","式","一部分","可读性","过程","给","区别","是因为","隐含","地","关键字","化","没有","副作用","/","在","todo","空","¶","跟踪","参数","}","输入","function","调用","交易","函数","这些","y","发人","后面",".","含有","？","入","学习","则","字符串","它","coding","输出","数据流","代码","元","调试","解构","前面","至少","传递","用来","pain","加上","当","值","确保","尽可能","的话","修改","{","js","「","对象","通过","但是","映射","存储","只","一段","curry","未来","取出","面向","表达","，","可读"],"title":"Nature Function","title_tokens":["nature","function"," "]},{"location":"javascript/fp/nature-function/#_1","text":"","text_tokens":[],"title":"什么是函数","title_tokens":["函数","什么","是"]},{"location":"javascript/fp/nature-function/#_2","text":"一段可以执行一次或者多次的代码片段，这些片段使用 function 关键字声明","text_tokens":["可以","执行","一次","片段","这些","关键字","声明","多次","使用","代码","或者"," ","一段","的","关键","，","function"],"title":"常规定义","title_tokens":["常规","定义"]},{"location":"javascript/fp/nature-function/#_3","text":"一个函数包含一个准确的 输入 和一个准确的 输出 输入输出可以有 一个或多个 值，但是不同的输入，输出不同 我们也可以把「函数」叫做「映射」 我们把含有 n 个输入的函数叫做「n 元函数」","text_tokens":["函数","包含","有","我们","含有","多个","叫做","不同","输出","元","或","输入","个","也","输入输出","一个","把","值","可以","准确","」","「","和","但是","映射"," ","的","，","n"],"title":"数学角度","title_tokens":["角度","数学"]},{"location":"javascript/fp/nature-function/#_4","text":"函数式编程中的函数有 稳定 的输入输出 面向过程编程则不一定，可能 没有 输出","text_tokens":["函数","有","不","稳定","则","一定","输出","可能","输入","输入输出","式","过程","中","编程","没有"," ","的","面向","，"],"title":"函数式编程和「面向过程」编程的区别","title_tokens":["编程","和","」","函数","式","的","过程","面向","区别","「"]},{"location":"javascript/fp/nature-function/#js","text":"","text_tokens":[],"title":"js 中的函数的能力","title_tokens":["中","函数","能力"," ","的","js"]},{"location":"javascript/fp/nature-function/#_5","text":"解构赋值可以让我们取出并且命名参数对象中的一部分 let fn = ({ x , y } = {}) => { // 这种写法可以不传参数 // 如果不赋一个空对象则至少需要传递一个参数 } 当返回值有多个的时候，使用解构可以让数据流更加明显和清晰 一个函数最好只有一个 return ，当有多个 if() {} else {} 的时候，可以用临时变量存储返回值，最后返回它 开发人员更喜欢显式代码，包括显式的输入输出，不喜欢隐含的修改外部变量，因为这会让可读性变差和造成副作用","text_tokens":["临时","时候","因为","赋值","我们","人员","包括","else","不传","用","(","使用","fn","中",",","=",")","和","喜欢","部分"," ","返回值","这会","当有","有","外部","需要","并且","变差","让","不赋","造成","作用","数据","一个","变量","if","可以","最后","如果","开发","return","x","返回","更","写法","的","这种","明显","命名","不",">","多个","只有","清晰","let","一部","显式","更加","输入输出","开发人员","最好","一部分","可读性","隐含","副作用","/","空","}","参数","输入","函数","y","发人","则","它","输出","数据流","代码","解构","至少","传递","当","修改","{","对象","存储","取出","，","可读"],"title":"解构赋值","title_tokens":["赋值","解构"]},{"location":"javascript/fp/nature-function/#_6","text":"应用到偏函数和 curry 上","text_tokens":["和","函数","应用"," ","上","curry","到","偏"],"title":"闭包","title_tokens":["闭包"]},{"location":"javascript/fp/nature-function/#_7","text":"尽可能的给匿名函数命名，如果你需要跟踪 堆栈调用情况 调试 bug 的话 如果函数入参是匿名函数，调用 fn.name 会返回一个空字符串 匿名函数命名可以用来 自引用 递归 在不知道如何给匿名函数命名的时候，原因只可能是因为你不清楚这个函数的用途或是这个函数过于抽象 可以在函数名前面加上 todo 确保未来会更新函数命名 为函数命名是一个很值得的交易，when easy coding, pain read","text_tokens":["字符","这个","when","知道","交易","函数","时候","因为","参是","命名","不","堆栈","原因","过于",".","是","入","你","值得","需要","字符串","清楚","引用","coding","调试","可能","如何","或是","前面","用途","用来","很","pain","一个","加上","read","可以","自","更新","确保","尽可能","的话","如果","会","bug","名","name","easy","为","尽可","fn","给","匿名","是因为",",","情况","返回","在","todo"," ","空","只","的","抽象","未来","跟踪","递归","，","调用"],"title":"匿名函数","title_tokens":["函数","匿名"]},{"location":"javascript/fp/nature-function/#_8","text":"后面的文章会说到。","text_tokens":["说","会","。","文章","的","后面","到"],"title":"惰性表达式","title_tokens":["达式","惰性","表达","表达式"]},{"location":"javascript/fp/side-effect/","text":"一个没有副作用的代码是不存在的。但是可以尽可能的限制。 举个栗子 let y ; let foo = x => { y = x * 2 ; } foo ( 3 ); // 改进 let foo = x => x * 2 ; let y = foo ( 3 ); 很明显，前者是 因果 不相关的，我们需要读 foo 的内部代码，才能知道 y 被修改了。因此可读性很差，这就是副作用。 函数引用了一个自身之外的「自由变量」时，副作用就产生了。 需要注意的是，并不是所有的「自由变量」都是负面的，但是应当要关注这些自由变量。 Side Effects ¶ 副作用意味着代码的读者需要「人肉编译」才能跟踪某个变量的变化。 副作用的产生可能是因为一个返回值中的引用，例如引用的 state 发生了 Mutation「突变」。 因此，所有影响到函数输出的因素都应该作为函数的输入。 固定状态 ¶ 一个约定俗称的规矩是从不覆盖函数的实现，因此函数作为自由变量引用，可以当做引用了一个常量。 考虑两点，当有一个函数时 给定输入，输出是不变的吗？ 引入的自由变量每次都是不变的吗？程序中有其他地方可能会修改这个自由变量吗？ 偶然性 ¶ 随机函数也会产生副作用。 大部分语言中的随机都是采用伪随机算法，有些语言提供了起始值，因此给定相同的起始值生成的随机序列都是一致的。 但是 js 没有提供这项功能，因此 js 中偶然性也是副作用的一种 IO Effects ¶ 最常见的副作用就是 IO 输入输出 比如 DOM，当修改 DOM 之后，事实上就已经产生了副作用 再比如两个依赖自由变量的 ajax，当异步请求的时候，如果回调执行的 顺序 不一致，可能会产生 bug，但是我们难以捕捉他们。 因为很多时候，这些 bug 只会带来 ui 渲染上的不一致，或者只是简单的状态改变。 制裁副作用 ¶ 如果不得不通过副作用修改状态，制裁方式之一是 幂等性 幂等性 ¶ 首先给出一个在「数学」上和「编程」上都不属于幂等的例子 let updateCounter = obj => { if ( obj . count < 10 ) { obj . count ++ ; return true ; } return false ; }; 数学上的幂等性 ¶ 从数学角度来看，幂等性意味着在第一次调用后输出不会改变的操作。 更清晰的例子。 f(x) = f(f(x)) = f(f(f(x))) 在 js 内置的 Math 库中，下面这些例子显然是幂等性的。 Math.min(..) Math.max(..) Math.round(..) Math.floor(..) Math.ceil(..) 我们也可以自己定义一些幂等性的运算 let toPower0 = x => Math . pow ( x , 0 ); let snapUp3 = x => x - ( x % 3 ) + ( x % 3 > 0 && 3 ); toPower0 ( 3 ) == toPower0 ( toPower0 ( 3 )); // true snapUp3 ( 3.14 ) == snapUp3 ( snapUp3 ( 3.14 )); // true 数学角度的幂等性并不仅仅局限于数学运算，js 中基本类型强制转换也是幂等的 let x = 42 , y = 'hello' ; String ( x ) === String ( String ( x )); // true Boolean ( y ) === Boolean ( Boolean ( y )); // true 或是 let upper = v => v . toUpperCase (); let lower = v => v . toLowerCase (); let str = 'Hello World' ; upper ( str ) == upper ( upper ( str )); // true lower ( str ) == lower ( lower ( str ) ); // true 总而言之，幂等性就是满足下列公式的数学表达式 f(x) = f(f(x)) 程序中的幂等性 ¶ 程序中的幂等性没有那么正式，换句话说，当第一次调用 f(x) 与第二次调用的返回值没有区别，从程序的角度，我们认为是幂等的。 就像在 Http 的 RESTapi 中，PUT 被定义为更新服务器资源，当发送多个带有相同参数的 PUT 时，服务器资源都具备相同的结果状态。 // idempotent:幂等 obj . count = 2 ; a [ a . length - 1 ] = 42 ; person . name = upper ( person . name ); // non-idempotent:非幂等 obj . count ++ ; a [ a . length ] = 42 ; person . lastUpdated = Date . now (); 因此，幂等性的定义是，在第一次调用之后，后续怎样的重复调用，程序状态都不会再改变。非幂等性在每次调用都会更改程序状态。 那么在 DOM 更新中如何表现呢？ let hist = document . getElementById ( 'orderHistory' ); // idempotent: hist . innerHTML = order . historyText ; // non-idempotent: let update = document . createTextNode ( order . latestUpdate ); hist . appendChild ( update ); // 隐式的，当前状态是下一状态的一部分 我们并不能总是幂等的定义我们的操作，但这有利于减少副作用的影响。 Pure Bliss ¶ 一个没有副作用的函数称之为 Pure Function ，也就是「纯」函数 纯函数在编程角度来说是幂等的，因为没有任何副作用。 let add = ( a , b ) => a + b 可以发现所有的输入输出都是直接的，没有引用任何自由变量，多次调用 add 函数与只调用一次没有任何区别。所以 add 是一个幂等纯函数。 但是在数学意义中，不是所有纯函数都是幂等的，因为的返回值可能不能作为他们的输入。 let calculateAverage = nums => { let sum = 0 ; for ( let num of nums ) { sum += num ; } return sum / nums . length ; } calculateAverage ([ 1 , 2 , 4 , 7 , 11 , 16 , 22 ]); // 9 在这个例子中，返回值并非一个数组，因此不可能「recall」 calculateAverage(calculateAverage(nums)) 纯函数也可以引用自由变量和其他函数，前提是自由变量没有副作用。 const PI = 3.141592 ; let circleArea = radius => PI * radius * radius ; let cylinderVolume = ( radius , height ) => height * circleArea ( radius ); 另一个纯函数引用自由变量的例子就是 闭包 虽然 circleArea 是一个函数对象，我们可以给他添加一个可能「突变」的属性，但是不影响 circleArea 调用。因此只要不重新分配函数，就没有副作用。 验证纯函数的另一种方式是，相同的输入永远产生相同的输出。 如果一个函数给相同的输入产生不同的输出，那么就不是一个纯函数。 在 js 中，写带副作用的代码实在是太容易了。 Purely Relative ¶ let rememberNumbers = nums => fn => fn ( nums ); let list = [ 1 , 2 , 3 , 4 , 5 ]; let simpleList = rememberNumbers ( list ); simpleList 像一个纯函数，但实际上并不是， let median = nums => ( nums [ 0 ] + nums [ nums . length - 1 ]) / 2 ; simpleList ( median ); // 3 list . push ( 6 ); simpleList ( median ); // 3.5 显而易见，当我们修改输入引用的自由变量，返回值就发生了变化。 可以通过复制数组使得 simpleList 变成纯函数。 let rememberNumbers = nums => { // make a copy of the array nums = [... nums ]; return fn => fn ( nums ); } 但是这可能会导致一个更隐蔽的副作用潜伏。 let list = [ 1 , 2 , 3 , 4 , 5 ]; // make `list[0]` be a getter with a side effect Object . defineProperty ( list , 0 , { get : () => { console . log ( \"[0] was accessed!\" ); return 1 ; } } ); let simpleList = rememberNumbers ( list ); // [0] was accessed! 这个副作用看起来无法避免，但是我们可以将它从函数内部转移到调用函数的地方。 let rememberNumbers = (... nums ) => fn => fn ( nums ) let simpleList = rememberNumbers (... list ); // [0] was accessed! 这样做的好处是，rememberNumbers 是纯函数，造成副作用的原因在于 ... 纯函数 + 不纯函数 = 不纯函数 ¶ // yes, a silly contrived example :) let firstValue = nums => nums [ 0 ]; let lastValue = nums => firstValue ( nums . reverse ()); simpleList ( lastValue ); // 5 console . log ( list ); // [1,2,3,4,5] -- OK! simpleList ( lastValue ); // 1 reverse() 方法其实修改了原本的数组，只不过修改的是内部引用的数组。 怎样改进呢？ let rememberNumbers = (... nums ) => fn => fn ([... nums ]); 可以通过传递一个数组拷贝来避免接受该数组的函数在调用时改变原数组。 但是仍然无法保证传递一个不纯的函数。因此，我们只能尽量的让函数 pure，为了可读性。 Referential transparency ¶ 判断一个函数是否纯净的第三种方式，是 Referential transparency 「引用透明性」。如果将值替换函数调用的那一行，行为上没有任何变化，那么该函数就是纯函数。 也就是说，在一个程序当中，我们用一个 val 代替了一个函数调用，在执行上我们看不出任何区别。 如果一个函数存在副作用，但是在程序的任何地方都没有被观察到或者被依赖，那么他还具备「引用透明性」吗？ let sum ; let calculateAverage = nums => { sum = 0 ; for ( let num of nums ) { sum += num ; } return sum / nums . length ; } let numbers = [ 1 , 2 , 4 , 7 , 11 , 16 , 22 ]; let avg = calculateAverage ( numbers ); 不得不说它和纯函数几乎没有区别，但是如何看待他取决于你自己 Performance Effects ¶ 观察这个函数 let cache = []; let specialNumber = n => { // if we've already calculated this special number, // skip the work and just return it from the cache if ( cache [ n ] !== undefined ) { return cache [ n ]; } var x = 1 , y = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { x += i % 2 ; y += i % 3 ; } cache [ n ] = ( x * y ) / ( n + 1 ); return cache [ n ]; } specialNumber ( 6 ); // 4 specialNumber ( 42 ); // 22 specialNumber ( 1 E6 ); // 500001 specialNumber ( 987654321 ); // 493827162 我们通过一个缓存来优化多次调用这个函数的性能，但是这看起来很蠢，你可能认为他是纯函数，但是我不这么认为。 let specialNumber = ( function memoization (){ let cache = []; return function specialNumber ( n ){ // if we've already calculated this special number, // skip the work and just return it from the cache if ( cache [ n ] !== undefined ) { return cache [ n ]; } let x = 1 , y = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { x += i % 2 ; y += i % 3 ; } cache [ n ] = ( x * y ) / ( n + 1 ); return cache [ n ]; }; })(); 我们通过 IIFE 来 确保 函数的其他部分不能访问到 cache，而不仅仅是 不允许 在这里至关重要的一点，就是我们能确保，而不仅仅是心灵约定。 Mentally Transparent ¶ 虽然有时将常数和函数调用替换对函数的执行没有影响，但是我们不应该这么做。 不仅仅是因为数据可能是变化的，还为了更好地可读性。 读者会不断地心算一个永远不会变的结果，但是纯函数能够减少这样的花销。 函数提纯 ¶ 可以将副作用从函数内部转移到调用函数的地方，这看起来更明显。 举个栗子 let addMaxNum = arr => { let maxNum = Math . max (... arr ); arr . push ( maxNum + 1 ); } let nums = [ 4 , 2 , 7 , 3 ]; addMaxNum ( nums ); // [4,2,7,3,8] //改进 let addMaxNum = arr => Math . max (... arr ) + 1 ; let nums = [ 4 , 2 , 7 , 3 ]; nums . push ( addMaxNum ( nums )); // [4,2,7,3,8] 我们可以将 addMaxNum 折叠起来了，我们不需要再去观察 addMaxNum 的内部实现。 另外一种方式是采用 immutable 数据结构来实现，我会在下一篇文章说明 我们还可以从这几个角度来分析。 自由变量 ¶ 如果一个函数是不纯的，并且引用了外部的自由变量，我们可以使用作用域来封装。 let users = {}; let fetchUserData = userId => { ajax ( `http://some.api/user/ ${ userId } ` , function onUserData ( user ){ users [ userId ] = user ; }); } // 改进 function safer_fetchUserData ( userId , users ) { // simple, naive ES6+ shallow object copy, could also // be done w/ various libs or frameworks users = Object . assign ( {}, users ); fetchUserData ( userId ); // return the copied state return users ; // *********************** // original untouched impure function: function fetchUserData ( userId ) { ajax ( `http://some.api/user/ ${ userId } ` , function onUserData ( user ){ users [ userId ] = user ; } ); } } 函数的纯度与否其实是由外部决定的，内部也可以适当的采用一些不纯的技术，比如为了性能使用 cache 缓存结果。 但是我们的目标是尽可能的减少副作用。 掩盖 ¶ 有些时候，不纯的函数来自于第三方库，你无法直接将自由变量封装在函数的作用域内 let nums = []; let smallCount = 0 ; let largeCount = 0 ; function generateMoreRandoms ( count ) { for ( let i = 0 ; i < count ; i ++ ) { let num = Math . random (); if ( num >= 0.5 ) { largeCount ++ ; } else { smallCount ++ ; } nums . push ( num ); } } 我们可以通过 brute-force 算法执行以下步骤来改进： 保存未被影响的当前状态 设置初始输入状态 运行不纯的函数 捕获副作用 恢复原状态 返回副作用状态 function safer_generateMoreRandoms ( count , initial ) { // (1) Save original state let orig = { nums , smallCount , largeCount }; // (2) Set up initial pre-side effects state nums = [... initial . nums ]; smallCount = initial . smallCount ; largeCount = initial . largeCount ; // (3) Beware impurity! generateMoreRandoms ( count ); // (4) Capture side effect state let sides = { nums , smallCount , largeCount }; // (5) Restore original state nums = orig . nums ; smallCount = orig . smallCount ; largeCount = orig . largeCount ; // (6) Expose side effect state directly as output return sides ; } 需要注意的是 掩盖 手段只有在处理同步代码时才有效。 规避 ¶ 当我们要处理的副作用是一个 突变 的输入导致的，「数组」或是「对象」我们可以这样做 function handleInactiveUsers ( userList , dateCutoff ) { for ( let i = 0 ; i < userList . length ; i ++ ) { if ( userList [ i ]. lastLogin == null ) { // remove the user from the list userList . splice ( i , 1 ); i -- ; } else if ( userList [ i ]. lastLogin < dateCutoff ) { userList [ i ]. inactive = true ; } } } 先做一个深拷贝 function safer_handleInactiveUsers ( userList , dateCutoff ) { // make a copy of both the list and its user objects let copiedUserList = userList . map ( function mapper ( user ){ // copy a `user` object return Object . assign ( {}, user ); }); // call the original function with the copy handleInactiveUsers ( copiedUserList , dateCutoff ); // expose the mutated list as a direct output return copiedUserList ; } this Revisited ¶ 有的时候 this 作为一个隐式的输入也可能导致副作用 let ids = { prefix : \"_\" , generate () { return this . prefix + Math . random (); } }; 我们可以创建一个包装函数来传入可读的上下文 let safer_generate = context => ids . generate . call ( context ); safer_generate ({ prefix : \"foo\" }); // \"foo0.8988802158307285\" 本质上，我们并没有消除副作用的影响，而是尽可能的做到在运行时能将 bug 定位在仍然使用副作用的代码上。","text_tokens":["2","put","direct","时候","改变","拷贝","添加","已经","服务","闭包","第三种","转换","order","意味","定位","ui","用","很差","就是","三方","使用","数据结构","隐蔽","比如","来","immutable","=","折叠",")","资源","expose","数组","他们","avg","而言","相同","string","updatecounter","n","都","观察","公式","时能","special","文章","不能","你","认为","也就是说","&&","作用域","引用","log","api","作用","不出","代替","ok","不变","能","透明","users","两点","ajax","尽量","下面","was","max","pre","上","给出","493827162","提纯","而是","map","有效","重要","一些","返回","就是说","3","初始","original","验证","依赖","产生","看起来","objects","transparent","偶然性","语言","接受","不","largecount","例如","memoization","第一","mutated","数学","第一次","不同","基本","易见","重新分配","a","内置","一次","直接","地方","createtextnode","可读性","+","换句话说","称之为","一行","区别","很蠢","最","目标","cylindervolume","只会","of","pure","9","功能","没有","副作用","recall","orig","这样","copied","前提","输入","16","编译","这些","实现","偶然","时","impure","_","set","仅仅","这里","方式","输出","sides","str","lower","要","v","至关","simple","restapi","修改","call","几个","ids","操作","这","remembernumbers","i","b","第三","影响","不纯","calculateaverage","透明性","already","状态","7","length","该","保存","also","sum","可读","ceil","自己","因素","执行","latestupdate","performance","创建","心算","他","原因","怎样","++","pi","三种","copieduserlist","1","正式","median","捕获","silly","mutation","lastlogin","(","提供","fn","side","一点","考虑","num","和","那么","*","属于","内","firstvalue","simplelist","touppercase","并非","state","当有","%","tolowercase","height","起始","避免","obj","document","等","`","更改","运行","this","并","读者","8","常数","在于","让","造成","the","例子","手段","也","untouched","恢复原","一个","变量","if","顺序","we","为了","未","不仅","snapup3","如果","bug","false","利于","x","assign","io","看待","brute","remove","这项","编程","很多","6","其实","变化","could","捕捉","更","表现","实际上","达式","的","..","add","both","round","具备","明显","relative",">","dom","yes","伪","保证","满足","只有","至关重要","将值","导致","一部","优化","22","当前","才能","性","那","技术","呢","」","be","于","purely","是从","iife","...","所以","user","0.5","判断","effect","from","总而言之","/","500001","一篇","跟踪","initial","}","第二次","调用","hist",".","？","去","花销","'","prefix","但","结构","简单","适当","push","当","specialnumber","某个","俗称","idempotent","只要","f","下文","3.141592","常见","{","处理","来说","「","传入","访问","二次","random","var","仍然","只","表达","局限","as","设置","肉","datecutoff","当做","知道","渲染","-","复制","发现","后","可能","如何","虽然","原","纯净","else","显然","console","or","自身","带来","list","来自","将","一种","所有","表达式","是否","987654321","output","中","与否","库中","算法","局限于","部分"," ","\"","缓存","返回值","从","reverse","只是","大部分","意味着","42","回调","深","我","作为","纯","隐式","本质","frameworks","splice","外部","需要","后续","容易","事实上","另","lastvalue","永远","with","e6","负面","像","revisited","大部","val","前者","采用","被","能够","getelementbyid","封装","存在","0","safer","name","复原","应该","return","min","替换","its","行为","难以","服务器","5","包装","起始值","defineproperty","不过","使得","换句","onuserdata","floor","显而","various","举个","上下文","maxnum","第三方","math","skip","radius","其他","分配","generate","是","起来","多个","发生","directly","libs","覆盖","引入","角度","update","lastupdated","突变","取决于","减少","与","换句话","给","是因为",";","地","¶","function","upper","重新","显而易见","!","另外","函数调用","还","方法","函数","effects","之为","不仅仅","不得不","发送","ve","up","example","先","它","foo0.8988802158307285","两个","这么","innerhtml","而","吗","相关","restore","结果","inactive","就","更好","约定","确保","save","我会","应当","纯度","js","copy","每次","$","随机","通过","impurity","但是","总是","capture","幂","work","，","4","null","这个","因为","w","mapper","不得","时才","转移","我们","因果","了","运算","自由","some","for","context","规矩","给定","务器","或者",":","变成","http","just","之一","制裁","更新","make","为","generatemorerandoms","重复","fetchuserdata","上下","getter",",","有时","变","调用函数","异步","不会","不是","。","写带","object","done","多次","取决","count","const","实在","读","消除","有","人","下列","es6","之外","说","addmaxnum","看不出","cache","并且","限于","程序","或是","数据","3.5","bliss","pow","来看","可以","请求","规避","get","好处","calculated","userlist","]","服务器资源","date","尽可","强制","原本","到","性能","userid","限制","内部","contrived","shallow","11","non","有利","有些","潜伏","之后","now","带有","明性","transparency","太","做","决定","number","清晰","：","let","historytext","hello","心灵","再","掩盖","mentally","array","定义","改进","很","topower0","输入输出","有利于","3.14","属性","无法","库","不断","因此","<","world","会","and","naive","一部分","任何","beware","只不过","常量","固定","appendchild","事实","一","实际","undefined","在","arr","一致","it","非幂","numbers","对","参数","circlearea","首先","步骤","中有","y","[","同步","说明","栗子","boolean","true","orderhistory","看起","分析","accessed","person","referential","代码","当中","关注","由","传递","nums","foo","尽可能","序列","只能","10","下","类型","smallcount","以下","允许","第二","handleinactiveusers","对象","force","做到","恢复","生成","注意","几乎","意义"],"title":"Side Effects","title_tokens":[" ","effects","side"]},{"location":"javascript/fp/side-effect/#side-effects","text":"副作用意味着代码的读者需要「人肉编译」才能跟踪某个变量的变化。 副作用的产生可能是因为一个返回值中的引用，例如引用的 state 发生了 Mutation「突变」。 因此，所有影响到函数输出的因素都应该作为函数的输入。","text_tokens":["都","编译","产生","state","因素","因为","函数","人","作为","例如","了","发生","需要","读者","引用","输出","作用","代码","可能","输入","mutation","才能","突变","一个","变量","意味","因此","」","某个","所有","应该","到","中","是因为","「","影响","变化","返回","副作用","。"," ","返回值","的","跟踪","肉","意味着","，"],"title":"Side Effects","title_tokens":[" ","effects","side"]},{"location":"javascript/fp/side-effect/#_1","text":"一个约定俗称的规矩是从不覆盖函数的实现，因此函数作为自由变量引用，可以当做引用了一个常量。 考虑两点，当有一个函数时 给定输入，输出是不变的吗？ 引入的自由变量每次都是不变的吗？程序中有其他地方可能会修改这个自由变量吗？","text_tokens":["都","这个","当有","中有","函数","实现","不","作为","其他","时","了","，","是","？","自由","规矩","覆盖","引用","给定","输出","引入","可能","输入","程序","不变","吗","一个","变量","两点","可以","因此","俗称","约定","会","修改","地方","是从","考虑","常量","每次","。"," ","的","当做"],"title":"固定状态","title_tokens":["固定","状态"]},{"location":"javascript/fp/side-effect/#_2","text":"随机函数也会产生副作用。 大部分语言中的随机都是采用伪随机算法，有些语言提供了起始值，因此给定相同的起始值生成的随机序列都是一致的。 但是 js 没有提供这项功能，因此 js 中偶然性也是副作用的一种","text_tokens":["都","产生","函数","起始","语言","偶然性","偶然","是","了","伪","给定","作用","大部","也","采用","因此","会","序列","一种","提供","中","js","这项","随机","算法","功能","但是","副作用","。","一致","部分"," ","起始值","没有","的","生成","相同","大部分","有些","，"],"title":"偶然性","title_tokens":["偶然","偶然性"]},{"location":"javascript/fp/side-effect/#io-effects","text":"最常见的副作用就是 IO 输入输出 比如 DOM，当修改 DOM 之后，事实上就已经产生了副作用 再比如两个依赖自由变量的 ajax，当异步请求的时候，如果回调执行的 顺序 不一致，可能会产生 bug，但是我们难以捕捉他们。 因为很多时候，这些 bug 只会带来 ui 渲染上的不一致，或者只是简单的状态改变。","text_tokens":["依赖","产生","执行","因为","时候","这些","渲染","改变","已经","不","我们","了","dom","自由","事实上","输出","再","作用","两个","或者","可能","输入","简单","输入输出","变量","当","顺序","就","请求","ajax","带来","ui","就是","会","如果","bug","修改","上","常见","比如","io","最","只会","事实","难以","很多","异步","但是","副作用","一致","捕捉","。"," ","状态","他们","的","只是","，","回调","之后"],"title":"IO Effects","title_tokens":["effects"," ","io"]},{"location":"javascript/fp/side-effect/#_3","text":"如果不得不通过副作用修改状态，制裁方式之一是 幂等性","text_tokens":["不得不","通过","如果","副作用","状态","方式","作用","不得","修改"," ","幂","等","是","之一","，","性","制裁"],"title":"制裁副作用","title_tokens":["副作用","制裁","作用"]},{"location":"javascript/fp/side-effect/#_4","text":"首先给出一个在「数学」上和「编程」上都不属于幂等的例子 let updateCounter = obj => { if ( obj . count < 10 ) { obj . count ++ ; return true ; } return false ; };","text_tokens":["都","不","obj","等",".","++",">","数学","let","true","updatecounter","例子","一个","if","<","」","(","false","10","上","给出","return","{","「","=",";","编程","和",")","在"," ","属于","幂","的","count","}","首先"],"title":"幂等性","title_tokens":["幂","等","性"]},{"location":"javascript/fp/side-effect/#_5","text":"从数学角度来看，幂等性意味着在第一次调用后输出不会改变的操作。 更清晰的例子。 f(x) = f(f(x)) = f(f(f(x))) 在 js 内置的 Math 库中，下面这些例子显然是幂等性的。 Math.min(..) Math.max(..) Math.round(..) Math.floor(..) Math.ceil(..) 我们也可以自己定义一些幂等性的运算 let toPower0 = x => Math . pow ( x , 0 ); let snapUp3 = x => x - ( x % 3 ) + ( x % 3 > 0 && 3 ); toPower0 ( 3 ) == toPower0 ( toPower0 ( 3 )); // true snapUp3 ( 3.14 ) == snapUp3 ( snapUp3 ( 3.14 )); // true 数学角度的幂等性并不仅仅局限于数学运算，js 中基本类型强制转换也是幂等的 let x = 42 , y = 'hello' ; String ( x ) === String ( String ( x )); // true Boolean ( y ) === Boolean ( Boolean ( y )); // true 或是 let upper = v => v . toUpperCase (); let lower = v => v . toLowerCase (); let str = 'Hello World' ; upper ( str ) == upper ( upper ( str )); // true lower ( str ) == lower ( lower ( str ) ); // true 总而言之，幂等性就是满足下列公式的数学表达式 f(x) = f(f(x))","text_tokens":["自己","改变","我们","-","运算","转换","后","显然","意味","(","就是","表达式","中",",","=",")","库中","不会","。","局限于"," ","从","而言","意味着","string","touppercase","42","%","公式","tolowercase","下列","等","并","&&","限于","或是","例子","也","pow","来看","可以","snapup3","下面","不仅","0","max","x","min","强制","一些","更","3","达式","的","..","round","floor","math","是","第一",">","数学","第一次","清晰","let","满足","hello","角度","基本","定义","topower0","3.14","性","内置","world","一次","+",";","在","总而言之","/","调用","upper","这些","y",".","不仅仅","boolean","true","仅仅","'","输出","str","lower","v","f","操作","类型","js","幂","表达","局限","，","ceil"],"title":"数学上的幂等性","title_tokens":["上","幂","的","等","性","数学"]},{"location":"javascript/fp/side-effect/#_6","text":"程序中的幂等性没有那么正式，换句话说，当第一次调用 f(x) 与第二次调用的返回值没有区别，从程序的角度，我们认为是幂等的。 就像在 Http 的 RESTapi 中，PUT 被定义为更新服务器资源，当发送多个带有相同参数的 PUT 时，服务器资源都具备相同的结果状态。 // idempotent:幂等 obj . count = 2 ; a [ a . length - 1 ] = 42 ; person . name = upper ( person . name ); // non-idempotent:非幂等 obj . count ++ ; a [ a . length ] = 42 ; person . lastUpdated = Date . now (); 因此，幂等性的定义是，在第一次调用之后，后续怎样的重复调用，程序状态都不会再改变。非幂等性在每次调用都会更改程序状态。 那么在 DOM 更新中如何表现呢？ let hist = document . getElementById ( 'orderHistory' ); // idempotent: hist . innerHTML = order . historyText ; // non-idempotent: let update = document . createTextNode ( order . latestUpdate ); hist . appendChild ( update ); // 隐式的，当前状态是下一状态的一部分 我们并不能总是幂等的定义我们的操作，但这有利于减少副作用的影响。","text_tokens":["2","put","latestupdate","改变","服务","怎样","我们","-","++","order","1","正式","务器",":","如何","http","更新","(","为","重复","中","=",")","不会","资源","。","那么"," ","部分","返回值","从","count","相同","42","都","obj","document","等","不能","隐式","更改","认为","后续","并","像","作用","程序","被","getelementbyid","利于","name","]","服务器资源","date","x","服务器","返回","表现","的","non","有利","换句","具备","之后","now","带有","是","第一","多个","dom","第一次","let","historytext","角度","再","update","一部","定义","lastupdated","当前","有利于","减少","性","a","因此","呢","与","一次","会","换句话","createtextnode","一部分","换句话说","区别",";","appendchild","一","在","没有","副作用","/","非幂","参数","第二次","调用","upper","hist","[","时",".","？","发送","'","orderhistory","但","person","innerhtml","结果","当","就","idempotent","restapi","f","下","操作","这","第二","每次","影响","二次","状态","length","总是","幂","，"],"title":"程序中的幂等性","title_tokens":["幂","程序","等","的","中","性"]},{"location":"javascript/fp/side-effect/#pure-bliss","text":"一个没有副作用的函数称之为 Pure Function ，也就是「纯」函数 纯函数在编程角度来说是幂等的，因为没有任何副作用。 let add = ( a , b ) => a + b 可以发现所有的输入输出都是直接的，没有引用任何自由变量，多次调用 add 函数与只调用一次没有任何区别。所以 add 是一个幂等纯函数。 但是在数学意义中，不是所有纯函数都是幂等的，因为的返回值可能不能作为他们的输入。 let calculateAverage = nums => { let sum = 0 ; for ( let num of nums ) { sum += num ; } return sum / nums . length ; } calculateAverage ([ 1 , 2 , 4 , 7 , 11 , 16 , 22 ]); // 9 在这个例子中，返回值并非一个数组，因此不可能「recall」 calculateAverage(calculateAverage(nums)) 纯函数也可以引用自由变量和其他函数，前提是自由变量没有副作用。 const PI = 3.141592 ; let circleArea = radius => PI * radius * radius ; let cylinderVolume = ( radius , height ) => height * circleArea ( radius ); 另一个纯函数引用自由变量的例子就是 闭包 虽然 circleArea 是一个函数对象，我们可以给他添加一个可能「突变」的属性，但是不影响 circleArea 调用。因此只要不重新分配函数，就没有副作用。 验证纯函数的另一种方式是，相同的输入永远产生相同的输出。 如果一个函数给相同的输入产生不同的输出，那么就不是一个纯函数。 在 js 中，写带副作用的代码实在是太容易了。","text_tokens":["2","这个","因为","添加","闭包","他","我们","pi","发现","了","自由","1","for","可能","虽然","就是","(","一种","所有","4","中",",","=","num",")","和","写带","不是","。","那么"," ","多次","他们","返回值","数组","const","*","相同","并非","实在","都","height","作为","纯","等","不能","容易","另","引用","永远","作用","例子","也","一个","变量","可以","如果","0","]","return","编程","返回","11","的","add","验证","产生","不","radius","其他","分配","太","是",">","数学","let","不同","角度","重新分配","22","突变","属性","输入输出","a","因此","」","与","一次","直接","+","称之为","任何","区别","给","所以","cylindervolume","of",";","pure","9","在","没有","副作用","/","recall","}","前提","输入","function","16","circlearea","调用","重新","函数","[",".","之为","方式","输出","代码","nums","就","只要","3.141592","{","来说","js","「","b","对象","影响","calculateaverage","但是","7","length","只","幂","，","sum","意义"],"title":"Pure Bliss","title_tokens":["bliss","pure"," "]},{"location":"javascript/fp/side-effect/#purely-relative","text":"let rememberNumbers = nums => fn => fn ( nums ); let list = [ 1 , 2 , 3 , 4 , 5 ]; let simpleList = rememberNumbers ( list ); simpleList 像一个纯函数，但实际上并不是， let median = nums => ( nums [ 0 ] + nums [ nums . length - 1 ]) / 2 ; simpleList ( median ); // 3 list . push ( 6 ); simpleList ( median ); // 3.5 显而易见，当我们修改输入引用的自由变量，返回值就发生了变化。 可以通过复制数组使得 simpleList 变成纯函数。 let rememberNumbers = nums => { // make a copy of the array nums = [... nums ]; return fn => fn ( nums ); } 但是这可能会导致一个更隐蔽的副作用潜伏。 let list = [ 1 , 2 , 3 , 4 , 5 ]; // make `list[0]` be a getter with a side effect Object . defineProperty ( list , 0 , { get : () => { console . log ( \"[0] was accessed!\" ); return 1 ; } } ); let simpleList = rememberNumbers ( list ); // [0] was accessed! 这个副作用看起来无法避免，但是我们可以将它从函数内部转移到调用函数的地方。 let rememberNumbers = (... nums ) => fn => fn ( nums ) let simpleList = rememberNumbers (... list ); // [0] was accessed! 这样做的好处是，rememberNumbers 是纯函数，造成副作用的原因在于 ...","text_tokens":["2","这个","原因","转移","我们","-","了","复制","自由","1","median",":","变成","可能","console","list","将","(","make","隐蔽","fn","side","4","getter",",","=",")","调用函数","object","不是","。"," ","数组","\"","返回值","从","simplelist","避免","纯","`","并","引用","log","with","在于","像","作用","造成","the","3.5","一个","变量","可以","get","was","0","好处","]","return","到","6","内部","返回","变化","5","更","3","defineproperty","实际上","的","潜伏","使得","显而","看起来","起来","是",">","发生","做","let","导致","易见","array","a","无法","会","地方","be","+","...","of",";","实际","effect","副作用","/","这样","}","输入","显而易见","!","调用","函数","[",".","看起","它","但","accessed","push","nums","当","就","修改","{","remembernumbers","这","copy","通过","但是","length","，"],"title":"Purely Relative","title_tokens":["purely","relative"," "]},{"location":"javascript/fp/side-effect/#_7","text":"// yes, a silly contrived example :) let firstValue = nums => nums [ 0 ]; let lastValue = nums => firstValue ( nums . reverse ()); simpleList ( lastValue ); // 5 console . log ( list ); // [1,2,3,4,5] -- OK! simpleList ( lastValue ); // 1 reverse() 方法其实修改了原本的数组，只不过修改的是内部引用的数组。 怎样改进呢？ let rememberNumbers = (... nums ) => fn => fn ([... nums ]); 可以通过传递一个数组拷贝来避免接受该数组的函数在调用时改变原数组。 但是仍然无法保证传递一个不纯的函数。因此，我们只能尽量的让函数 pure，为了可读性。","text_tokens":["2","改变","拷贝","怎样","我们","-","了","1","silly",":","原","console","list","(","fn","4","来",",","=",")","。"," ","数组","reverse","firstvalue","simplelist","避免","lastvalue","log","引用","让","ok","一个","可以","为了","尽量","0","]","原本","内部","其实","5","contrived","3","的","不过","接受","是",">","yes","保证","let","改进","a","无法","因此","呢","可读性","...","只不过",";","pure","在","/","调用","!","方法","函数","[","时",".","？","example","传递","nums","只能","修改","remembernumbers","不纯","通过","但是","该","仍然","，","可读"],"title":"纯函数 + 不纯函数 = 不纯函数","title_tokens":["函数"," ","不","纯","+","="]},{"location":"javascript/fp/side-effect/#referential-transparency","text":"判断一个函数是否纯净的第三种方式，是 Referential transparency 「引用透明性」。如果将值替换函数调用的那一行，行为上没有任何变化，那么该函数就是纯函数。 也就是说，在一个程序当中，我们用一个 val 代替了一个函数调用，在执行上我们看不出任何区别。 如果一个函数存在副作用，但是在程序的任何地方都没有被观察到或者被依赖，那么他还具备「引用透明性」吗？ let sum ; let calculateAverage = nums => { sum = 0 ; for ( let num of nums ) { sum += num ; } return sum / nums . length ; } let numbers = [ 1 , 2 , 4 , 7 , 11 , 16 , 22 ]; let avg = calculateAverage ( numbers ); 不得不说它和纯函数几乎没有区别，但是如何看待他取决于你自己","text_tokens":["2","自己","执行","他","不得","第三种","我们","了","三种","1","for","或者","纯净","如何","用","就是","(","是否","4",",","=","num",")","和","。","那么"," ","取决","avg","都","观察","纯","你","也就是说","说","看不出","引用","作用","不出","程序","代替","val","一个","被","透明","如果","存在","0","上","]","return","替换","看待","到","行为","变化","就是说","11","的","具备","依赖","明性","transparency","是",">","let","将值","22","取决于","那","」","地方","+","一行","任何","区别","of",";","判断","在","没有","副作用","/","numbers","}","16","调用","函数调用","还","函数","[",".","？","不得不","它","方式","referential","当中","吗","nums","{","「","第三","calculateaverage","透明性","但是","7","该","length","几乎","，","sum"],"title":"Referential transparency","title_tokens":["transparency","referential"," "]},{"location":"javascript/fp/side-effect/#performance-effects","text":"观察这个函数 let cache = []; let specialNumber = n => { // if we've already calculated this special number, // skip the work and just return it from the cache if ( cache [ n ] !== undefined ) { return cache [ n ]; } var x = 1 , y = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { x += i % 2 ; y += i % 3 ; } cache [ n ] = ( x * y ) / ( n + 1 ); return cache [ n ]; } specialNumber ( 6 ); // 4 specialNumber ( 42 ); // 22 specialNumber ( 1 E6 ); // 500001 specialNumber ( 987654321 ); // 493827162 我们通过一个缓存来优化多次调用这个函数的性能，但是这看起来很蠢，你可能认为他是纯函数，但是我不这么认为。 let specialNumber = ( function memoization (){ let cache = []; return function specialNumber ( n ){ // if we've already calculated this special number, // skip the work and just return it from the cache if ( cache [ n ] !== undefined ) { return cache [ n ]; } let x = 1 , y = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { x += i % 2 ; y += i % 3 ; } cache [ n ] = ( x * y ) / ( n + 1 ); return cache [ n ]; }; })(); 我们通过 IIFE 来 确保 函数的其他部分不能访问到 cache，而不仅仅是 不允许 在这里至关重要的一点，就是我们能确保，而不仅仅是心灵约定。","text_tokens":["2","这个","他","我们","++","1","for","just","可能","(","就是","987654321","一点","4","来",",","=",")","。","缓存","部分"," ","*","多次","42","n","观察","%","我","special","纯","不能","你","认为","this","cache","e6","the","能","一个","if","we","不仅","calculated","]","493827162","return","x","到","性能","重要","6","3","的","看起来","不","skip","memoization","其他","起来","是",">","number","let","至关重要","心灵","优化","22","<","and","+","很蠢","iife",";","undefined","在","from","/","it","500001","}","function","调用","!","函数","[","y","不仅仅","'","ve","仅仅","看起","这里","这么","而","specialnumber","至关","确保","约定","{","这","i","允许","访问","通过","already","但是","var","work","，"],"title":"Performance Effects","title_tokens":[" ","effects","performance"]},{"location":"javascript/fp/side-effect/#mentally-transparent","text":"虽然有时将常数和函数调用替换对函数的执行没有影响，但是我们不应该这么做。 不仅仅是因为数据可能是变化的，还为了更好地可读性。 读者会不断地心算一个永远不会变的结果，但是纯函数能够减少这样的花销。","text_tokens":["函数调用","执行","还","函数","因为","心算","不","纯","我们","是","做","花销","不仅仅","这样","仅仅","读者","常数","永远","这么","可能","虽然","数据","一个","结果","减少","不断","能够","将","为了","更好","不仅","会","应该","可读性","替换","有时","是因为","影响","变","和","变化","没有","但是","。","地","不会"," ","的","对","，","可读","调用"],"title":"Mentally Transparent","title_tokens":["mentally"," ","transparent"]},{"location":"javascript/fp/side-effect/#_8","text":"可以将副作用从函数内部转移到调用函数的地方，这看起来更明显。 举个栗子 let addMaxNum = arr => { let maxNum = Math . max (... arr ); arr . push ( maxNum + 1 ); } let nums = [ 4 , 2 , 7 , 3 ]; addMaxNum ( nums ); // [4,2,7,3,8] //改进 let addMaxNum = arr => Math . max (... arr ) + 1 ; let nums = [ 4 , 2 , 7 , 3 ]; nums . push ( addMaxNum ( nums )); // [4,2,7,3,8] 我们可以将 addMaxNum 折叠起来了，我们不需要再去观察 addMaxNum 的内部实现。 另外一种方式是采用 immutable 数据结构来实现，我会在下一篇文章说明 我们还可以从这几个角度来分析。","text_tokens":["2","转移","我们","了","1","将","(","一种","数据结构","来",",","immutable","=","折叠","调用函数",")","。"," ","从","观察","文章","addmaxnum","8","需要","作用","数据","采用","可以","max","]","到","内部","更","3","的","举个","看起来","明显","maxnum","math","不","起来","是",">","let","角度","再","改进","地方","+","...",";","arr","在","副作用","/","一篇","}","调用","另外","还","函数","[","实现",".","，","去","说明","栗子","看起","分析","方式","结构","push","nums","下","我会","几个","{","这","7","4"],"title":"函数提纯","title_tokens":["函数","提纯"]},{"location":"javascript/fp/side-effect/#_9","text":"如果一个函数是不纯的，并且引用了外部的自由变量，我们可以使用作用域来封装。 let users = {}; let fetchUserData = userId => { ajax ( `http://some.api/user/ ${ userId } ` , function onUserData ( user ){ users [ userId ] = user ; }); } // 改进 function safer_fetchUserData ( userId , users ) { // simple, naive ES6+ shallow object copy, could also // be done w/ various libs or frameworks users = Object . assign ( {}, users ); fetchUserData ( userId ); // return the copied state return users ; // *********************** // original untouched impure function: function fetchUserData ( userId ) { ajax ( `http://some.api/user/ ${ userId } ` , function onUserData ( user ){ users [ userId ] = user ; } ); } } 函数的纯度与否其实是由外部决定的，内部也可以适当的采用一些不纯的技术，比如为了性能使用 cache 缓存结果。 但是我们的目标是尽可能的减少副作用。","text_tokens":["w","我们","了","自由","some",":","可能","http","or","(","使用","比如","fetchuserdata","来",",","=",")","与否","object","done","。","缓存"," ","*","state","es6","`","frameworks","外部","作用域","cache","并且","引用","api","作用","the","untouched","也","一个","变量","采用","users","可以","ajax","封装","为了","如果","safer","]","return","尽可","assign","性能","userid","一些","内部","其实","could","shallow","的","original","onuserdata","various","是",">","决定","let","libs","改进","减少","技术","naive","be","+","目标","user",";","副作用","/","copied","}","function","函数","[",".","impure","_","由","适当","结果","simple","尽可能","纯度","{","copy","$","不纯","但是","also","，"],"title":"自由变量","title_tokens":["变量","自由"]},{"location":"javascript/fp/side-effect/#_10","text":"有些时候，不纯的函数来自于第三方库，你无法直接将自由变量封装在函数的作用域内 let nums = []; let smallCount = 0 ; let largeCount = 0 ; function generateMoreRandoms ( count ) { for ( let i = 0 ; i < count ; i ++ ) { let num = Math . random (); if ( num >= 0.5 ) { largeCount ++ ; } else { smallCount ++ ; } nums . push ( num ); } } 我们可以通过 brute-force 算法执行以下步骤来改进： 保存未被影响的当前状态 设置初始输入状态 运行不纯的函数 捕获副作用 恢复原状态 返回副作用状态 function safer_generateMoreRandoms ( count , initial ) { // (1) Save original state let orig = { nums , smallCount , largeCount }; // (2) Set up initial pre-side effects state nums = [... initial . nums ]; smallCount = initial . smallCount ; largeCount = initial . largeCount ; // (3) Beware impurity! generateMoreRandoms ( count ); // (4) Capture side effect state let sides = { nums , smallCount , largeCount }; // (5) Restore original state nums = orig . nums ; smallCount = orig . smallCount ; largeCount = orig . largeCount ; // (6) Expose side effect state directly as output return sides ; } 需要注意的是 掩盖 手段只有在处理同步代码时才有效。","text_tokens":["2","执行","时候","时才","我们","-","++","自由","1","for","捕获","else","来自","将","三方","(","generatemorerandoms","side","4","output","来",",","=","num",")","算法","。","expose"," ","内","count","state","你","运行","需要","作用域","作用","手段","恢复原","变量","if","被","可以","封装","未","0","safer","复原","pre","]","return","brute","有效","6","返回","5","3","初始","的","有些","original","第三方","math","largecount","是",">","只有","：","let","directly","掩盖","当前","改进","无法","库","<","直接","于","beware","...","0.5",";","在","effect","副作用","/","orig","initial","}","输入","function","步骤","!","函数","[","effects",".","同步","_","set","up","sides","代码","restore","push","nums","save","处理","{","smallcount","i","以下","第三","影响","不纯","通过","force","random","状态","impurity","capture","恢复","保存","as","注意","设置","，"],"title":"掩盖","title_tokens":["掩盖"]},{"location":"javascript/fp/side-effect/#_11","text":"当我们要处理的副作用是一个 突变 的输入导致的，「数组」或是「对象」我们可以这样做 function handleInactiveUsers ( userList , dateCutoff ) { for ( let i = 0 ; i < userList . length ; i ++ ) { if ( userList [ i ]. lastLogin == null ) { // remove the user from the list userList . splice ( i , 1 ); i -- ; } else if ( userList [ i ]. lastLogin < dateCutoff ) { userList [ i ]. inactive = true ; } } } 先做一个深拷贝 function safer_handleInactiveUsers ( userList , dateCutoff ) { // make a copy of both the list and its user objects let copiedUserList = userList . map ( function mapper ( user ){ // copy a `user` object return Object . assign ( {}, user ); }); // call the original function with the copy handleInactiveUsers ( copiedUserList , dateCutoff ); // expose the mutated list as a direct output return copiedUserList ; }","text_tokens":["null","direct","拷贝","mapper","我们","-","++","copieduserlist","1","for","else","lastlogin","list","(","make","output",",","=",")","object","expose"," ","数组","深","`","splice","with","作用","the","或是","一个","if","可以","userlist","0","safer","]","return","assign","its","remove","map","的","both","original","objects","是","做","mutated","let","导致","突变","a","<","」","and","user","of",";","副作用","from","/","这样","}","输入","function","[",".","_","true","先","inactive","当","要","call","处理","{","i","「","handleinactiveusers","copy","对象","length","as","datecutoff","，"],"title":"规避","title_tokens":["规避"]},{"location":"javascript/fp/side-effect/#this-revisited","text":"有的时候 this 作为一个隐式的输入也可能导致副作用 let ids = { prefix : \"_\" , generate () { return this . prefix + Math . random (); } }; 我们可以创建一个包装函数来传入可读的上下文 let safer_generate = context => ids . generate . call ( context ); safer_generate ({ prefix : \"foo\" }); // \"foo0.8988802158307285\" 本质上，我们并没有消除副作用的影响，而是尽可能的做到在运行时能将 bug 定位在仍然使用副作用的代码上。","text_tokens":["上下文","时能","创建","函数","时候","消除","math","有","作为","generate","我们",".","，","隐式",">","本质","_","运行","this","并","let","prefix","context","foo0.8988802158307285","导致","作用","代码",":","可能","也","一个","定位","可以","foo","将","(","尽可能","safer","bug","下文","使用","上","ids","return","call","尽可","+","{","上下","而是","来",",","=","传入","影响",";",")","random","没有","副作用","在","包装","/"," ","\"","做到","仍然","。","的","}","输入","可读"],"title":"this Revisited","title_tokens":["revisited"," ","this"]},{"location":"javascript/fp/why-fp/","text":"近年来，主流开发模式从独立开发转变成多人协同，对代码的可读性的要求增加。 函数式编程带来的好处 ¶ 可读性强 可维护性 天然 bug 更少更易发现 举个栗子 来对比一下下面的代码 // 1. let arr = [ 1 , 2 , 3 , 4 ] arr . map ( m => { //... }) // 2. let arr = [ 1 , 2 , 3 , 4 ] for ( let i = 0 ; i < arr . length ; i ++ ) { // arr[i] ... } 明显可以看出 map 一目了然，因为在阅读 for 循环的时候，我们会不由自主，也迫不得已的深入代码细节，潜意识会去知道每一步循环干了什么。 命令式 => 声明式的转变 ¶ 命令式的代码总是让读者「过度的」关心技术细节。 而声明式的代码让人更关心数据流和结果。 代码中的平衡 ¶ 熟练掌握函数式编程并不意味着所有的代码都必须得函数化。 取得一个开发和维护的成本的平衡才是我们应该去关心的事情。","text_tokens":["2","知道","因为","时候","强","不得","我们","更少","++","发现","一下","了","每","技术细节","1","协同","for","转变","变成","意味","不得已","带来","(","所有","可维护性","来","中",",","=","得",")","干","和","。"," ","天然","从","对比","年来","意味着","都","平衡","人","迫不得已","并","读者","让","必须","数据","也","一个","关心","一目","模式","可以","深入","声明","下面","好处","0","bug","开发","]","应该","看出","一目了然","map","自主","编程","更","3","增加","的","成本","举个","明显","不","掌握","是",">","let","一步","什么","不由自主","主流","事情","维护","阅读","技术","<","」","会","取得","意识","式","可读性","过度","...",";","不由","arr","在","化","/","¶","维护性","对","}","m","才","近年","函数","[",".","，","熟练","去","更易","栗子","细节","数据流","代码","而","命令式","结果","独立","转变成","潜意识","循环","近年来","了然","{","i","「","熟练掌握","多人","要求","length","总是","命令","4","可读"],"title":"Why FP","title_tokens":[" ","fp","why"]},{"location":"javascript/fp/why-fp/#_1","text":"可读性强 可维护性 天然 bug 更少更易发现 举个栗子 来对比一下下面的代码 // 1. let arr = [ 1 , 2 , 3 , 4 ] arr . map ( m => { //... }) // 2. let arr = [ 1 , 2 , 3 , 4 ] for ( let i = 0 ; i < arr . length ; i ++ ) { // arr[i] ... } 明显可以看出 map 一目了然，因为在阅读 for 循环的时候，我们会不由自主，也迫不得已的深入代码细节，潜意识会去知道每一步循环干了什么。","text_tokens":["2","知道","因为","时候","强","不得","我们","更少","++","发现","一下","了","每","1","for","不得已","(","可维护性","4","来",",","=",")","干","。"," ","天然","对比","迫不得已","也","一目","可以","深入","下面","0","bug","]","看出","一目了然","map","自主","3","的","举个","明显",">","let","一步","什么","不由自主","维护","阅读","<","会","意识","可读性","...",";","不由","arr","在","/","维护性","}","m","[",".","去","更易","栗子","细节","代码","潜意识","循环","{","了然","i","length","，","可读"],"title":"函数式编程带来的好处","title_tokens":["编程","函数","好处","式","的","带来"]},{"location":"javascript/fp/why-fp/#_2","text":"命令式的代码总是让读者「过度的」关心技术细节。 而声明式的代码让人更关心数据流和结果。","text_tokens":["人","细节","技术细节","读者","让","数据流","代码","数据","而","命令式","结果","技术","关心","」","声明","式","过度","「","和","。","更","总是"," ","的","命令"],"title":"命令式 =&gt; 声明式的转变","title_tokens":[";","声明","&"," ","gt","转变","式","的","命令","命令式","="]},{"location":"javascript/fp/why-fp/#_3","text":"熟练掌握函数式编程并不意味着所有的代码都必须得函数化。 取得一个开发和维护的成本的平衡才是我们应该去关心的事情。","text_tokens":["都","才","平衡","函数","不","掌握","我们","熟练","是","去","并","代码","必须","一个","维护","意味","事情","关心","取得","所有","开发","应该","式","熟练掌握","得","编程","和","化","。"," ","的","意味着","成本"],"title":"代码中的平衡","title_tokens":["代码","中","的","平衡"]},{"location":"javascript-ecosystem/introduction/","text":"","text_tokens":[],"title":"Getting Started","title_tokens":["started","getting"," "]},{"location":"skills/introduction/","text":"简介 ¶","text_tokens":["简介"," ","¶"],"title":"Getting Started","title_tokens":["started","getting"," "]},{"location":"skills/introduction/#_1","text":"","text_tokens":[],"title":"简介","title_tokens":["简介"]},{"location":"skills/git/git-cz/","text":"why git cz ¶ 给 git commit 添加一段简短有意义且规范的描述 组成 ¶ 一个标准的 commit 应该包括下面几个部分 <type> ( <scope> ): <subject> <BLANK LINE > <body> <BLANK LINE > <footer> 其中 type ¶ feat 新功能 fix 修复 Bug docs 只有文档改变 style 并没有影响代码的意义(去掉空格，换行) refactor 没有修改 Bug 也没有提交新功能 perf 代码修改提高性能 test 添加测试 chore 构建过程或者构建工具的改变 scope ¶ 说明本次代码影响的范围（文件、文件夹） subject ¶ 简短描述 body ¶ 当代码需要一些说明时 foot ¶ 可以用来跟踪 issue 的 ID ，如 Close #123 方便的库 ¶ npm i -g commitizen 全局安装 commitizen commitizen init cz-conventional-changelog --save --save-exact 项目目录中运行 在 package.json 中添加 \"config\" : { \"commitizen\" : { \"path\" : \"cz-conventional-changelog\" } } \"scripts\" : { \"commit\" : \"git-cz\" } 然后就可以通过 npm run commit 来运行了。","text_tokens":["why","、","改变","添加","path","文件夹","-","了","docs",":","或者","包括","json","新","方便","目录","body","package","(","feat","123","来","中",")","工具","。","安装","部分"," ","blank","简短","\"","构建","件夹","line","有","）","commitizen","commit","规范","运行","空格","config","并","需要","（","subject","全局","exact","也","一个","git","可以","下面","bug","项目","应该","type","changelog","性能","一些","的","提交","close","refactor",">","只有","id","然后","且","文档","npm","conventional","修复","换行","cz","去掉","chore","fix","库","<","其中","过程","给","footer","文件","描述","scope","功能","没有","范围","在","perf","¶","#","init","跟踪","}","提高","时","issue",".","说明","foot","本次","g","代码","用来","当","scripts","就","save","修改","几个","{","组成","i","style","影响","如","run","通过","测试","一段","标准","，","test","意义"],"title":"git-cz","title_tokens":["cz","-","git"]},{"location":"skills/git/git-cz/#why-git-cz","text":"给 git commit 添加一段简短有意义且规范的描述","text_tokens":["描述","且","添加","有"," ","简短","一段","commit","的","给","意义","规范","git"],"title":"why git cz","title_tokens":["cz"," ","why","git"]},{"location":"skills/git/git-cz/#_1","text":"一个标准的 commit 应该包括下面几个部分 <type> ( <scope> ): <subject> <BLANK LINE > <body> <BLANK LINE > <footer> 其中","text_tokens":["line","commit",">","subject",":","包括","一个","<","body","(","下面","应该","几个","type","其中","footer",")","scope","部分"," ","blank","的","标准"],"title":"组成","title_tokens":["组成"]},{"location":"skills/git/git-cz/#type","text":"feat 新功能 fix 修复 Bug docs 只有文档改变 style 并没有影响代码的意义(去掉空格，换行) refactor 没有修改 Bug 也没有提交新功能 perf 代码修改提高性能 test 添加测试 chore 构建过程或者构建工具的改变","text_tokens":["改变","refactor","添加","提高","空格","只有","并","文档","docs","代码","修复","或者","换行","也","chore","去掉","新","fix","(","feat","bug","修改","过程","性能","style","影响",")","工具","功能","没有","测试","perf"," ","的","构建","，","test","提交","意义"],"title":"type","title_tokens":["type"]},{"location":"skills/git/git-cz/#scope","text":"说明本次代码影响的范围（文件、文件夹）","text_tokens":["影响","本次","、","范围","）","（","代码","文件夹","的","说明","件夹","文件"],"title":"scope","title_tokens":["scope"]},{"location":"skills/git/git-cz/#subject","text":"简短描述","text_tokens":["简短","描述"],"title":"subject","title_tokens":["subject"]},{"location":"skills/git/git-cz/#body","text":"当代码需要一些说明时","text_tokens":["需要","一些","代码","时","说明","当"],"title":"body","title_tokens":["body"]},{"location":"skills/git/git-cz/#foot","text":"可以用来跟踪 issue 的 ID ，如 Close #123","text_tokens":["可以","id","如"," ","#","的","123","issue","跟踪","用来","，","close"],"title":"foot","title_tokens":["foot"]},{"location":"skills/git/git-cz/#_2","text":"npm i -g commitizen 全局安装 commitizen commitizen init cz-conventional-changelog --save --save-exact 项目目录中运行 在 package.json 中添加 \"config\" : { \"commitizen\" : { \"path\" : \"cz-conventional-changelog\" } } \"scripts\" : { \"commit\" : \"git-cz\" } 然后就可以通过 npm run commit 来运行了。","text_tokens":["commitizen","添加","path","commit","-",".","了","运行","config","然后","npm","conventional","全局","g",":","json","exact","cz","目录","scripts","git","就","可以","package","save","项目","changelog","{","i","中","来","run","通过","在","。","安装"," ","\"","init","}"],"title":"方便的库","title_tokens":["的","方便","库"]}]}